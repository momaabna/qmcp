
from mcp.server.fastmcp import FastMCP
import sys
sys.path.append('/usr/share/qgis/python/plugins')
print(sys.path)
import processing

# Create an MCP server
mcp_server = FastMCP("QGIS MCP Server")

@mcp_server.tool()
def ping() -> str:
    return "pong"


from qgis.core import QgsProject, QgsMapLayer

def _get_layer_type( layer):
    """Helper to get layer type as string"""
    if layer.type() == QgsMapLayer.VectorLayer:
        return f"vector_{layer.geometryType()}"
    elif layer.type() == QgsMapLayer.RasterLayer:
        return "raster"
    else:
        return str(layer.type())
    
@mcp_server.tool()
def get_layers() -> list:
    """Get all layers in the project"""
    project = QgsProject.instance()
    layers = []
    
    for layer_id, layer in project.mapLayers().items():
        layer_info = {
            "id": layer_id,
            "name": layer.name(),
            "type": _get_layer_type(layer),
            "visible": project.layerTreeRoot().findLayer(layer_id).isVisible()
        }
        
        # Add type-specific information
        if layer.type() == QgsMapLayer.VectorLayer:
            layer_info.update({
                "feature_count": layer.featureCount(),
                "geometry_type": layer.geometryType()
            })
        elif layer.type() == QgsMapLayer.RasterLayer:
            layer_info.update({
                "width": layer.width(),
                "height": layer.height()
            })
            
        layers.append(layer_info)
    
    return layers




import sqlite3,os
@mcp_server.tool()
def search_tools(query: str) -> list:
    """Search available processing tools by name or id or short description or help containing the query string."""
    if query:
        db_path = os.path.join(os.path.dirname(__file__), 'qgis_algorithms.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT id, name,short_description, help FROM algorithms WHERE id LIKE ? OR name LIKE ? OR short_description LIKE ? OR help LIKE ?", (f'%{query}%', f'%{query}%', f'%{query}%', f'%{query}%'))
        results = cursor.fetchall()
        conn.close()
        #to dict

        for i in range(len(results)):
            results[i] = {
                "id": results[i][0],
                "name": results[i][1],
                "short_description": results[i][2],
                "help": results[i][3]
            }
        return results
    else:
        return []


from qgis.core import (QgsApplication, Qgis, QgsProject, QgsMapLayer, QgsVectorLayer, QgsRasterLayer, QgsCoordinateReferenceSystem, QgsMapSettings, QgsMapRendererParallelJob )
from qgis.PyQt.QtCore import QSize
from qgis.PyQt.QtGui import QIcon, QColor
def _get_layer_type(layer):
    """Helper to get layer type as string"""
    if layer.type() == QgsMapLayer.VectorLayer:
        return f"vector_{layer.geometryType()}"
    elif layer.type() == QgsMapLayer.RasterLayer:
        return "raster"
    else:
        return str(layer.type())
          
@mcp_server.tool()
def get_project_info(**kwargs) -> dict:
    """Get information about the current QGIS project"""
    project = QgsProject.instance()
    
    # Get basic project information
    info = {
        "filename": project.fileName(),
        "title": project.title(),
        "layer_count": len(project.mapLayers()),
        "crs": project.crs().authid(),
        "layers": []
    }
    
    # Add basic layer information (limit to 10 layers for performance)
    layers = list(project.mapLayers().values())
    for i, layer in enumerate(layers):
        if i >= 10:  # Limit to 10 layers
            break
            
        layer_info = {
            "id": layer.id(),
            "name": layer.name(),
            "type": _get_layer_type(layer),
            "visible": layer.isValid() and project.layerTreeRoot().findLayer(layer.id()).isVisible()
        }
        info["layers"].append(layer_info)
    
    return info


from qgis.utils import iface
@mcp_server.tool()
def execute_code(code, **kwargs) -> dict:
    """Execute arbitrary PyQGIS code"""
    try:
        # Create a local namespace for execution
        namespace = {
            "qgis": Qgis,
            "QgsProject": QgsProject,
            "QgsApplication": QgsApplication,
            "QgsVectorLayer": QgsVectorLayer,
            "QgsRasterLayer": QgsRasterLayer,
            "QgsCoordinateReferenceSystem": QgsCoordinateReferenceSystem
        }
        
        # Execute the code
        exec(code, namespace)
        return {"executed": True}
    except Exception as e:
        raise Exception(f"Code execution error: {str(e)}")

import os
@mcp_server.tool()
def add_vector_layer(path: str , name : str = None , provider: str="ogr", **kwargs) -> dict:
    """Add a vector layer to the project"""
    if not name:
        name = os.path.basename(path)
        
    # Create the layer
    layer = QgsVectorLayer(path, name, provider)
    
    if not layer.isValid():
        raise Exception(f"Layer is not valid: {path}")
    
    # Add to project
    QgsProject.instance().addMapLayer(layer)
    
    return {
        "id": layer.id(),
        "name": layer.name(),
        "type": _get_layer_type(layer),
        "feature_count": layer.featureCount()
    }

@mcp_server.tool()
def add_raster_layer(path: str, name: str=None, provider: str="gdal", **kwargs) -> dict:
    """Add a raster layer to the project"""
    if not name:
        name = os.path.basename(path)
        
    # Create the layer
    layer = QgsRasterLayer(path, name, provider)
    
    if not layer.isValid():
        raise Exception(f"Layer is not valid: {path}")
    
    # Add to project
    QgsProject.instance().addMapLayer(layer)
    
    return {
        "id": layer.id(),
        "name": layer.name(),
        "type": "raster",
        "width": layer.width(),
        "height": layer.height()
    }

@mcp_server.tool()
def get_layers(**kwargs) -> list:
    """Get all layers in the project"""
    project = QgsProject.instance()
    layers = []
    
    for layer_id, layer in project.mapLayers().items():
        layer_info = {
            "id": layer_id,
            "name": layer.name(),
            "type": _get_layer_type(layer),
            "visible": project.layerTreeRoot().findLayer(layer_id).isVisible()
        }
        
        # Add type-specific information
        if layer.type() == QgsMapLayer.VectorLayer:
            layer_info.update({
                "feature_count": layer.featureCount(),
                "geometry_type": layer.geometryType()
            })
        elif layer.type() == QgsMapLayer.RasterLayer:
            layer_info.update({
                "width": layer.width(),
                "height": layer.height()
            })
            
        layers.append(layer_info)
    
    return layers

@mcp_server.tool()
def remove_layer(layer_id: int, **kwargs) -> dict:
    """Remove a layer from the project"""
    project = QgsProject.instance()
    
    if layer_id in project.mapLayers():
        project.removeMapLayer(layer_id)
        return {"removed": layer_id}
    else:
        raise Exception(f"Layer not found: {layer_id}")

def zoom_to_layer(layer_id: int, **kwargs) -> dict:
    """Zoom to a layer's extent"""
    project = QgsProject.instance()
    iface = QgsApplication.instance().activeWindow().findChild(iface.__class__.__name__)
    if layer_id in project.mapLayers():
        layer = project.mapLayer(layer_id)
        iface.setActiveLayer(layer)
        iface.zoomToActiveLayer()
        return {"zoomed_to": layer_id}
    else:
        raise Exception(f"Layer not found: {layer_id}")

def get_layer_features(layer_id: int, limit:int =10, **kwargs):
    """Get features from a vector layer"""
    project = QgsProject.instance()
    
    if layer_id in project.mapLayers():
        layer = project.mapLayer(layer_id)
        
        if layer.type() != QgsMapLayer.VectorLayer:
            raise Exception(f"Layer is not a vector layer: {layer_id}")
        
        features = []
        for i, feature in enumerate(layer.getFeatures()):
            if i >= limit:
                break
                
            # Extract attributes
            attrs = {}
            for field in layer.fields():
                attrs[field.name()] = feature.attribute(field.name())
            
            # Extract geometry if available
            geom = None
            if feature.hasGeometry():
                geom = {
                    "type": feature.geometry().type(),
                    "wkt": feature.geometry().asWkt(precision=4)
                }
            
            features.append({
                "id": feature.id(),
                "attributes": attrs,
                "geometry": geom
            })
        
        return {
            "layer_id": layer_id,
            "feature_count": layer.featureCount(),
            "features": features,
            "fields": [field.name() for field in layer.fields()]
        }
    else:
        raise Exception(f"Layer not found: {layer_id}")
@mcp_server.tool()
def execute_processing(algorithm: str, parameters: dict, **kwargs)-> dict:
    """Execute a processing algorithm"""
    try:
        import processing
        result = processing.run(algorithm, parameters)
        return {
            "algorithm": algorithm,
            "result": {k: str(v) for k, v in result.items()}  # Convert values to strings for JSON
        }
    except Exception as e:
        raise Exception(f"Processing error: {str(e)}")

@mcp_server.tool()
def save_project(path:str=None, **kwargs)-> dict:
    """Save the current project"""
    project = QgsProject.instance()
    
    if not path and not project.fileName():
        raise Exception("No project path specified and no current project path")
    
    save_path = path if path else project.fileName()
    if project.write(save_path):
        return {"saved": save_path}
    else:
        raise Exception(f"Failed to save project to {save_path}")

@mcp_server.tool()
def load_project(path:str  , **kwargs) -> dict:
    """Load a project"""
    project = QgsProject.instance()
    iface = QgsApplication.instance().activeWindow().findChild(iface.__class__.__name__)
    if project.read(path):
        iface.mapCanvas().refresh()
        return {
            "loaded": path,
            "layer_count": len(project.mapLayers())
        }
    else:
        raise Exception(f"Failed to load project from {path}")

@mcp_server.tool()
def create_new_project(path:str, **kwargs) ->dict:
    """
    Creates a new QGIS project and saves it at the specified path.
    If a project is already loaded, it clears it before creating the new one.
    
    :param project_path: Full path where the project will be saved
                        (e.g., 'C:/path/to/project.qgz')
    """
    project = QgsProject.instance()
    
    if project.fileName():
        project.clear()
    
    project.setFileName(path)
    self.iface.mapCanvas().refresh()
    
    # Save the project
    if project.write():
        return {
            "created": f"Project created and saved successfully at: {path}",
            "layer_count": len(project.mapLayers())
        }
    else:
        raise Exception(f"Failed to save project to {path}")

@mcp_server.tool()
def render_map(path:str, width:int=800, height:int=600, **kwargs)-> dict:
    """Render the current map view to an image"""
    try:
        # Create map settings
        ms = QgsMapSettings()
        iface = QgsApplication.instance().activeWindow().findChild(iface.__class__.__name__)
        
        # Set layers to render
        layers = list(QgsProject.instance().mapLayers().values())
        ms.setLayers(layers)
        
        # Set map canvas properties
        rect = iface.mapCanvas().extent()
        ms.setExtent(rect)
        ms.setOutputSize(QSize(width, height))
        ms.setBackgroundColor(QColor(255, 255, 255))
        ms.setOutputDpi(96)
        
        # Create the render
        render = QgsMapRendererParallelJob(ms)
        
        # Start rendering
        render.start()
        render.waitForFinished()
        
        # Get the image and save
        img = render.renderedImage()
        if img.save(path):
            return {
                "rendered": True,
                "path": path,
                "width": width,
                "height": height
            }
        else:
            raise Exception(f"Failed to save rendered image to {path}")
            
    except Exception as e:
        raise Exception(f"Render error: {str(e)}")

@mcp_server.tool()
def scp_8_accuracy(params: dict) -> dict:
    """Accuracy - Perform the accuracy assessment. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.cross_classification.html">Tool description</a>

Accuracy (scp_8:accuracy)

Perform the accuracy assessment. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.cross_classification.html">Tool description</a>


----------------
Input parameters
----------------

INPUT_RASTER: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_RASTER_2: Reference raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_VECTOR: Reference vector

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

TEXT: Vector field

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE: NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:accuracy", params)

@mcp_server.tool()
def scp_8_band_calc(params: dict) -> dict:
    """Band calc - Perform calculations between raster bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_calc.html">Tool description</a>

Band calc (scp_8:band_calc)

Perform calculations between raster bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_calc.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

INPUT_LIST: Raster names used in expression, separated by comma, in the same order as input list

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

TEXT: Expression

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL: Input NoData as value

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

VALUE: Use value as NoData

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ENUMERATOR: Calculation data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Float32
		- 1: Int32
		- 2: UInt32
		- 3: Int16
		- 4: UInt16
		- 5: Byte

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

ENUMERATOR_2: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Float32
		- 1: Int32
		- 2: UInt32
		- 3: Int16
		- 4: UInt16
		- 5: Byte

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

VALUE_2: Output NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ENUMERATOR_3: NoData mask

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: False
		- 1: True
		- 2: None

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

VALUE_3: Set scale

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_4: Set offset

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

INPUT_RASTER: Align raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_RASTER_2: Extent raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_LIST_2: Coordinates left, top, right, bottom, separated by comma

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL_2: Extent intersection

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

VALUE_5: Pixel resolution

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFile>
	Calculation output"""
    return processing.run("scp_8:band_calc", params)

@mcp_server.tool()
def scp_8_band_clip(params: dict) -> dict:
    """Clip raster bands - Perform the clipping of raster bands based on a vector or extent coordinate list. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_clip.html">Tool description</a>

Clip raster bands (scp_8:band_clip)

Perform the clipping of raster bands based on a vector or extent coordinate list. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_clip.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

INPUT_LIST: Extent coordinates (in the order Minimum X, Maximum Y, Maximum X, Minimum Y), separated by comma

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

INPUT_VECTOR: Reference vector

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

TEXT: Vector field

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

TEXT_2: Output name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL: Virtual output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:band_clip", params)

@mcp_server.tool()
def scp_8_band_clustering(params: dict) -> dict:
    """Clustering - Perform the clustering (method K-means) of a set of rasters. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_clustering.html">Tool description</a>

Clustering (scp_8:band_clustering)

Perform the clustering (method K-means) of a set of rasters. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_clustering.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

VALUE: Number of classes

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_2: Distance threshold

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_3: Max iterations

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_4: NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

ENUMERATOR: Seed signatures

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Seed signatures from band values
		- 1: Random seed signatures

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

ENUMERATOR_2: Distance algorithm

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Minimum Distance
		- 1: Spectral Angle Mapping

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:band_clustering", params)

@mcp_server.tool()
def scp_8_band_combination(params: dict) -> dict:
    """Combination - Combines classifications in order to get a raster where each value corresponds to a combination of class values. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_combination.html">Tool description</a>

Combination (scp_8:band_combination)

Combines classifications in order to get a raster where each value corresponds to a combination of class values. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_combination.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

INPUT_LIST: Strings, separated by comma, corresponding to input bands used as column names in output table

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE: NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:band_combination", params)

@mcp_server.tool()
def scp_8_band_dilation(params: dict) -> dict:
    """Dilation - Perform the spatial dilation, through a moving window, of band pixels selected by values. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_dilation.html">Tool description</a>

Dilation (scp_8:band_dilation)

Perform the spatial dilation, through a moving window, of band pixels selected by values. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_dilation.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

INPUT_LIST: Class values, separated by comma

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE: Size in pixels

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL: Circular

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

TEXT: Output name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL_2: Virtual output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:band_dilation", params)

@mcp_server.tool()
def scp_8_band_erosion(params: dict) -> dict:
    """Erosion - Perform the spatial erosion, through a moving window, of band pixels selected by values. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_erosion.html">Tool description</a>

Erosion (scp_8:band_erosion)

Perform the spatial erosion, through a moving window, of band pixels selected by values. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_erosion.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

INPUT_LIST: Class values, separated by comma

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE: Size in pixels

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL: Circular

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

TEXT: Output name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL_2: Virtual output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:band_erosion", params)

@mcp_server.tool()
def scp_8_band_neighbor(params: dict) -> dict:
    """Neighbor - Perform the calculation of a function over neighbor pixels defined by size (i.e. number of pixels) or a structure. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_neighbor_pixels.html">Tool description</a>

Neighbor (scp_8:band_neighbor)

Perform the calculation of a function over neighbor pixels defined by size (i.e. number of pixels) or a structure. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_neighbor_pixels.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

VALUE: Neighbor distance in pixels

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL: Circular structure

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ENUMERATOR: Statistic

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Count
		- 1: Max
		- 2: Mean
		- 3: Median
		- 4: Min
		- 5: Percentile
		- 6: StandardDeviation
		- 7: Sum

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

VALUE_2: Percentile

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL_2: Virtual output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

TEXT: Output name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:band_neighbor", params)

@mcp_server.tool()
def scp_8_band_pca(params: dict) -> dict:
    """PCA - Perform the calculation of Principal Components Analysis on input bands, producing rasters corresponding to the principal components. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_pca.html">Tool description</a>

PCA (scp_8:band_pca)

Perform the calculation of Principal Components Analysis on input bands, producing rasters corresponding to the principal components. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_pca.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

VALUE: Number of components

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_2: NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:band_pca", params)

@mcp_server.tool()
def scp_8_band_sieve(params: dict) -> dict:
    """Sieve - Perform the sieve of raster bands removing patches having size lower than a threshold. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_sieve.html">Tool description</a>

Sieve (scp_8:band_sieve)

Perform the sieve of raster bands removing patches having size lower than a threshold. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_sieve.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

VALUE: Size threshold

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

TEXT: Output name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL: Virtual output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ENUMERATOR: Pixel connection

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: 4
		- 1: 8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:band_sieve", params)

@mcp_server.tool()
def scp_8_classification(params: dict) -> dict:
    """Classification - Perform calculations between raster bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_classification.html">Tool description</a>

Classification (scp_8:classification)

Perform calculations between raster bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_classification.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

INPUT_FILE: Training input file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

ENUMERATOR: Input normalization

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: z-score
		- 1: linear scaling

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

BOOL: Use Macroclass value (if False is Class value)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ENUMERATOR_2: Algorithm

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: minimum distance
		- 1: maximum likelihood
		- 2: spectral angle mapping
		- 3: random forest
		- 4: support vector machine
		- 5: multi-layer perceptron
		- 6: pytorch multi-layer perceptron

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

VALUE: Use single threshold (Minimum Distance, Maximum Likelihood, Spectral Angle Mapping

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL_2: Signature threshold (Minimum Distance, Maximum Likelihood, Spectral Angle Mapping

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_3: Save signature raster (Minimum Distance, Maximum Likelihood, Spectral Angle Mapping

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_4: Calculate classification confidence raster

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

INPUT_LIST: Multi-Layer Perceptron: Hidden layer sizes (values separated by comma)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE_2: Multi-Layer Perceptron: max iter size

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

TEXT: Multi-Layer Perceptron: activation

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE_3: Multi-Layer Perceptron: alpha

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_4: Multi-Layer Perceptron: training portion

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

TEXT_2: Multi-Layer Perceptron: batch size

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE_5: Multi-Layer Perceptron: learning rate init

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL_5: Cross validation (Multi-Layer Perceptron, Random Forest, Support Vector Machine)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

VALUE_7: Random Forest: number of trees

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_8: Random Forest: minimum number to split

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

TEXT_3: Random Forest: max features

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL_6: Random Forest: One-Vs-Rest

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

VALUE_9: Support Vector Machine: regularization parameter C

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

TEXT_4: Support Vector Machine: kernel

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

TEXT_5: Support Vector Machine: gamma

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE_6: Find best estimator with steps (Multi-Layer Perceptron, Random Forest, Support Vector Machine)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL_7: Balanced class weight (Random Forest, Support Vector Machine)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

INPUT_FILE_2: Classifier file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFile>
	Calculation output"""
    return processing.run("scp_8:classification", params)

@mcp_server.tool()
def scp_8_cross_classification(params: dict) -> dict:
    """Cross classification - Perform the cross classification which is similar to band combination, but it is executed between two files only. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.cross_classification.html">Tool description</a>

Cross classification (scp_8:cross_classification)

Perform the cross classification which is similar to band combination, but it is executed between two files only. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.cross_classification.html">Tool description</a>


----------------
Input parameters
----------------

INPUT_RASTER: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_RASTER_2: Reference raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_VECTOR: Reference vector

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

TEXT: Vector field

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE: NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL: Error matrix

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_2: Cross matrix

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_3: Regression raster

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:cross_classification", params)

@mcp_server.tool()
def scp_8_image_conversion(params: dict) -> dict:
    """Image conversion - Perform the preprocessing of products. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.preprocess_products.html">Tool description</a>

Image conversion (scp_8:image_conversion)

Perform the preprocessing of products. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.preprocess_products.html">Tool description</a>


----------------
Input parameters
----------------

INPUT_DIRECTORY: Directory containing bands

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

INPUT_FILE: Metadata file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

VALUE: NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL: Apply DOS1 atmospheric correction

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:image_conversion", params)

@mcp_server.tool()
def scp_8_masking_bands(params: dict) -> dict:
    """Masking bands - Perform the masking of bands based on a raster mask. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_mask.html">Tool description</a>

Masking bands (scp_8:masking_bands)

Perform the masking of bands based on a raster mask. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_mask.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

INPUT_RASTER: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_LIST: Mask class values, separated by comma

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE: Size in pixels

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_2: Output NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

BOOL: Virtual output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

TEXT: Output name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:masking_bands", params)

@mcp_server.tool()
def scp_8_raster_reclassification(params: dict) -> dict:
    """Reclassification - Reclassification of a raster based on a reclassification table. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_reclassification.html">Tool description</a>

Reclassification (scp_8:raster_reclassification)

Reclassification of a raster based on a reclassification table. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_reclassification.html">Tool description</a>


----------------
Input parameters
----------------

INPUT_RASTER: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_FILE: Input reclassification table

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

TEXT: Separator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFile>
	Calculation output"""
    return processing.run("scp_8:raster_reclassification", params)

@mcp_server.tool()
def scp_8_raster_report(params: dict) -> dict:
    """Classification report - Calculate report of classes. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_report.html">Tool description</a>

Classification report (scp_8:raster_report)

Calculate report of classes. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_report.html">Tool description</a>


----------------
Input parameters
----------------

INPUT_RASTER: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

VALUE: NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Classification report

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFile>
	Classification report"""
    return processing.run("scp_8:raster_report", params)

@mcp_server.tool()
def scp_8_raster_to_vector(params: dict) -> dict:
    """Classification to vector - Conversion from raster to vector. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_to_vector.html">Tool description</a>

Classification to vector (scp_8:raster_to_vector)

Conversion from raster to vector. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_to_vector.html">Tool description</a>


----------------
Input parameters
----------------

INPUT_RASTER: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BOOL: Dissolve

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Output vector

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFile>
	Output vector"""
    return processing.run("scp_8:raster_to_vector", params)

@mcp_server.tool()
def scp_8_raster_zonal_stats(params: dict) -> dict:
    """Raster zonal stats - Calculation of statistics of a raster intersecting a vector. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_zonal_stats.html">Tool description</a>

Raster zonal stats (scp_8:raster_zonal_stats)

Calculation of statistics of a raster intersecting a vector. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_zonal_stats.html">Tool description</a>


----------------
Input parameters
----------------

INPUT_RASTER: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_VECTOR: Reference vector

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

TEXT: Vector field

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL: Count

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_2: Maximum

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_3: Minimum

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_4: Mean

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_5: Median

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_6: Percentile

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

TEXT_2: Percentile values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL_7: Standard deviation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

BOOL_8: Sum

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFile>
	Calculation output"""
    return processing.run("scp_8:raster_zonal_stats", params)

@mcp_server.tool()
def scp_8_reproject_raster_bands(params: dict) -> dict:
    """Reproject raster bands - Perform the resampling and reprojection of bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_resample.html">Tool description</a>

Reproject raster bands (scp_8:reproject_raster_bands)

Perform the resampling and reprojection of bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_resample.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

INPUT_RASTER: Align raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BOOL: Same extent as reference

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

TEXT: EPSG code

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VALUE: X resolution

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_2: Y resolution

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

VALUE_3: Resample pixel factor

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ENUMERATOR: Resampling method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: nearest_neighbour
		- 1: average
		- 2: sum
		- 3: maximum
		- 4: minimum
		- 5: mode
		- 6: median
		- 7: first_quartile
		- 8: third_quartile

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

ENUMERATOR_2: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Float32
		- 1: Int32
		- 2: UInt32
		- 3: Int16
		- 4: UInt16
		- 5: Byte

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

VALUE_4: Output NoData value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

TEXT_2: Output name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BOOL_2: Virtual output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

TEXT_3: Compression

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:reproject_raster_bands", params)

@mcp_server.tool()
def scp_8_split_bands(params: dict) -> dict:
    """Split raster bands - Perform the split of a raster to single bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_split.html">Tool description</a>

Split raster bands (scp_8:split_bands)

Perform the split of a raster to single bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.raster_split.html">Tool description</a>


----------------
Input parameters
----------------

INPUT_RASTER: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

TEXT: Output prefix

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Calculation output"""
    return processing.run("scp_8:split_bands", params)

@mcp_server.tool()
def scp_8_stack_bands(params: dict) -> dict:
    """Stack bands - Perform stack of raster bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_stack.html">Tool description</a>

Stack bands (scp_8:stack_bands)

Perform stack of raster bands. <a href="https://remotior-sensus.readthedocs.io/en/latest/remotior_sensus.tools.band_stack.html">Tool description</a>


----------------
Input parameters
----------------

MULTIPLE_LAYERS: Input raster list

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

OUTPUT: Calculation output

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFile>
	Calculation output"""
    return processing.run("scp_8:stack_bands", params)

@mcp_server.tool()
def qgis_advancedpythonfieldcalculator(params: dict) -> dict:
    """Advanced Python field calculator

Advanced Python field calculator (qgis:advancedpythonfieldcalculator)

This algorithm adds a new attribute to a vector layer, with values resulting from applying an expression to each feature. The expression is defined as a Python function.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD_NAME: Result field name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

FIELD_TYPE: Field type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Integer (32 bit)
		- 1: Decimal (double)
		- 2: Text (string)
		- 3: Boolean
		- 4: Date
		- 5: Time
		- 6: Date & Time
		- 7: Binary Object (BLOB)
		- 8: String List
		- 9: Integer List
		- 10: Decimal (double) List

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

FIELD_LENGTH: Field length

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

FIELD_PRECISION: Field precision

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GLOBAL: Global expression

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

FORMULA: Formula

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Calculated

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Calculated"""
    return processing.run("qgis:advancedpythonfieldcalculator", params)

@mcp_server.tool()
def qgis_barplot(params: dict) -> dict:
    """Bar plot

Bar plot (qgis:barplot)

This algorithm creates a bar plot from a category and a layer field.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

NAME_FIELD: Category name field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

VALUE_FIELD: Value field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Bar plot

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Bar plot"""
    return processing.run("qgis:barplot", params)

@mcp_server.tool()
def qgis_basicstatisticsforfields(params: dict) -> dict:
    """Basic statistics for fields

Basic statistics for fields (qgis:basicstatisticsforfields)

This algorithm generates basic statistics from the analysis of a values in a field in the attribute table of a vector layer. Numeric, date, time and string fields are supported.
The statistics returned will depend on the field type.
Statistics are generated as an HTML file.



----------------
Input parameters
----------------

INPUT_LAYER: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD_NAME: Field to calculate statistics on

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT_HTML_FILE: Statistics

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT_HTML_FILE:  <QgsProcessingOutputHtml>
	Statistics

COUNT:  <QgsProcessingOutputNumber>
	Count

UNIQUE:  <QgsProcessingOutputNumber>
	Number of unique values

EMPTY:  <QgsProcessingOutputNumber>
	Number of empty (null) values

FILLED:  <QgsProcessingOutputNumber>
	Number of non-empty values

MIN:  <QgsProcessingOutputNumber>
	Minimum value

MAX:  <QgsProcessingOutputNumber>
	Maximum value

MIN_LENGTH:  <QgsProcessingOutputNumber>
	Minimum length

MAX_LENGTH:  <QgsProcessingOutputNumber>
	Maximum length

MEAN_LENGTH:  <QgsProcessingOutputNumber>
	Mean length

CV:  <QgsProcessingOutputNumber>
	Coefficient of Variation

SUM:  <QgsProcessingOutputNumber>
	Sum

MEAN:  <QgsProcessingOutputNumber>
	Mean value

STD_DEV:  <QgsProcessingOutputNumber>
	Standard deviation

RANGE:  <QgsProcessingOutputNumber>
	Range

MEDIAN:  <QgsProcessingOutputNumber>
	Median

MINORITY:  <QgsProcessingOutputNumber>
	Minority (rarest occurring value)

MAJORITY:  <QgsProcessingOutputNumber>
	Majority (most frequently occurring value)

FIRSTQUARTILE:  <QgsProcessingOutputNumber>
	First quartile

THIRDQUARTILE:  <QgsProcessingOutputNumber>
	Third quartile

IQR:  <QgsProcessingOutputNumber>
	Interquartile Range (IQR)"""
    return processing.run("qgis:basicstatisticsforfields", params)

@mcp_server.tool()
def qgis_boxplot(params: dict) -> dict:
    """Box plot

Box plot (qgis:boxplot)

This algorithm creates a box plot from a category and a layer field.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

NAME_FIELD: Category name field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

VALUE_FIELD: Value field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

MSD: Additional Statistic Lines

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Show Mean
		- 1: Show Standard Deviation
		- 2: Don't show Mean and Standard Deviation

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Box plot

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Box plot"""
    return processing.run("qgis:boxplot", params)

@mcp_server.tool()
def qgis_checkvalidity(params: dict) -> dict:
    """Check validity

Check validity (qgis:checkvalidity)

This algorithm performs a validity check on the geometries of a vector layer.
The geometries are classified in three groups (valid, invalid and error), and a vector layer is generated with the features in each of these categories.
By default the algorithm uses the strict OGC definition of polygon validity, where a polygon is marked as invalid if a self-intersecting ring causes an interior hole. If the "Ignore ring self intersections" option is checked, then this rule will be ignored and a more lenient validity check will be performed.
The GEOS method is faster and performs better on larger geometries, but is limited to only returning the first error encountered in a geometry. The QGIS method will be slower but reports all errors encountered in the geometry, not just the first.



----------------
Input parameters
----------------

INPUT_LAYER: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

METHOD: Method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: The one selected in digitizing settings
		- 1: QGIS
		- 2: GEOS

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

IGNORE_RING_SELF_INTERSECTION: Ignore ring self intersections

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

VALID_OUTPUT: Valid output

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

INVALID_OUTPUT: Invalid output

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

ERROR_OUTPUT: Error output

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

VALID_OUTPUT:  <QgsProcessingOutputVectorLayer>
	Valid output

VALID_COUNT:  <QgsProcessingOutputNumber>
	Count of valid features

INVALID_OUTPUT:  <QgsProcessingOutputVectorLayer>
	Invalid output

INVALID_COUNT:  <QgsProcessingOutputNumber>
	Count of invalid features

ERROR_OUTPUT:  <QgsProcessingOutputVectorLayer>
	Error output

ERROR_COUNT:  <QgsProcessingOutputNumber>
	Count of errors"""
    return processing.run("qgis:checkvalidity", params)

@mcp_server.tool()
def qgis_climbalongline(params: dict) -> dict:
    """Climb along line

Climb along line (qgis:climbalongline)

This algorithm calculates the total climb and descent along line geometries.
Input layers must have Z values present. If Z values are not available, the "Drape" (set Z value from raster) algorithm may be used to add Z values from a DEM layer.
The output layer is a copy of the input layer with additional fields that contain the total climb, total descent, the minimum elevation and the maximum elevation for each line geometry. If the input layer contains fields with the same names as these added fields, they will be renamed (field names will be altered to "name_2", "name_3", etc, finding the first non-duplicate name).



----------------
Input parameters
----------------

INPUT: Line layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

OUTPUT: Climb layer

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Climb layer

TOTALCLIMB:  <QgsProcessingOutputNumber>
	Total climb

TOTALDESCENT:  <QgsProcessingOutputNumber>
	Total descent

MINELEVATION:  <QgsProcessingOutputNumber>
	Minimum elevation

MAXELEVATION:  <QgsProcessingOutputNumber>
	Maximum elevation"""
    return processing.run("qgis:climbalongline", params)

@mcp_server.tool()
def qgis_convertgeometrytype(params: dict) -> dict:
    """Convert geometry type

Convert geometry type (qgis:convertgeometrytype)

This algorithm generates a new layer based on an existing one, with a different type of geometry.
Not all conversions are possible. For instance, a line layer can be converted to a point layer, but a point layer cannot be converted to a line layer.
See the "Polygonize" or "Lines to polygons" algorithm for alternative options.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

TYPE: New geometry type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Centroids
		- 1: Nodes
		- 2: Linestrings
		- 3: Multilinestrings
		- 4: Polygons

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Converted

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Converted"""
    return processing.run("qgis:convertgeometrytype", params)

@mcp_server.tool()
def qgis_definecurrentprojection(params: dict) -> dict:
    """Define Shapefile projection - Changes a Shapefile's projection to a new CRS without reprojecting features

Define Shapefile projection (qgis:definecurrentprojection)

Changes a Shapefile's projection to a new CRS without reprojecting features

This algorithm sets an existing Shapefile's projection to the provided CRS. Contrary to the "Assign projection" algorithm, it will not output a new layer.
The .prj and .qpj files associated with the Shapefile will be overwritten - or created if missing - to match the provided CRS.



----------------
Input parameters
----------------

INPUT: Input Shapefile

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

CRS: CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

----------------
Outputs
----------------

INPUT:  <QgsProcessingOutputVectorLayer>
	Layer with projection"""
    return processing.run("qgis:definecurrentprojection", params)

@mcp_server.tool()
def qgis_distancematrix(params: dict) -> dict:
    """Distance matrix

Distance matrix (qgis:distancematrix)

This algorithm creates a table containing a distance matrix, with distances between all the points in a points layer.



----------------
Input parameters
----------------

INPUT: Input point layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

INPUT_FIELD: Input unique ID field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

TARGET: Target point layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

TARGET_FIELD: Target unique ID field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

MATRIX_TYPE: Output matrix type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Linear (N*k x 3) distance matrix
		- 1: Standard (N x T) distance matrix
		- 2: Summary distance matrix (mean, std. dev., min, max)

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

NEAREST_POINTS: Use only the nearest (k) target points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Distance matrix

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Distance matrix"""
    return processing.run("qgis:distancematrix", params)

@mcp_server.tool()
def qgis_distancetonearesthublinetohub(params: dict) -> dict:
    """Distance to nearest hub (line to hub)

Distance to nearest hub (line to hub) (qgis:distancetonearesthublinetohub)

Given an origin and a destination layers, this algorithm computes the distance between origin features and their closest destination one. Distance calculations are based on the features center.
The resulting layer contains lines linking each origin point with its nearest destination feature.



----------------
Input parameters
----------------

INPUT: Source points layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

HUBS: Destination hubs layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD: Hub layer name attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

UNIT: Measurement unit

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Meters
		- 1: Feet
		- 2: Miles
		- 3: Kilometers
		- 4: Layer units

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Hub distance

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Hub distance"""
    return processing.run("qgis:distancetonearesthublinetohub", params)

@mcp_server.tool()
def qgis_distancetonearesthubpoints(params: dict) -> dict:
    """Distance to nearest hub (points)

Distance to nearest hub (points) (qgis:distancetonearesthubpoints)

Given an origin and a destination layers, this algorithm computes the distance between origin features and their closest destination one. Distance calculations are based on the features center.
The resulting layer contains origin features center point with an additional field indicating the identifier of the nearest destination feature and the distance to it.



----------------
Input parameters
----------------

INPUT: Source points layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

HUBS: Destination hubs layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD: Hub layer name attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

UNIT: Measurement unit

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Meters
		- 1: Feet
		- 2: Miles
		- 3: Kilometers
		- 4: Layer units

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Hub distance

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Hub distance"""
    return processing.run("qgis:distancetonearesthubpoints", params)

@mcp_server.tool()
def qgis_eliminateselectedpolygons(params: dict) -> dict:
    """Eliminate selected polygons

Eliminate selected polygons (qgis:eliminateselectedpolygons)

This algorithm combines selected polygons of the input layer with certain adjacent polygons by erasing their common boundary. The adjacent polygon can be either the one with the largest or smallest area or the one sharing the largest common boundary with the polygon to be eliminated. Eliminate is normally used to get rid of sliver polygons, i.e. tiny polygons that are a result of polygon intersection processes where boundaries of the inputs are similar but not identical.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

MODE: Merge selection with the neighbouring polygon with the

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Largest Area
		- 1: Smallest Area
		- 2: Largest Common Boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Eliminated

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Eliminated"""
    return processing.run("qgis:eliminateselectedpolygons", params)

@mcp_server.tool()
def qgis_executesql(params: dict) -> dict:
    """Execute SQL

Execute SQL (qgis:executesql)

Runs a simple or complex query with SQL syntax.
Input data sources are identified with input1, input2, ..., inputN and a simple query will look like: SELECT * FROM input1
The result of the query will be added as a new layer.



----------------
Input parameters
----------------

INPUT_DATASOURCES: Input data sources (called input1, .., inputN in the query)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

INPUT_QUERY: SQL query

	Parameter type:	ParameterExecuteSql

INPUT_UID_FIELD: Unique identifier field

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

INPUT_GEOMETRY_FIELD: Geometry field

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

INPUT_GEOMETRY_TYPE: Geometry type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Autodetect
		- 1: No geometry
		- 2: Point
		- 3: LineString
		- 4: Polygon
		- 5: MultiPoint
		- 6: MultiLineString
		- 7: MultiPolygon

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

INPUT_GEOMETRY_CRS: CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

OUTPUT: SQL Output

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	SQL Output"""
    return processing.run("qgis:executesql", params)

@mcp_server.tool()
def qgis_exportaddgeometrycolumns(params: dict) -> dict:
    """Add geometry attributes

Add geometry attributes (qgis:exportaddgeometrycolumns)

This algorithm computes geometric properties of the features in a vector layer. It generates a new vector layer with the same content as the input one, but with additional attributes in its attributes table, containing geometric measurements.
Depending on the geometry type of the vector layer, the attributes added to the table will be different.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

CALC_METHOD: Calculate using

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Layer CRS
		- 1: Project CRS
		- 2: Ellipsoidal

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Added geom info

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Added geom info"""
    return processing.run("qgis:exportaddgeometrycolumns", params)

@mcp_server.tool()
def qgis_findprojection(params: dict) -> dict:
    """Find projection

Find projection (qgis:findprojection)

This algorithm allows creation of a shortlist of possible candidate coordinate reference systems for a layer with an unknown projection.
The expected area which the layer should reside in must be specified via the target area parameter.
The algorithm operates by testing the layer's extent in every known reference system and listing any in which the bounds would fall near the target area if the layer was in this projection.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

TARGET_AREA: Target area for layer

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

OUTPUT: CRS candidates

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	CRS candidates"""
    return processing.run("qgis:findprojection", params)

@mcp_server.tool()
def qgis_generatepointspixelcentroidsalongline(params: dict) -> dict:
    """Generate points (pixel centroids) along line

Generate points (pixel centroids) along line (qgis:generatepointspixelcentroidsalongline)

This algorithm generates a point vector layer from an input raster and line layer. The points correspond to the pixel centroids that intersect the line layer.



----------------
Input parameters
----------------

INPUT_RASTER: Raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

INPUT_VECTOR: Vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

OUTPUT: Points along lines

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Points along lines"""
    return processing.run("qgis:generatepointspixelcentroidsalongline", params)

@mcp_server.tool()
def qgis_heatmapkerneldensityestimation(params: dict) -> dict:
    """Heatmap (Kernel Density Estimation)

Heatmap (Kernel Density Estimation) (qgis:heatmapkerneldensityestimation)

Creates a density (heatmap) raster of an input point vector layer using kernel density estimation. Heatmaps allow easy identification of hotspots and clustering of points.
The density is calculated based on the number of points in a location, with larger numbers of clustered points resulting in larger values.



----------------
Input parameters
----------------

INPUT: Point layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

RADIUS: Radius

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

RADIUS_FIELD: Radius from field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

PIXEL_SIZE: Output raster size

	Parameter type:	ParameterHeatmapPixelSize

	Accepted data types:
		- int
		- float
		- QgsProperty

WEIGHT_FIELD: Weight from field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

KERNEL: Kernel shape

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Quartic
		- 1: Triangular
		- 2: Uniform
		- 3: Triweight
		- 4: Epanechnikov

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

DECAY: Decay ratio (Triangular kernels only)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT_VALUE: Output value scaling

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Raw
		- 1: Scaled

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Heatmap

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Heatmap"""
    return processing.run("qgis:heatmapkerneldensityestimation", params)

@mcp_server.tool()
def qgis_hypsometriccurves(params: dict) -> dict:
    """Hypsometric curves

Hypsometric curves (qgis:hypsometriccurves)

This algorithm computes hypsometric curves  for an input Digital Elevation Model. Curves are produced as table files in an output folder specified by the user.



----------------
Input parameters
----------------

INPUT_DEM: DEM to analyze

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BOUNDARY_LAYER: Boundary layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

STEP: Step

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

USE_PERCENTAGE: Use % of area instead of absolute value

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT_DIRECTORY: Hypsometric curves

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT_DIRECTORY:  <QgsProcessingOutputFolder>
	Hypsometric curves"""
    return processing.run("qgis:hypsometriccurves", params)

@mcp_server.tool()
def qgis_idwinterpolation(params: dict) -> dict:
    """IDW interpolation

IDW interpolation (qgis:idwinterpolation)

Generates an Inverse Distance Weighted (IDW) interpolation of a point vector layer.
Sample points are weighted during interpolation such that the influence of one point relative to another declines with distance from the unknown point you want to create.



----------------
Input parameters
----------------

INTERPOLATION_DATA: Input layer(s)

	Parameter type:	ParameterInterpolationData

DISTANCE_COEFFICIENT: Distance coefficient P

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

EXTENT: Extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

PIXEL_SIZE: Output raster size

	Parameter type:	ParameterPixelSize

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Interpolated

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Interpolated"""
    return processing.run("qgis:idwinterpolation", params)

@mcp_server.tool()
def qgis_importintospatialite(params: dict) -> dict:
    """Export to SpatiaLite - Exports a vector layer to a SpatiaLite database

Export to SpatiaLite (qgis:importintospatialite)

Exports a vector layer to a SpatiaLite database

This algorithm imports a vector layer into a SpatiaLite database, creating a new table.



----------------
Input parameters
----------------

INPUT: Layer to import

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

DATABASE: File database

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

TABLENAME: Table to import to (leave blank to use layer name)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

PRIMARY_KEY: Primary key field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

GEOMETRY_COLUMN: Geometry column

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

ENCODING: Encoding

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OVERWRITE: Overwrite

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

CREATEINDEX: Create spatial index

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

LOWERCASE_NAMES: Convert field names to lowercase

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

DROP_STRING_LENGTH: Drop length constraints on character fields

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

FORCE_SINGLEPART: Create single-part geometries instead of multi-part

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------"""
    return processing.run("qgis:importintospatialite", params)

@mcp_server.tool()
def qgis_knearestconcavehull(params: dict) -> dict:
    """Concave hull (k-nearest neighbor) - Creates a concave hull using the k-nearest neighbor algorithm.

Concave hull (k-nearest neighbor) (qgis:knearestconcavehull)

Creates a concave hull using the k-nearest neighbor algorithm.

This algorithm generates a concave hull polygon from a set of points. If the input layer is a line or polygon layer, it will use the nodes.
The number of neighbours to consider determines the concaveness of the output polygon. A lower number will result in a concave hull that follows the points very closely, while a higher number will have a smoother shape. The minimum number of neighbour points to consider is 3. A value equal to or greater than the number of points will result in a convex hull.
If a field is selected, the algorithm will group the features in the input layer using unique values in that field and generate individual polygons in the output layer for each group.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

KNEIGHBORS: Number of neighboring points to consider (a lower number is more concave, a higher number is smoother)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

FIELD: Field (set if creating concave hulls by class)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Concave hull

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Concave hull"""
    return processing.run("qgis:knearestconcavehull", params)

@mcp_server.tool()
def qgis_linestopolygons(params: dict) -> dict:
    """Lines to polygons

Lines to polygons (qgis:linestopolygons)

This algorithm generates a polygon layer using as polygon rings the lines from an input line layer.
The attribute table of the output layer is the same as the one from of the input line layer.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

OUTPUT: Polygons

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Polygons"""
    return processing.run("qgis:linestopolygons", params)

@mcp_server.tool()
def qgis_listuniquevalues(params: dict) -> dict:
    """List unique values

List unique values (qgis:listuniquevalues)

This algorithm generates a report with information about the unique values found in a given attribute (or attributes) of a vector layer.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELDS: Target field(s)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Unique values

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

OUTPUT_HTML_FILE: HTML report

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Unique values

OUTPUT_HTML_FILE:  <QgsProcessingOutputHtml>
	HTML report

TOTAL_VALUES:  <QgsProcessingOutputNumber>
	Total unique values

UNIQUE_VALUES:  <QgsProcessingOutputString>
	Unique values"""
    return processing.run("qgis:listuniquevalues", params)

@mcp_server.tool()
def qgis_meanandstandarddeviationplot(params: dict) -> dict:
    """Mean and standard deviation plot

Mean and standard deviation plot (qgis:meanandstandarddeviationplot)

This algorithm creates a box plot with mean and standard deviation values.



----------------
Input parameters
----------------

INPUT: Input table

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

NAME_FIELD: Category name field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

VALUE_FIELD: Value field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Plot

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Plot"""
    return processing.run("qgis:meanandstandarddeviationplot", params)

@mcp_server.tool()
def qgis_minimumboundinggeometry(params: dict) -> dict:
    """Minimum bounding geometry

Minimum bounding geometry (qgis:minimumboundinggeometry)

This algorithm creates geometries which enclose the features from an input layer.
Numerous enclosing geometry types are supported, including bounding boxes (envelopes), oriented rectangles, circles and convex hulls.
Optionally, the features can be grouped by a field. If set, this causes the output layer to contain one feature per grouped value with a minimal geometry covering just the features with matching values.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD: Field (optional, set if features should be grouped by class)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

TYPE: Geometry type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Envelope (Bounding Box)
		- 1: Minimum Oriented Rectangle
		- 2: Minimum Enclosing Circle
		- 3: Convex Hull

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Bounding geometry

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Bounding geometry"""
    return processing.run("qgis:minimumboundinggeometry", params)

@mcp_server.tool()
def qgis_pointsdisplacement(params: dict) -> dict:
    """Points displacement

Points displacement (qgis:pointsdisplacement)

Offsets nearby point features by moving nearby points by a preset amount to minimize overlapping features.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

PROXIMITY: Minimum distance to other points

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

DISTANCE: Displacement distance

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

HORIZONTAL: Horizontal distribution for two point case

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Displaced

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Displaced"""
    return processing.run("qgis:pointsdisplacement", params)

@mcp_server.tool()
def qgis_polarplot(params: dict) -> dict:
    """Polar plot

Polar plot (qgis:polarplot)

This algorithm generates a polar plot based on the value of an input vector layer.
Two fields must be entered as parameters: one that define the category (to group features) and another one with the variable to plot (this has to be a numeric one)



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

NAME_FIELD: Category name field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

VALUE_FIELD: Value field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Polar plot

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Polar plot"""
    return processing.run("qgis:polarplot", params)

@mcp_server.tool()
def qgis_postgisexecuteandloadsql(params: dict) -> dict:
    """PostgreSQL execute and load SQL - Executes a SQL command on a PostgreSQL database and loads the result as a table

PostgreSQL execute and load SQL (qgis:postgisexecuteandloadsql)

Executes a SQL command on a PostgreSQL database and loads the result as a table

This algorithm performs a SQL database query on a PostGIS database connected to QGIS and loads the query results as a new layer.



----------------
Input parameters
----------------

DATABASE: Database (connection name)

	Parameter type:	QgsProcessingParameterProviderConnection

	Accepted data types:
		- str
		- QgsProperty

SQL: SQL query

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

ID_FIELD: Unique ID field name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GEOMETRY_FIELD: Geometry field name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Output layer"""
    return processing.run("qgis:postgisexecuteandloadsql", params)

@mcp_server.tool()
def qgis_randomextractwithinsubsets(params: dict) -> dict:
    """Random extract within subsets

Random extract within subsets (qgis:randomextractwithinsubsets)

This algorithm takes a vector layer and generates a new one that contains only a subset of the features in the input layer.
The subset is defined randomly, using a percentage or count value to define the total number of features in the subset.
The percentage/count value is not applied to the whole layer, but instead to each category. Categories are defined according to a given attribute, which is also specified as an input parameter for the algorithm.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD: ID field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

METHOD: Method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Number of selected features
		- 1: Percentage of selected features

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

NUMBER: Number/percentage of selected features

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Extracted (random stratified)

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Extracted (random stratified)"""
    return processing.run("qgis:randomextractwithinsubsets", params)

@mcp_server.tool()
def qgis_randompointsalongline(params: dict) -> dict:
    """Random points along line

Random points along line (qgis:randompointsalongline)

This algorithm creates a point layer with a given "Number of points" placed on the lines of the "Input layer".
The location of each point is determined by randomly selecting a feature, then a segment of the line geometry of that feature, and finally a random position on that segment. A minimum distance between the points can be specified (Euclidean distance).



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

POINTS_NUMBER: Number of points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MIN_DISTANCE: Minimum distance between points

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Random points

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Random points"""
    return processing.run("qgis:randompointsalongline", params)

@mcp_server.tool()
def qgis_randompointsinlayerbounds(params: dict) -> dict:
    """Random points in layer bounds

Random points in layer bounds (qgis:randompointsinlayerbounds)

This algorithm creates a new point layer with a given number of random points, all of them within the extent of a given layer. A distance factor can be specified, to avoid points being too close to each other.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

POINTS_NUMBER: Number of points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MIN_DISTANCE: Minimum distance between points

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Random points

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Random points"""
    return processing.run("qgis:randompointsinlayerbounds", params)

@mcp_server.tool()
def qgis_randompointsinsidepolygons(params: dict) -> dict:
    """Random points inside polygons

Random points inside polygons (qgis:randompointsinsidepolygons)

This algorithm creates a new point layer with random points inside the polygons of a given layer.
The number of points in each polygon can be defined as a fixed count or as a density value. The count/density value could also be taken from an attribute or an expression specified using the "Data defined override" functionality, so it can be different for each polygon in the input layer.
A minimum distance can be specified, to avoid points being too close to each other.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

STRATEGY: Sampling strategy

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Points count
		- 1: Points density

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

VALUE: Point count or density

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MIN_DISTANCE: Minimum distance between points

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Random points

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Random points"""
    return processing.run("qgis:randompointsinsidepolygons", params)

@mcp_server.tool()
def qgis_randomselection(params: dict) -> dict:
    """Random selection

Random selection (qgis:randomselection)

This algorithm takes a vector layer and selects a subset of its features. No new layer is generated by this algorithm.
The subset is defined randomly, using a percentage or count value to define the total number of features in the subset.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

METHOD: Method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Number of selected features
		- 1: Percentage of selected features

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

NUMBER: Number/percentage of selected features

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Selected (random)"""
    return processing.run("qgis:randomselection", params)

@mcp_server.tool()
def qgis_randomselectionwithinsubsets(params: dict) -> dict:
    """Random selection within subsets

Random selection within subsets (qgis:randomselectionwithinsubsets)

This algorithm takes a vector layer and selects a subset of its features. No new layer is generated by this algorithm.
The subset is defined randomly, using a percentage or count value to define the total number of features in the subset.
The percentage/count value is not applied to the whole layer, but instead to each category. Categories are defined according to a given attribute, which is also specified as an input parameter for the algorithm.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

FIELD: ID field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

METHOD: Method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Number of selected features
		- 1: Percentage of selected features

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

NUMBER: Number/percentage of selected features

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Selected (stratified random)"""
    return processing.run("qgis:randomselectionwithinsubsets", params)

@mcp_server.tool()
def qgis_rastercalculator(params: dict) -> dict:
    """Raster calculator

Raster calculator (qgis:rastercalculator)

This algorithm allows performing algebraic operations using raster layers.
The resulting layer will have its values computed according to an expression. The expression can contain numerical values, operators and references to any of the layers in the current project. The following functions are also supported:
- sin(), cos(), tan(), atan2(), ln(), log10()
The extent, cell size, and output CRS can be defined by the user. If the extent is not specified, the minimum extent that covers selected reference layer(s) will be used. If the cell size is not specified, the minimum cell size of selected reference layer(s) will be used. If the output CRS is not specified, the CRS of the first reference layer will be used.
The cell size is assumed to be the same in both X and Y axes.
Layers are referred by their name as displayed in the layer list and the number of the band to use (based on 1), using the pattern 'layer_name@band number'. For instance, the first band from a layer named DEM will be referred as DEM@1.
When using the calculator in the batch interface or from the console, the files to use have to be specified. The corresponding layers are referred using the base name of the file (without the full path). For instance, if using a layer at path/to/my/rasterfile.tif, the first band of that layer will be referred as rasterfile.tif@1.



----------------
Input parameters
----------------

EXPRESSION: Expression

	Parameter type:	ParameterRasterCalculatorExpression

LAYERS: Reference layer(s) (used for automated extent, cellsize, and CRS)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

CELLSIZE: Cell size (use 0 or empty to set it automatically)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

EXTENT: Output extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

CRS: Output CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

OUTPUT: Output

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Output"""
    return processing.run("qgis:rastercalculator", params)

@mcp_server.tool()
def qgis_rasterlayerhistogram(params: dict) -> dict:
    """Raster layer histogram

Raster layer histogram (qgis:rasterlayerhistogram)

This algorithm generates a histogram with the values of a raster layer.
The raster layer must have a single band.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

BINS: number of bins

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Histogram

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Histogram"""
    return processing.run("qgis:rasterlayerhistogram", params)

@mcp_server.tool()
def qgis_rectanglesovalsdiamondsvariable(params: dict) -> dict:
    """Rectangles, ovals, diamonds (variable)

Rectangles, ovals, diamonds (variable) (qgis:rectanglesovalsdiamondsvariable)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

SHAPE: Buffer shape

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Rectangles
		- 1: Diamonds
		- 2: Ovals

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

WIDTH: Width field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

HEIGHT: Height field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

ROTATION: Rotation field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

SEGMENTS: Number of segments

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Output

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Output"""
    return processing.run("qgis:rectanglesovalsdiamondsvariable", params)

@mcp_server.tool()
def qgis_regularpoints(params: dict) -> dict:
    """Regular points

Regular points (qgis:regularpoints)

This algorithm creates a point layer with a given number of regular points, all of them within a given extent.



----------------
Input parameters
----------------

EXTENT: Input extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

SPACING: Point spacing/count

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

INSET: Initial inset from corner (LH side)

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

RANDOMIZE: Apply random offset to point spacing

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

IS_SPACING: Use point spacing

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

CRS: Output layer CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

OUTPUT: Regular points

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Regular points"""
    return processing.run("qgis:regularpoints", params)

@mcp_server.tool()
def qgis_relief(params: dict) -> dict:
    """Relief

Relief (qgis:relief)

This algorithm creates a shaded relief layer from digital elevation data.



----------------
Input parameters
----------------

INPUT: Elevation layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

Z_FACTOR: Z factor

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

AUTO_COLORS: Generate relief classes automatically

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

COLORS: Relief colors

	Parameter type:	ParameterReliefColors

OUTPUT: Relief

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

FREQUENCY_DISTRIBUTION: Frequency distribution

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Relief

FREQUENCY_DISTRIBUTION:  <QgsProcessingOutputFile>
	Frequency distribution"""
    return processing.run("qgis:relief", params)

@mcp_server.tool()
def qgis_scatter3dplot(params: dict) -> dict:
    """Vector layer scatterplot 3D

Vector layer scatterplot 3D (qgis:scatter3dplot)

This algorithm creates a 3D scatter plot for a vector layer.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

XFIELD: X attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

YFIELD: Y attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

ZFIELD: Z attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Histogram

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Histogram"""
    return processing.run("qgis:scatter3dplot", params)

@mcp_server.tool()
def qgis_selectbyattribute(params: dict) -> dict:
    """Select by attribute

Select by attribute (qgis:selectbyattribute)

This algorithm creates a selection in a vector layer. The criteria for selected features is defined based on the values of an attribute from the input layer.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

FIELD: Selection attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OPERATOR: Operator

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: =
		- 1: ≠
		- 2: >
		- 3: ≥
		- 4: <
		- 5: ≤
		- 6: begins with
		- 7: contains
		- 8: is null
		- 9: is not null
		- 10: does not contain

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

VALUE: Value

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

METHOD: Modify current selection by

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: creating new selection
		- 1: adding to current selection
		- 2: removing from current selection
		- 3: selecting within current selection

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Selected (attribute)"""
    return processing.run("qgis:selectbyattribute", params)

@mcp_server.tool()
def qgis_selectbyexpression(params: dict) -> dict:
    """Select by expression

Select by expression (qgis:selectbyexpression)

This algorithm creates a selection in a vector layer. The criteria for selecting features is based on a QGIS expression.
For help with QGIS expression functions, see the inbuilt help for specific functions which is available in the expression builder.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

EXPRESSION: Expression

	Parameter type:	QgsProcessingParameterExpression

	Accepted data types:
		- str
		- QgsProperty

METHOD: Modify current selection by

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: creating new selection
		- 1: adding to current selection
		- 2: removing from current selection
		- 3: selecting within current selection

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Selected (attribute)"""
    return processing.run("qgis:selectbyexpression", params)

@mcp_server.tool()
def qgis_setstyleforrasterlayer(params: dict) -> dict:
    """Set style for raster layer

Set style for raster layer (qgis:setstyleforrasterlayer)

This algorithm sets the style of a raster layer. The style must be defined in a QML file.



----------------
Input parameters
----------------

INPUT: Raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

STYLE: Style file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

INPUT:  <QgsProcessingOutputRasterLayer>
	Styled"""
    return processing.run("qgis:setstyleforrasterlayer", params)

@mcp_server.tool()
def qgis_setstyleforvectorlayer(params: dict) -> dict:
    """Set style for vector layer

Set style for vector layer (qgis:setstyleforvectorlayer)

This algorithm sets the style of a vector layer. The style must be defined in a QML file.



----------------
Input parameters
----------------

INPUT: Vector layer

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

STYLE: Style file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

INPUT:  <QgsProcessingOutputVectorLayer>
	Styled"""
    return processing.run("qgis:setstyleforvectorlayer", params)

@mcp_server.tool()
def qgis_statisticsbycategories(params: dict) -> dict:
    """Statistics by categories

Statistics by categories (qgis:statisticsbycategories)

This algorithm calculates statistics of fields depending on a parent class.



----------------
Input parameters
----------------

INPUT: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

VALUES_FIELD_NAME: Field to calculate statistics on (if empty, only count is calculated)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

CATEGORIES_FIELD_NAME: Field(s) with categories

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Statistics by category

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Statistics by category"""
    return processing.run("qgis:statisticsbycategories", params)

@mcp_server.tool()
def qgis_texttofloat(params: dict) -> dict:
    """Text to float

Text to float (qgis:texttofloat)

This algorithm modifies the type of a given attribute in a vector layer, converting a text attribute containing numeric strings into a numeric attribute.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD: Text attribute to convert to float

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Float from text

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Float from text"""
    return processing.run("qgis:texttofloat", params)

@mcp_server.tool()
def qgis_tininterpolation(params: dict) -> dict:
    """TIN interpolation

TIN interpolation (qgis:tininterpolation)

Generates a Triangulated Irregular Network (TIN) interpolation of a point vector layer.
With the TIN method you can create a surface formed by triangles of nearest neighbor points. To do this, circumcircles around selected sample points are created and their intersections are connected to a network of non overlapping and as compact as possible triangles. The resulting surfaces are not smooth.
The algorithm creates both the raster layer of the interpolated values and the vector line layer with the triangulation boundaries.



----------------
Input parameters
----------------

INTERPOLATION_DATA: Input layer(s)

	Parameter type:	ParameterInterpolationData

METHOD: Interpolation method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Linear
		- 1: Clough-Toucher (cubic)

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

EXTENT: Extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

PIXEL_SIZE: Output raster size

	Parameter type:	ParameterPixelSize

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Interpolated

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

TRIANGULATION: Triangulation

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Interpolated

TRIANGULATION:  <QgsProcessingOutputVectorLayer>
	Triangulation"""
    return processing.run("qgis:tininterpolation", params)

@mcp_server.tool()
def qgis_topologicalcoloring(params: dict) -> dict:
    """Topological coloring

Topological coloring (qgis:topologicalcoloring)

This algorithm assigns a color index to polygon features in such a way that no adjacent polygons share the same color index, whilst minimizing the number of colors required.
An optional minimum distance between features assigned the same color can be set to prevent nearby (but non-touching) features from being assigned equal colors.
The algorithm allows choice of method to use when assigning colors. The default method attempts to assign colors so that the count of features assigned to each individual color index is balanced.
The 'by assigned area' mode instead assigns colors so that the total area of features assigned to each color is balanced. This mode can be useful to help avoid large features resulting in one of the colors appearing more dominant on a colored map.
The 'by distance between colors' mode will assign colors in order to maximize the distance between features of the same color. This mode helps to create a more uniform distribution of colors across a map.
A minimum number of colors can be specified if desired. The color index is saved to a new attribute named color_id.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

MIN_COLORS: Minimum number of colors

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MIN_DISTANCE: Minimum distance between features

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

BALANCE: Balance color assignment

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: By feature count
		- 1: By assigned area
		- 2: By distance between colors

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Colored

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Colored"""
    return processing.run("qgis:topologicalcoloring", params)

@mcp_server.tool()
def qgis_variabledistancebuffer(params: dict) -> dict:
    """Variable distance buffer

Variable distance buffer (qgis:variabledistancebuffer)

This algorithm computes a buffer area for all the features in an input layer. The size of the buffer for a given feature is defined by an attribute, so it allows different features to have different buffer sizes.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD: Distance field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

SEGMENTS: Segments

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

DISSOLVE: Dissolve result

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

END_CAP_STYLE: End cap style

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Round
		- 1: Flat
		- 2: Square

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

JOIN_STYLE: Join style

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Round
		- 1: Miter
		- 2: Bevel

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

MITER_LIMIT: Miter limit

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Buffer

	Parameter type:	QgsProcessingParameterFeatureSink

	Accepted data types:
		- str: destination vector file, e.g. 'd:/test.shp'
		- str: 'memory:' to store result in temporary memory layer
		- str: using vector provider ID prefix and destination URI, e.g. 'postgres:…' to store result in PostGIS table
		- QgsProcessingOutputLayerDefinition
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Buffer"""
    return processing.run("qgis:variabledistancebuffer", params)

@mcp_server.tool()
def qgis_vectorlayerhistogram(params: dict) -> dict:
    """Vector layer histogram

Vector layer histogram (qgis:vectorlayerhistogram)

This algorithm generates a histogram with the values of the attribute of a vector layer.
The attribute to use for computing the histogram must be a numeric attribute.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD: Attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

BINS: number of bins

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: Histogram

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Histogram"""
    return processing.run("qgis:vectorlayerhistogram", params)

@mcp_server.tool()
def qgis_vectorlayerscatterplot(params: dict) -> dict:
    """Vector layer scatterplot

Vector layer scatterplot (qgis:vectorlayerscatterplot)

This algorithm creates a simple X - Y scatter plot for a vector layer.



----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

XFIELD: X attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

YFIELD: Y attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Scatterplot

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Scatterplot"""
    return processing.run("qgis:vectorlayerscatterplot", params)

@mcp_server.tool()
def gdal_aspect(params: dict) -> dict:
    """Aspect

Aspect (gdal:aspect)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

TRIG_ANGLE: Return trigonometric angle instead of azimuth

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ZERO_FLAT: Return 0 for flat instead of -9999

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

COMPUTE_EDGES: Compute edges

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ZEVENBERGEN: Use Zevenbergen&Thorne formula instead of the Horn's one

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Aspect

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Aspect"""
    return processing.run("gdal:aspect", params)

@mcp_server.tool()
def gdal_assignprojection(params: dict) -> dict:
    """Assign projection

Assign projection (gdal:assignprojection)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

CRS: Desired CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Layer with projection"""
    return processing.run("gdal:assignprojection", params)

@mcp_server.tool()
def gdal_buffervectors(params: dict) -> dict:
    """Buffer vectors

Buffer vectors (gdal:buffervectors)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

GEOMETRY: Geometry column name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DISTANCE: Buffer distance

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

FIELD: Dissolve by attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

DISSOLVE: Dissolve all results

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

EXPLODE_COLLECTIONS: Produce one feature for each geometry in any kind of geometry collection in the source file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Buffer

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Buffer"""
    return processing.run("gdal:buffervectors", params)

@mcp_server.tool()
def gdal_buildvirtualraster(params: dict) -> dict:
    """Build virtual raster

Build virtual raster (gdal:buildvirtualraster)


----------------
Input parameters
----------------

INPUT: Input layers

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

RESOLUTION: Resolution

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Average
		- 1: Highest
		- 2: Lowest

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

SEPARATE: Place each input file into a separate band

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

PROJ_DIFFERENCE: Allow projection difference

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ADD_ALPHA: Add alpha mask band to VRT when source raster has none

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ASSIGN_CRS: Override projection for the output file

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

RESAMPLING: Resampling algorithm

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Nearest Neighbour
		- 1: Bilinear (2x2 Kernel)
		- 2: Cubic (4x4 Kernel)
		- 3: Cubic B-Spline (4x4 Kernel)
		- 4: Lanczos (6x6 Kernel)
		- 5: Average
		- 6: Mode

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

SRC_NODATA: Nodata value(s) for input bands (space separated)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Virtual

	Parameter type:	ParameterVrtDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Virtual"""
    return processing.run("gdal:buildvirtualraster", params)

@mcp_server.tool()
def gdal_buildvirtualvector(params: dict) -> dict:
    """Build virtual vector

Build virtual vector (gdal:buildvirtualvector)

This algorithm creates a virtual layer that contains a set of vector layers.

The output virtual layer will not be opened in the current project.


----------------
Input parameters
----------------

INPUT: Input datasources

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

UNIONED: Create "unioned" VRT

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Virtual vector

	Parameter type:	ParameterVectorVrtDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Virtual vector

VRT_STRING:  <QgsProcessingOutputString>
	Virtual string"""
    return processing.run("gdal:buildvirtualvector", params)

@mcp_server.tool()
def gdal_cliprasterbyextent(params: dict) -> dict:
    """Clip raster by extent

Clip raster by extent (gdal:cliprasterbyextent)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

PROJWIN: Clipping extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

OVERCRS: Override the projection for the output file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

NODATA: Assign a specified nodata value to output bands

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Use Input Layer Data Type
		- 1: Byte
		- 2: Int16
		- 3: UInt16
		- 4: UInt32
		- 5: Int32
		- 6: Float32
		- 7: Float64
		- 8: CInt16
		- 9: CInt32
		- 10: CFloat32
		- 11: CFloat64
		- 12: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Clipped (extent)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Clipped (extent)"""
    return processing.run("gdal:cliprasterbyextent", params)

@mcp_server.tool()
def gdal_cliprasterbymasklayer(params: dict) -> dict:
    """Clip raster by mask layer

Clip raster by mask layer (gdal:cliprasterbymasklayer)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

MASK: Mask layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

SOURCE_CRS: Source CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

TARGET_CRS: Target CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

TARGET_EXTENT: Target extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

NODATA: Assign a specified nodata value to output bands

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ALPHA_BAND: Create an output alpha band

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

CROP_TO_CUTLINE: Match the extent of the clipped raster to the extent of the mask layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

KEEP_RESOLUTION: Keep resolution of input raster

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

SET_RESOLUTION: Set output file resolution

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

X_RESOLUTION: X Resolution to output bands

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

Y_RESOLUTION: Y Resolution to output bands

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MULTITHREADING: Use multithreaded warping implementation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Use Input Layer Data Type
		- 1: Byte
		- 2: Int16
		- 3: UInt16
		- 4: UInt32
		- 5: Int32
		- 6: Float32
		- 7: Float64
		- 8: CInt16
		- 9: CInt32
		- 10: CFloat32
		- 11: CFloat64
		- 12: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Clipped (mask)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Clipped (mask)"""
    return processing.run("gdal:cliprasterbymasklayer", params)

@mcp_server.tool()
def gdal_clipvectorbyextent(params: dict) -> dict:
    """Clip vector by extent

Clip vector by extent (gdal:clipvectorbyextent)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

EXTENT: Clipping extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Clipped (extent)

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Clipped (extent)"""
    return processing.run("gdal:clipvectorbyextent", params)

@mcp_server.tool()
def gdal_clipvectorbypolygon(params: dict) -> dict:
    """Clip vector by mask layer

Clip vector by mask layer (gdal:clipvectorbypolygon)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

MASK: Mask layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Clipped (mask)

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Clipped (mask)"""
    return processing.run("gdal:clipvectorbypolygon", params)

@mcp_server.tool()
def gdal_colorrelief(params: dict) -> dict:
    """Color relief

Color relief (gdal:colorrelief)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

COMPUTE_EDGES: Compute edges

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

COLOR_TABLE: Color configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

MATCH_MODE: Matching mode

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Use strict color matching
		- 1: Use closest RGBA quadruplet
		- 2: Use smoothly blended colors

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Color relief

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Color relief"""
    return processing.run("gdal:colorrelief", params)

@mcp_server.tool()
def gdal_contour(params: dict) -> dict:
    """Contour

Contour (gdal:contour)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

INTERVAL: Interval between contour lines

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

FIELD_NAME: Attribute name (if not set, no elevation attribute is attached)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

CREATE_3D: Produce 3D vector

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

IGNORE_NODATA: Treat all raster values as valid

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

NODATA: Input pixel value to treat as "nodata"

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OFFSET: Offset from zero relative to which to interpret intervals

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Contours

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Contours"""
    return processing.run("gdal:contour", params)

@mcp_server.tool()
def gdal_contour_polygon(params: dict) -> dict:
    """Contour Polygons

Contour Polygons (gdal:contour_polygon)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

INTERVAL: Interval between contour lines

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

CREATE_3D: Produce 3D vector

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

IGNORE_NODATA: Treat all raster values as valid

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

NODATA: Input pixel value to treat as "nodata"

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OFFSET: Offset from zero relative to which to interpret intervals

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

FIELD_NAME_MIN: Attribute name for minimum elevation of contour polygon

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

FIELD_NAME_MAX: Attribute name for maximum elevation of contour polygon

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Contours

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Contours"""
    return processing.run("gdal:contour_polygon", params)

@mcp_server.tool()
def gdal_convertformat(params: dict) -> dict:
    """Convert format

Convert format (gdal:convertformat)

The algorithm converts simple features data between file formats.

Use convert all layers to convert a whole dataset.
Supported output formats for this option are:
- GPKG
- GML


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

CONVERT_ALL_LAYERS: Convert all layers from dataset

	Use convert all layers to convert a whole dataset. Supported output formats for this option are GPKG and GML.

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Converted

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Converted"""
    return processing.run("gdal:convertformat", params)

@mcp_server.tool()
def gdal_dissolve(params: dict) -> dict:
    """Dissolve

Dissolve (gdal:dissolve)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD: Dissolve field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

GEOMETRY: Geometry column name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXPLODE_COLLECTIONS: Produce one feature for each geometry in any kind of geometry collection in the source file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

KEEP_ATTRIBUTES: Keep input attributes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

COUNT_FEATURES: Count dissolved features

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

COMPUTE_AREA: Compute area and perimeter of dissolved features

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

COMPUTE_STATISTICS: Compute min/max/sum/mean for attribute

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

STATISTICS_ATTRIBUTE: Numeric attribute to calculate statistics on

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Dissolved

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Dissolved"""
    return processing.run("gdal:dissolve", params)

@mcp_server.tool()
def gdal_executesql(params: dict) -> dict:
    """Execute SQL

Execute SQL (gdal:executesql)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

SQL: SQL expression

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DIALECT: SQL dialect

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: None
		- 1: OGR SQL
		- 2: SQLite

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: SQL result

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	SQL result"""
    return processing.run("gdal:executesql", params)

@mcp_server.tool()
def gdal_extractprojection(params: dict) -> dict:
    """Extract projection

Extract projection (gdal:extractprojection)


----------------
Input parameters
----------------

INPUT: Input file

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

PRJ_FILE_CREATE: Create also .prj file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

WORLD_FILE:  <QgsProcessingOutputFile>
	World file

PRJ_FILE:  <QgsProcessingOutputFile>
	ESRI Shapefile prj file"""
    return processing.run("gdal:extractprojection", params)

@mcp_server.tool()
def gdal_fillnodata(params: dict) -> dict:
    """Fill nodata

Fill nodata (gdal:fillnodata)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

DISTANCE: Maximum distance (in pixels) to search out for values to interpolate

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ITERATIONS: Number of smoothing iterations to run after the interpolation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MASK_LAYER: Validity mask

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Filled

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Filled"""
    return processing.run("gdal:fillnodata", params)

@mcp_server.tool()
def gdal_gdal2tiles(params: dict) -> dict:
    """gdal2tiles

gdal2tiles (gdal:gdal2tiles)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

PROFILE: Tile cutting profile

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Mercator
		- 1: Geodetic
		- 2: Raster

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

ZOOM: Zoom levels to render

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

VIEWER: Web viewer to generate

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: All
		- 1: GoogleMaps
		- 2: OpenLayers
		- 3: Leaflet
		- 4: None

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

TITLE: Title of the map

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

COPYRIGHT: Copyright of the map

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

RESAMPLING: Resampling method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Average
		- 1: Nearest Neighbour
		- 2: Bilinear (2x2 Kernel)
		- 3: Cubic (4x4 Kernel)
		- 4: Cubic B-Spline (4x4 Kernel)
		- 5: Lanczos (6x6 Kernel)
		- 6: Antialias

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

SOURCE_CRS: The spatial reference system used for the source input data

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

NODATA: Transparency value to assign to the input data

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

URL: URL address where the generated tiles are going to be published

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GOOGLE_KEY: Google Maps API key (http://code.google.com/apis/maps/signup.html)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

BING_KEY: Bing Maps API key (https://www.bingmapsportal.com/)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

RESUME: Generate only missing files

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

KML: Generate KML for Google Earth

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

NO_KML: Avoid automatic generation of KML files for EPSG:4326

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Output directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Output directory"""
    return processing.run("gdal:gdal2tiles", params)

@mcp_server.tool()
def gdal_gdal2xyz(params: dict) -> dict:
    """gdal2xyz

gdal2xyz (gdal:gdal2xyz)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

NODATA_INPUT: Input pixel value to treat as "nodata"

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

NODATA_OUTPUT: Assign specified "nodata" value to output

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

SKIP_NODATA: Do not output nodata values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

CSV: Output comma-separated values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: XYZ ASCII file

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFile>
	XYZ ASCII file"""
    return processing.run("gdal:gdal2xyz", params)

@mcp_server.tool()
def gdal_gdalinfo(params: dict) -> dict:
    """Raster information

Raster information (gdal:gdalinfo)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

MIN_MAX: Force computation of the actual min/max values for each band

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

STATS: Read and display image statistics (force computation if necessary)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

NOGCP: Suppress GCP info

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

NO_METADATA: Suppress metadata info

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Layer information

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Layer information"""
    return processing.run("gdal:gdalinfo", params)

@mcp_server.tool()
def gdal_gridaverage(params: dict) -> dict:
    """Grid (Moving average)

Grid (Moving average) (gdal:gridaverage)


----------------
Input parameters
----------------

INPUT: Point layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

Z_FIELD: Z value from field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

RADIUS_1: The first radius of search ellipse

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

RADIUS_2: The second radius of search ellipse

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ANGLE: Angle of search ellipse rotation in degrees (counter clockwise)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MIN_POINTS: Minimum number of data points to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

NODATA: NODATA marker to fill empty points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Interpolated (moving average)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Interpolated (moving average)"""
    return processing.run("gdal:gridaverage", params)

@mcp_server.tool()
def gdal_griddatametrics(params: dict) -> dict:
    """Grid (Data metrics)

Grid (Data metrics) (gdal:griddatametrics)


----------------
Input parameters
----------------

INPUT: Point layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

Z_FIELD: Z value from field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

METRIC: Data metric to use

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Minimum
		- 1: Maximum
		- 2: Range
		- 3: Count
		- 4: Average distance
		- 5: Average distance between points

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

RADIUS_1: The first radius of search ellipse

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

RADIUS_2: The second radius of search ellipse

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ANGLE: Angle of search ellipse rotation in degrees (counter clockwise)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MIN_POINTS: Minimum number of data points to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

NODATA: NODATA marker to fill empty points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Interpolated (data metrics)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Interpolated (data metrics)"""
    return processing.run("gdal:griddatametrics", params)

@mcp_server.tool()
def gdal_gridinversedistance(params: dict) -> dict:
    """Grid (Inverse distance to a power)

Grid (Inverse distance to a power) (gdal:gridinversedistance)


----------------
Input parameters
----------------

INPUT: Point layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

Z_FIELD: Z value from field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

POWER: Weighting power

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

SMOOTHING: Smoothing

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

RADIUS_1: The first radius of search ellipse

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

RADIUS_2: The second radius of search ellipse

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ANGLE: Angle of search ellipse rotation in degrees (counter clockwise)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MAX_POINTS: Maximum number of data points to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MIN_POINTS: Minimum number of data points to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

NODATA: NODATA marker to fill empty points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Interpolated (IDW)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Interpolated (IDW)"""
    return processing.run("gdal:gridinversedistance", params)

@mcp_server.tool()
def gdal_gridinversedistancenearestneighbor(params: dict) -> dict:
    """Grid (IDW with nearest neighbor searching)

Grid (IDW with nearest neighbor searching) (gdal:gridinversedistancenearestneighbor)


----------------
Input parameters
----------------

INPUT: Point layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

Z_FIELD: Z value from field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

POWER: Weighting power

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

SMOOTHING: Smoothing

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

RADIUS: The radius of the search circle

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MAX_POINTS: Maximum number of data points to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MIN_POINTS: Minimum number of data points to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

NODATA: NODATA marker to fill empty points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Interpolated (IDW with NN search)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Interpolated (IDW with NN search)"""
    return processing.run("gdal:gridinversedistancenearestneighbor", params)

@mcp_server.tool()
def gdal_gridlinear(params: dict) -> dict:
    """Grid (Linear)

Grid (Linear) (gdal:gridlinear)


----------------
Input parameters
----------------

INPUT: Point layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

Z_FIELD: Z value from field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

RADIUS: Search distance 

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

NODATA: NODATA marker to fill empty points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Interpolated (Linear)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Interpolated (Linear)"""
    return processing.run("gdal:gridlinear", params)

@mcp_server.tool()
def gdal_gridnearestneighbor(params: dict) -> dict:
    """Grid (Nearest neighbor)

Grid (Nearest neighbor) (gdal:gridnearestneighbor)


----------------
Input parameters
----------------

INPUT: Point layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

Z_FIELD: Z value from field

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

RADIUS_1: The first radius of search ellipse

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

RADIUS_2: The second radius of search ellipse

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ANGLE: Angle of search ellipse rotation in degrees (counter clockwise)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

NODATA: NODATA marker to fill empty points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Interpolated (Nearest neighbor)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Interpolated (Nearest neighbor)"""
    return processing.run("gdal:gridnearestneighbor", params)

@mcp_server.tool()
def gdal_hillshade(params: dict) -> dict:
    """Hillshade

Hillshade (gdal:hillshade)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

Z_FACTOR: Z factor (vertical exaggeration)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

SCALE: Scale (ratio of vertical units to horizontal)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

AZIMUTH: Azimuth of the light

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ALTITUDE: Altitude of the light

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

COMPUTE_EDGES: Compute edges

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ZEVENBERGEN: Use Zevenbergen&Thorne formula instead of the Horn's one

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

COMBINED: Combined shading

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

MULTIDIRECTIONAL: Multidirectional shading

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Hillshade

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Hillshade"""
    return processing.run("gdal:hillshade", params)

@mcp_server.tool()
def gdal_importvectorintopostgisdatabaseavailableconnections(params: dict) -> dict:
    """Export to PostgreSQL (available connections) - Exports a vector layer to an existing PostgreSQL database connection

Export to PostgreSQL (available connections) (gdal:importvectorintopostgisdatabaseavailableconnections)

Exports a vector layer to an existing PostgreSQL database connection


----------------
Input parameters
----------------

DATABASE: Database (connection name)

	Parameter type:	QgsProcessingParameterProviderConnection

	Accepted data types:
		- str
		- QgsProperty

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

SHAPE_ENCODING: Shape encoding

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GTYPE: Output geometry type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: 
		- 1: NONE
		- 2: GEOMETRY
		- 3: POINT
		- 4: LINESTRING
		- 5: POLYGON
		- 6: GEOMETRYCOLLECTION
		- 7: MULTIPOINT
		- 8: MULTIPOLYGON
		- 9: MULTILINESTRING
		- 10: CIRCULARSTRING
		- 11: COMPOUNDCURVE
		- 12: CURVEPOLYGON
		- 13: MULTICURVE
		- 14: MULTISURFACE

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

A_SRS: Assign an output CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

T_SRS: Reproject to this CRS on output 

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

S_SRS: Override source CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

SCHEMA: Schema (schema name)

	Parameter type:	QgsProcessingParameterDatabaseSchema

	Accepted data types:
		- str
		- QgsProperty

TABLE: Table to import to (leave blank to use layer name)

	Parameter type:	QgsProcessingParameterDatabaseTable

	Accepted data types:
		- str
		- QgsProperty

PK: Primary key (new field)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

PRIMARY_KEY: Primary key (existing field, used if the above option is left empty)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

GEOCOLUMN: Geometry column name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DIM: Vector dimensions

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: 2
		- 1: 3
		- 2: 4

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

SIMPLIFY: Distance tolerance for simplification

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

SEGMENTIZE: Maximum distance between 2 nodes (densification)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

SPAT: Select features by extent (defined in input layer CRS)

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

CLIP: Clip the input layer using the above (rectangle) extent

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

WHERE: Select features using a SQL "WHERE" statement (Ex: column='value')

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GT: Group N features per transaction (Default: 20000)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OVERWRITE: Overwrite existing table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

APPEND: Append to existing table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ADDFIELDS: Append and add new fields to existing table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

LAUNDER: Do not launder columns/table names

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

INDEX: Do not create spatial index

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

SKIPFAILURES: Continue after a failure, skipping the failed feature

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

PROMOTETOMULTI: Promote to Multipart

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

PRECISION: Keep width and precision of input attributes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------"""
    return processing.run("gdal:importvectorintopostgisdatabaseavailableconnections", params)

@mcp_server.tool()
def gdal_importvectorintopostgisdatabasenewconnection(params: dict) -> dict:
    """Export to PostgreSQL (new connection) - Exports a vector layer to a new PostgreSQL database connection

Export to PostgreSQL (new connection) (gdal:importvectorintopostgisdatabasenewconnection)

Exports a vector layer to a new PostgreSQL database connection


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

SHAPE_ENCODING: Shape encoding

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GTYPE: Output geometry type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: 
		- 1: NONE
		- 2: GEOMETRY
		- 3: POINT
		- 4: LINESTRING
		- 5: POLYGON
		- 6: GEOMETRYCOLLECTION
		- 7: MULTIPOINT
		- 8: MULTIPOLYGON
		- 9: MULTILINESTRING
		- 10: CIRCULARSTRING
		- 11: COMPOUNDCURVE
		- 12: CURVEPOLYGON
		- 13: MULTICURVE
		- 14: MULTISURFACE

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

A_SRS: Assign an output CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

T_SRS: Reproject to this CRS on output 

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

S_SRS: Override source CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

HOST: Host

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

PORT: Port

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

USER: Username

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DBNAME: Database name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

PASSWORD: Password

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

SCHEMA: Schema name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

TABLE: Table name, leave blank to use input name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

PK: Primary key (new field)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

PRIMARY_KEY: Primary key (existing field, used if the above option is left empty)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

GEOCOLUMN: Geometry column name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DIM: Vector dimensions

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: 2
		- 1: 3
		- 2: 4

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

SIMPLIFY: Distance tolerance for simplification

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

SEGMENTIZE: Maximum distance between 2 nodes (densification)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

SPAT: Select features by extent (defined in input layer CRS)

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

CLIP: Clip the input layer using the above (rectangle) extent

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

FIELDS: Fields to include (leave empty to use all fields)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

WHERE: Select features using a SQL "WHERE" statement (Ex: column='value')

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GT: Group N features per transaction (Default: 20000)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OVERWRITE: Overwrite existing table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

APPEND: Append to existing table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ADDFIELDS: Append and add new fields to existing table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

LAUNDER: Do not launder columns/table names

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

INDEX: Do not create spatial index

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

SKIPFAILURES: Continue after a failure, skipping the failed feature

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

PROMOTETOMULTI: Promote to Multipart

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

PRECISION: Keep width and precision of input attributes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------"""
    return processing.run("gdal:importvectorintopostgisdatabasenewconnection", params)

@mcp_server.tool()
def gdal_merge(params: dict) -> dict:
    """Merge

Merge (gdal:merge)


----------------
Input parameters
----------------

INPUT: Input layers

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

PCT: Grab pseudocolor table from first layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

SEPARATE: Place each input file into a separate band

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

NODATA_INPUT: Input pixel value to treat as "nodata"

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

NODATA_OUTPUT: Assign specified "nodata" value to output

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Merged

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Merged"""
    return processing.run("gdal:merge", params)

@mcp_server.tool()
def gdal_nearblack(params: dict) -> dict:
    """Near black

Near black (gdal:nearblack)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

NEAR: How far from black (white)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

WHITE: Search for nearly white pixels instead of nearly black

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Nearblack

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Nearblack"""
    return processing.run("gdal:nearblack", params)

@mcp_server.tool()
def gdal_offsetcurve(params: dict) -> dict:
    """Offset curve

Offset curve (gdal:offsetcurve)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

GEOMETRY: Geometry column name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DISTANCE: Offset distance (left-sided: positive, right-sided: negative)

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Offset curve

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Offset curve"""
    return processing.run("gdal:offsetcurve", params)

@mcp_server.tool()
def gdal_ogrinfo(params: dict) -> dict:
    """Vector information

Vector information (gdal:ogrinfo)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterVectorLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsVectorLayer

SUMMARY_ONLY: Summary output only

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

NO_METADATA: Suppress metadata info

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Layer information

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputHtml>
	Layer information"""
    return processing.run("gdal:ogrinfo", params)

@mcp_server.tool()
def gdal_onesidebuffer(params: dict) -> dict:
    """One side buffer

One side buffer (gdal:onesidebuffer)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

GEOMETRY: Geometry column name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DISTANCE: Buffer distance

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

BUFFER_SIDE: Buffer side

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Right
		- 1: Left

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

FIELD: Dissolve by attribute

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

DISSOLVE: Dissolve all results

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

EXPLODE_COLLECTIONS: Produce one feature for each geometry in any kind of geometry collection in the source file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: One-sided buffer

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	One-sided buffer"""
    return processing.run("gdal:onesidebuffer", params)

@mcp_server.tool()
def gdal_overviews(params: dict) -> dict:
    """Build overviews (pyramids)

Build overviews (pyramids) (gdal:overviews)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

CLEAN: Remove all existing overviews

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

LEVELS: Overview levels (e.g. 2 4 8 16)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

RESAMPLING: Resampling method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Nearest Neighbour (default)
		- 1: Average
		- 2: Gaussian
		- 3: Cubic (4x4 Kernel)
		- 4: Cubic B-Spline (4x4 Kernel)
		- 5: Lanczos (6x6 Kernel)
		- 6: Average MP
		- 7: Average in Mag/Phase Space
		- 8: Mode

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

FORMAT: Overviews format

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Internal (if possible)
		- 1: External (GTiff .ovr)
		- 2: External (ERDAS Imagine .aux)

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Pyramidized"""
    return processing.run("gdal:overviews", params)

@mcp_server.tool()
def gdal_pansharp(params: dict) -> dict:
    """Pansharpening

Pansharpening (gdal:pansharp)


----------------
Input parameters
----------------

SPECTRAL: Spectral dataset

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

PANCHROMATIC: Panchromatic dataset

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

RESAMPLING: Resampling algorithm

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Nearest Neighbour
		- 1: Bilinear (2x2 Kernel)
		- 2: Cubic (4x4 Kernel)
		- 3: Cubic B-Spline (4x4 Kernel)
		- 4: Lanczos (6x6 Kernel)
		- 5: Average

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Output

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Output"""
    return processing.run("gdal:pansharp", params)

@mcp_server.tool()
def gdal_pcttorgb(params: dict) -> dict:
    """PCT to RGB

PCT to RGB (gdal:pcttorgb)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

RGBA: Generate a RGBA file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: PCT to RGB

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	PCT to RGB"""
    return processing.run("gdal:pcttorgb", params)

@mcp_server.tool()
def gdal_pointsalonglines(params: dict) -> dict:
    """Points along lines

Points along lines (gdal:pointsalonglines)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

GEOMETRY: Geometry column name

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DISTANCE: Distance from line start represented as fraction of line length

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Points along lines

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Points along lines"""
    return processing.run("gdal:pointsalonglines", params)

@mcp_server.tool()
def gdal_polygonize(params: dict) -> dict:
    """Polygonize (raster to vector)

Polygonize (raster to vector) (gdal:polygonize)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

FIELD: Name of the field to create

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EIGHT_CONNECTEDNESS: Use 8-connectedness

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Vectorized

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Vectorized"""
    return processing.run("gdal:polygonize", params)

@mcp_server.tool()
def gdal_proximity(params: dict) -> dict:
    """Proximity (raster distance)

Proximity (raster distance) (gdal:proximity)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

VALUES: A list of pixel values in the source image to be considered target pixels

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

UNITS: Distance units

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Georeferenced coordinates
		- 1: Pixel coordinates

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

MAX_DISTANCE: The maximum distance to be generated

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

REPLACE: Value to be applied to all pixels that are within the -maxdist of target pixels

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

NODATA: Nodata value to use for the destination proximity raster

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Proximity map

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Proximity map"""
    return processing.run("gdal:proximity", params)

@mcp_server.tool()
def gdal_rastercalculator(params: dict) -> dict:
    """Raster calculator

Raster calculator (gdal:rastercalculator)


----------------
Input parameters
----------------

INPUT_A: Input layer A

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND_A: Number of raster band for A

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

INPUT_B: Input layer B

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND_B: Number of raster band for B

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

INPUT_C: Input layer C

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND_C: Number of raster band for C

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

INPUT_D: Input layer D

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND_D: Number of raster band for D

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

INPUT_E: Input layer E

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND_E: Number of raster band for E

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

INPUT_F: Input layer F

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND_F: Number of raster band for F

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

FORMULA: Calculation in gdalnumeric syntax using +-/* or any numpy array functions (i.e. logical_and())

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

NO_DATA: Set output nodata value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

EXTENT_OPT: Handling of extent differences

	This option determines how to handle rasters with different extents

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Ignore
		- 1: Fail
		- 2: Union
		- 3: Intersect

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

PROJWIN: Output extent

	Custom extent of the output raster

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

RTYPE: Output raster type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Calculated

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Calculated"""
    return processing.run("gdal:rastercalculator", params)

@mcp_server.tool()
def gdal_rasterize(params: dict) -> dict:
    """Rasterize (vector to raster)

Rasterize (vector to raster) (gdal:rasterize)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

FIELD: Field to use for a burn-in value

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

BURN: A fixed value to burn

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

USE_Z: Burn value extracted from the "Z" values of the feature

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

UNITS: Output raster size units

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Pixels
		- 1: Georeferenced units

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

WIDTH: Width/Horizontal resolution

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

HEIGHT: Height/Vertical resolution

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

EXTENT: Output extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

NODATA: Assign a specified nodata value to output bands

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

INIT: Pre-initialize the output image with value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

INVERT: Invert rasterization

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Rasterized

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Rasterized"""
    return processing.run("gdal:rasterize", params)

@mcp_server.tool()
def gdal_rasterize_over(params: dict) -> dict:
    """Rasterize (overwrite with attribute)

Rasterize (overwrite with attribute) (gdal:rasterize_over)


----------------
Input parameters
----------------

INPUT: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

INPUT_RASTER: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

FIELD: Field to use for burn in value

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

ADD: Add burn in values to existing raster values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Rasterized"""
    return processing.run("gdal:rasterize_over", params)

@mcp_server.tool()
def gdal_rasterize_over_fixed_value(params: dict) -> dict:
    """Rasterize (overwrite with fixed value)

Rasterize (overwrite with fixed value) (gdal:rasterize_over_fixed_value)


----------------
Input parameters
----------------

INPUT: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

INPUT_RASTER: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BURN: A fixed value to burn

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ADD: Add burn in values to existing raster values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Rasterized"""
    return processing.run("gdal:rasterize_over_fixed_value", params)

@mcp_server.tool()
def gdal_rearrange_bands(params: dict) -> dict:
    """Rearrange bands

Rearrange bands (gdal:rearrange_bands)

This algorithm creates a new raster using selected band(s) from a given raster layer.

The algorithm also makes it possible to reorder the bands for the newly-created raster.


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BANDS: Selected band(s)

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Use Input Layer Data Type
		- 1: Byte
		- 2: Int16
		- 3: UInt16
		- 4: UInt32
		- 5: Int32
		- 6: Float32
		- 7: Float64
		- 8: CInt16
		- 9: CInt32
		- 10: CFloat32
		- 11: CFloat64
		- 12: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Converted

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Converted"""
    return processing.run("gdal:rearrange_bands", params)

@mcp_server.tool()
def gdal_retile(params: dict) -> dict:
    """Retile

Retile (gdal:retile)


----------------
Input parameters
----------------

INPUT: Input files

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

TILE_SIZE_X: Tile width

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

TILE_SIZE_Y: Tile height

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OVERLAP: Overlap in pixels between consecutive tiles

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

LEVELS: Number of pyramids levels to build

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

SOURCE_CRS: Source coordinate reference system

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

RESAMPLING: Resampling method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Nearest Neighbour
		- 1: Bilinear (2x2 Kernel)
		- 2: Cubic (4x4 Kernel)
		- 3: Cubic B-Spline (4x4 Kernel)
		- 4: Lanczos (6x6 Kernel)

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

DELIMITER: Column delimiter used in the CSV file

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Byte
		- 1: Int16
		- 2: UInt16
		- 3: UInt32
		- 4: Int32
		- 5: Float32
		- 6: Float64
		- 7: CInt16
		- 8: CInt32
		- 9: CFloat32
		- 10: CFloat64
		- 11: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

ONLY_PYRAMIDS: Build only the pyramids

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

DIR_FOR_ROW: Use separate directory for each tiles row

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OUTPUT: Output directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

OUTPUT_CSV: CSV file containing the tile(s) georeferencing information

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputFolder>
	Output directory

OUTPUT_CSV:  <QgsProcessingOutputFile>
	CSV file containing the tile(s) georeferencing information"""
    return processing.run("gdal:retile", params)

@mcp_server.tool()
def gdal_rgbtopct(params: dict) -> dict:
    """RGB to PCT

RGB to PCT (gdal:rgbtopct)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

NCOLORS: Number of colors

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OUTPUT: RGB to PCT

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	RGB to PCT"""
    return processing.run("gdal:rgbtopct", params)

@mcp_server.tool()
def gdal_roughness(params: dict) -> dict:
    """Roughness

Roughness (gdal:roughness)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

COMPUTE_EDGES: Compute edges

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Roughness

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Roughness"""
    return processing.run("gdal:roughness", params)

@mcp_server.tool()
def gdal_sieve(params: dict) -> dict:
    """Sieve

Sieve (gdal:sieve)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

THRESHOLD: Threshold

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

EIGHT_CONNECTEDNESS: Use 8-connectedness

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

NO_MASK: Do not use the default validity mask for the input band

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

MASK_LAYER: Validity mask

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Sieved

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Sieved"""
    return processing.run("gdal:sieve", params)

@mcp_server.tool()
def gdal_slope(params: dict) -> dict:
    """Slope

Slope (gdal:slope)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

SCALE: Ratio of vertical units to horizontal

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

AS_PERCENT: Slope expressed as percent instead of degrees

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

COMPUTE_EDGES: Compute edges

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

ZEVENBERGEN: Use Zevenbergen&Thorne formula instead of the Horn's one

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Slope

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Slope"""
    return processing.run("gdal:slope", params)

@mcp_server.tool()
def gdal_tileindex(params: dict) -> dict:
    """Tile index

Tile index (gdal:tileindex)


----------------
Input parameters
----------------

LAYERS: Input files

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

PATH_FIELD_NAME: Field name to hold the file path to the indexed rasters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

ABSOLUTE_PATH: Store absolute path to the indexed rasters

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

PROJ_DIFFERENCE: Skip files with different projection reference

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

TARGET_CRS: Transform geometries to the given CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

CRS_FIELD_NAME: The name of the field to store the SRS of each tile

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

CRS_FORMAT: The format in which the CRS of each tile must be written

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Auto
		- 1: Well-known text (WKT)
		- 2: EPSG
		- 3: Proj.4

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Tile index

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputVectorLayer>
	Tile index"""
    return processing.run("gdal:tileindex", params)

@mcp_server.tool()
def gdal_tpitopographicpositionindex(params: dict) -> dict:
    """Topographic Position Index (TPI)

Topographic Position Index (TPI) (gdal:tpitopographicpositionindex)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

COMPUTE_EDGES: Compute edges

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Topographic Position Index

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Topographic Position Index"""
    return processing.run("gdal:tpitopographicpositionindex", params)

@mcp_server.tool()
def gdal_translate(params: dict) -> dict:
    """Translate (convert format)

Translate (convert format) (gdal:translate)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

TARGET_CRS: Override the projection for the output file

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

NODATA: Assign a specified nodata value to output bands

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

COPY_SUBDATASETS: Copy all subdatasets of this file to individual output files

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Use Input Layer Data Type
		- 1: Byte
		- 2: Int16
		- 3: UInt16
		- 4: UInt32
		- 5: Int32
		- 6: Float32
		- 7: Float64
		- 8: CInt16
		- 9: CInt32
		- 10: CFloat32
		- 11: CFloat64
		- 12: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

OUTPUT: Converted

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Converted"""
    return processing.run("gdal:translate", params)

@mcp_server.tool()
def gdal_triterrainruggednessindex(params: dict) -> dict:
    """Terrain Ruggedness Index (TRI)

Terrain Ruggedness Index (TRI) (gdal:triterrainruggednessindex)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

COMPUTE_EDGES: Compute edges

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Terrain Ruggedness Index

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Terrain Ruggedness Index"""
    return processing.run("gdal:triterrainruggednessindex", params)

@mcp_server.tool()
def gdal_viewshed(params: dict) -> dict:
    """Viewshed

Viewshed (gdal:viewshed)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

BAND: Band number

	Parameter type:	QgsProcessingParameterBand

	Accepted data types:
		- int
		- QgsProperty

OBSERVER: Observer location

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

OBSERVER_HEIGHT: Observer height, DEM units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

TARGET_HEIGHT: Target height, DEM units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

MAX_DISTANCE: Maximum distance from observer to compute visibility

	Parameter type:	QgsProcessingParameterDistance

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Output

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Output"""
    return processing.run("gdal:viewshed", params)

@mcp_server.tool()
def gdal_warpreproject(params: dict) -> dict:
    """Warp (reproject)

Warp (reproject) (gdal:warpreproject)


----------------
Input parameters
----------------

INPUT: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

SOURCE_CRS: Source CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

TARGET_CRS: Target CRS

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

RESAMPLING: Resampling method to use

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Nearest Neighbour
		- 1: Bilinear (2x2 Kernel)
		- 2: Cubic (4x4 Kernel)
		- 3: Cubic B-Spline (4x4 Kernel)
		- 4: Lanczos (6x6 Kernel)
		- 5: Average
		- 6: Mode
		- 7: Maximum
		- 8: Minimum
		- 9: Median
		- 10: First Quartile (Q1)
		- 11: Third Quartile (Q3)

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

NODATA: Nodata value for output bands

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

TARGET_RESOLUTION: Output file resolution in target georeferenced units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

OPTIONS: Additional creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

DATA_TYPE: Output data type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: Use Input Layer Data Type
		- 1: Byte
		- 2: Int16
		- 3: UInt16
		- 4: UInt32
		- 5: Int32
		- 6: Float32
		- 7: Float64
		- 8: CInt16
		- 9: CInt32
		- 10: CFloat32
		- 11: CFloat64
		- 12: Int8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

TARGET_EXTENT: Georeferenced extents of output file to be created

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

TARGET_EXTENT_CRS: CRS of the target raster extent

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

MULTITHREADING: Use multithreaded warping implementation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

EXTRA: Additional command-line parameters

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

OUTPUT: Reprojected

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

----------------
Outputs
----------------

OUTPUT:  <QgsProcessingOutputRasterLayer>
	Reprojected"""
    return processing.run("gdal:warpreproject", params)

@mcp_server.tool()
def grass7_g_extension_list(params: dict) -> dict:
    """g.extension.list - g.extension.list - List GRASS addons.

g.extension.list (grass7:g.extension.list)

g.extension.list - List GRASS addons.


----------------
Input parameters
----------------

-l: List available extensions in the official GRASS GIS Addons repository

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: List available extensions in the official GRASS GIS Addons repository including module description

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: List locally installed extensions

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: List of addons

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	List of addons"""
    return processing.run("grass7:g.extension.list", params)

@mcp_server.tool()
def grass7_g_extension_manage(params: dict) -> dict:
    """g.extension.manage - g.extension.manage - Install or uninstall GRASS addons.

g.extension.manage (grass7:g.extension.manage)

g.extension.manage - Install or uninstall GRASS addons.


----------------
Input parameters
----------------

extension: Name of Extension

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

operation: Operation

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: add
		- 1: remove

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-f: Force (required for removal)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Operate on toolboxes instead of single modules (experimental)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

----------------
Outputs
----------------"""
    return processing.run("grass7:g.extension.manage", params)

@mcp_server.tool()
def grass7_i_albedo(params: dict) -> dict:
    """i.albedo - Computes broad band albedo from surface reflectance.

i.albedo (grass7:i.albedo)

Computes broad band albedo from surface reflectance.


----------------
Input parameters
----------------

input: Name of input raster maps

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

-m: MODIS (7 input bands:1,2,3,4,5,6,7)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: NOAA AVHRR (2 input bands:1,2)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-l: Landsat 5+7 (6 input bands:1,2,3,4,5,7)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-8: Landsat 8 (7 input bands:1,2,3,4,5,6,7)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: ASTER (6 input bands:1,3,5,6,8,9)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Aggressive mode (Landsat)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: Soft mode (MODIS)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Albedo

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Albedo"""
    return processing.run("grass7:i.albedo", params)

@mcp_server.tool()
def grass7_i_aster_toar(params: dict) -> dict:
    """i.aster.toar - Calculates Top of Atmosphere Radiance/Reflectance/Brightness Temperature from ASTER DN.

i.aster.toar (grass7:i.aster.toar)

Calculates Top of Atmosphere Radiance/Reflectance/Brightness Temperature from ASTER DN.


----------------
Input parameters
----------------

input: Names of ASTER DN layers (15 layers)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

dayofyear: Day of Year of satellite overpass [0-366]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

sun_elevation: Sun elevation angle (degrees, < 90.0)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-r: Output is radiance (W/m2)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: VNIR is High Gain

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: SWIR is High Gain

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: VNIR is Low Gain 1

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: SWIR is Low Gain 1

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-e: SWIR is Low Gain 2

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Output Directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Output Directory"""
    return processing.run("grass7:i.aster.toar", params)

@mcp_server.tool()
def grass7_i_atcorr(params: dict) -> dict:
    """i.atcorr - Performs atmospheric correction using the 6S algorithm.

i.atcorr (grass7:i.atcorr)

Performs atmospheric correction using the 6S algorithm.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

range: Input imagery range [0,255]

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

elevation: Input altitude raster map in m (optional)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

visibility: Input visibility raster map in km (optional)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

parameters: Name of input text file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

rescale: Rescale output raster map [0,255]

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

output: Atmospheric correction

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

-i: Output raster map as integer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Input raster map converted to reflectance (default is radiance)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Input from ETM+ image taken after July 1, 2000

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Input from ETM+ image taken before July 1, 2000

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Atmospheric correction"""
    return processing.run("grass7:i.atcorr", params)

@mcp_server.tool()
def grass7_i_biomass(params: dict) -> dict:
    """i.biomass - Computes biomass growth, precursor of crop yield calculation.

i.biomass (grass7:i.biomass)

Computes biomass growth, precursor of crop yield calculation.


----------------
Input parameters
----------------

fpar: Name of fPAR raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

lightuse_efficiency: Name of light use efficiency raster map (UZB:cotton=1.9)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

latitude: Name of degree latitude raster map [dd.ddd]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

dayofyear: Name of Day of Year raster map [1-366]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

transmissivity_singleway: Name of single-way transmissivity raster map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

water_availability: Value of water availability raster map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: Biomass

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Biomass"""
    return processing.run("grass7:i.biomass", params)

@mcp_server.tool()
def grass7_i_cca(params: dict) -> dict:
    """i.cca - Canonical components analysis (CCA) program for image processing.

i.cca (grass7:i.cca)

Canonical components analysis (CCA) program for image processing.


----------------
Input parameters
----------------

input: Input rasters (2 to 8)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

signature: File containing spectral signatures

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Output Directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Output Directory"""
    return processing.run("grass7:i.cca", params)

@mcp_server.tool()
def grass7_i_cluster(params: dict) -> dict:
    """i.cluster - Generates spectral signatures for land cover types in an image using a clustering algorithm.

i.cluster (grass7:i.cluster)

Generates spectral signatures for land cover types in an image using a clustering algorithm.


----------------
Input parameters
----------------

input: Input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

classes: Initial number of classes (1-255)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

seed: Name of file containing initial signatures

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

sample: Sampling intervals (by row and col)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

iterations: Maximum number of iterations

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

convergence: Percent convergence

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

separation: Cluster separation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

min_size: Minimum number of pixels in a class

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

signaturefile: Signature File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

reportfile: Final Report File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

signaturefile:  <QgsProcessingOutputFile>
	Signature File

reportfile:  <QgsProcessingOutputFile>
	Final Report File"""
    return processing.run("grass7:i.cluster", params)

@mcp_server.tool()
def grass7_i_colors_enhance(params: dict) -> dict:
    """i.colors.enhance - Performs auto-balancing of colors for RGB images.

i.colors.enhance (grass7:i.colors.enhance)

Performs auto-balancing of colors for RGB images.


----------------
Input parameters
----------------

red: Name of red channel

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

green: Name of green channel

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

blue: Name of blue channel

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

strength: Cropping intensity (upper brightness level)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-f: Extend colors to full range of data on each channel

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-p: Preserve relative colors, adjust brightness only

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Reset to standard color range

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Process bands serially (default: run in parallel)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

redoutput: Enhanced Red

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

greenoutput: Enhanced Green

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

blueoutput: Enhanced Blue

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

redoutput:  <QgsProcessingOutputRasterLayer>
	Enhanced Red

greenoutput:  <QgsProcessingOutputRasterLayer>
	Enhanced Green

blueoutput:  <QgsProcessingOutputRasterLayer>
	Enhanced Blue"""
    return processing.run("grass7:i.colors.enhance", params)

@mcp_server.tool()
def grass7_i_eb_eta(params: dict) -> dict:
    """i.eb.eta - Actual evapotranspiration for diurnal period (Bastiaanssen, 1995).

i.eb.eta (grass7:i.eb.eta)

Actual evapotranspiration for diurnal period (Bastiaanssen, 1995).


----------------
Input parameters
----------------

netradiationdiurnal: Name of the diurnal net radiation map [W/m2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

evaporativefraction: Name of the evaporative fraction map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

temperature: Name of the surface skin temperature [K]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: Evapotranspiration

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Evapotranspiration"""
    return processing.run("grass7:i.eb.eta", params)

@mcp_server.tool()
def grass7_i_eb_evapfr(params: dict) -> dict:
    """i.eb.evapfr - Computes evaporative fraction (Bastiaanssen, 1995) and root zone soil moisture (Makin, Molden and Bastiaanssen, 2001).

i.eb.evapfr (grass7:i.eb.evapfr)

Computes evaporative fraction (Bastiaanssen, 1995) and root zone soil moisture (Makin, Molden and Bastiaanssen, 2001).


----------------
Input parameters
----------------

netradiation: Name of Net Radiation raster map [W/m2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

soilheatflux: Name of soil heat flux raster map [W/m2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

sensibleheatflux: Name of sensible heat flux raster map [W/m2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

evaporativefraction: Evaporative Fraction

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

soilmoisture: Root Zone Soil Moisture

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

evaporativefraction:  <QgsProcessingOutputRasterLayer>
	Evaporative Fraction

soilmoisture:  <QgsProcessingOutputRasterLayer>
	Root Zone Soil Moisture"""
    return processing.run("grass7:i.eb.evapfr", params)

@mcp_server.tool()
def grass7_i_eb_hsebal01_coords(params: dict) -> dict:
    """i.eb.hsebal01.coords - i.eb.hsebal01.coords - Computes sensible heat flux iteration SEBAL 01. Inline coordinates

i.eb.hsebal01.coords (grass7:i.eb.hsebal01.coords)

i.eb.hsebal01.coords - Computes sensible heat flux iteration SEBAL 01. Inline coordinates


----------------
Input parameters
----------------

netradiation: Name of instantaneous net radiation raster map [W/m2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

soilheatflux: Name of instantaneous soil heat flux raster map [W/m2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

aerodynresistance: Name of aerodynamic resistance to heat momentum raster map [s/m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

temperaturemeansealevel: Name of altitude corrected surface temperature raster map [K]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

frictionvelocitystar: Value of the height independent friction velocity (u*) [m/s]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

vapourpressureactual: Name of the actual vapour pressure (e_act) map [KPa]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

row_wet_pixel: Row value of the wet pixel

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

column_wet_pixel: Column value of the wet pixel

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

row_dry_pixel: Row value of the dry pixel

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

column_dry_pixel: Column value of the dry pixel

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-a: Automatic wet/dry pixel (careful!)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Dry/Wet pixels coordinates are in image projection, not row/col

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Sensible Heat Flux

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Sensible Heat Flux"""
    return processing.run("grass7:i.eb.hsebal01.coords", params)

@mcp_server.tool()
def grass7_i_eb_netrad(params: dict) -> dict:
    """i.eb.netrad - Net radiation approximation (Bastiaanssen, 1995).

i.eb.netrad (grass7:i.eb.netrad)

Net radiation approximation (Bastiaanssen, 1995).


----------------
Input parameters
----------------

albedo: Name of albedo raster map [0.0;1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

ndvi: Name of NDVI raster map [-1.0;+1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

temperature: Name of surface temperature raster map [K]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

localutctime: Name of time of satellite overpass raster map [local time in UTC]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

temperaturedifference2m: Name of the difference map of temperature from surface skin to about 2 m height [K]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

emissivity: Name of the emissivity map [-]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

transmissivity_singleway: Name of the single-way atmospheric transmissivitymap [-]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

dayofyear: Name of the Day Of Year (DOY) map [-]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

sunzenithangle: Name of the sun zenith angle map [degrees]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: Net Radiation

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Net Radiation"""
    return processing.run("grass7:i.eb.netrad", params)

@mcp_server.tool()
def grass7_i_eb_soilheatflux(params: dict) -> dict:
    """i.eb.soilheatflux - Soil heat flux approximation (Bastiaanssen, 1995).

i.eb.soilheatflux (grass7:i.eb.soilheatflux)

Soil heat flux approximation (Bastiaanssen, 1995).


----------------
Input parameters
----------------

albedo: Name of albedo raster map [0.0;1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

ndvi: Name of NDVI raster map [-1.0;+1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

temperature: Name of Surface temperature raster map [K]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

netradiation: Name of Net Radiation raster map [W/m2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

localutctime: Name of time of satellite overpass raster map [local time in UTC]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-r: HAPEX-Sahel empirical correction (Roerink, 1995)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Soil Heat Flux

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Soil Heat Flux"""
    return processing.run("grass7:i.eb.soilheatflux", params)

@mcp_server.tool()
def grass7_i_emissivity(params: dict) -> dict:
    """i.emissivity - Computes emissivity from NDVI, generic method for sparse land.

i.emissivity (grass7:i.emissivity)

Computes emissivity from NDVI, generic method for sparse land.


----------------
Input parameters
----------------

input: Name of NDVI raster map [-]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: Emissivity

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Emissivity"""
    return processing.run("grass7:i.emissivity", params)

@mcp_server.tool()
def grass7_i_evapo_mh(params: dict) -> dict:
    """i.evapo.mh - Computes evapotranspiration calculation modified or original Hargreaves formulation, 2001.

i.evapo.mh (grass7:i.evapo.mh)

Computes evapotranspiration calculation modified or original Hargreaves formulation, 2001.


----------------
Input parameters
----------------

netradiation_diurnal: Name of input diurnal net radiation raster map [W/m2/d]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

average_temperature: Name of input average air temperature raster map [C]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

minimum_temperature: Name of input minimum air temperature raster map [C]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

maximum_temperature: Name of input maximum air temperature raster map [C]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

precipitation: Name of precipitation raster map [mm/month]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-z: Set negative ETa to zero

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-h: Use original Hargreaves (1985)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Use Hargreaves-Samani (1985)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Evapotranspiration

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Evapotranspiration"""
    return processing.run("grass7:i.evapo.mh", params)

@mcp_server.tool()
def grass7_i_evapo_pm(params: dict) -> dict:
    """i.evapo.pm - Computes potential evapotranspiration calculation with hourly Penman-Monteith.

i.evapo.pm (grass7:i.evapo.pm)

Computes potential evapotranspiration calculation with hourly Penman-Monteith.


----------------
Input parameters
----------------

elevation: Name of input elevation raster map [m a.s.l.]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

temperature: Name of input temperature raster map [C]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

relativehumidity: Name of input relative humidity raster map [%]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

windspeed: Name of input wind speed raster map [m/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

netradiation: Name of input net solar radiation raster map [MJ/m2/h]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cropheight: Name of input crop height raster map [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-z: Set negative ETa to zero

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Use Night-time

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Evapotranspiration

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Evapotranspiration"""
    return processing.run("grass7:i.evapo.pm", params)

@mcp_server.tool()
def grass7_i_evapo_pt(params: dict) -> dict:
    """i.evapo.pt - Computes evapotranspiration calculation Priestley and Taylor formulation, 1972.

i.evapo.pt (grass7:i.evapo.pt)

Computes evapotranspiration calculation Priestley and Taylor formulation, 1972.


----------------
Input parameters
----------------

net_radiation: Name of input net radiation raster map [W/m2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

soil_heatflux: Name of input soil heat flux raster map [W/m2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

air_temperature: Name of input air temperature raster map [K]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

atmospheric_pressure: Name of input atmospheric pressure raster map [millibars]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

priestley_taylor_coeff: Priestley-Taylor coefficient

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-z: Set negative ETa to zero

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Evapotranspiration

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Evapotranspiration"""
    return processing.run("grass7:i.evapo.pt", params)

@mcp_server.tool()
def grass7_i_evapo_time(params: dict) -> dict:
    """i.evapo.time - Computes temporal integration of satellite ET actual (ETa) following the daily ET reference (ETo) from meteorological station(s).

i.evapo.time (grass7:i.evapo.time)

Computes temporal integration of satellite ET actual (ETa) following the daily ET reference (ETo) from meteorological station(s).


----------------
Input parameters
----------------

eta: Names of satellite ETa raster maps [mm/d or cm/d]

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

eta_doy: Names of satellite ETa Day of Year (DOY) raster maps [0-400] [-]

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

eto: Names of meteorological station ETo raster maps [0-400] [mm/d or cm/d]

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

eto_doy_min: Value of DOY for ETo first day

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

start_period: Value of DOY for the first day of the period studied

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

end_period: Value of DOY for the last day of the period studied

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Temporal integration

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Temporal integration"""
    return processing.run("grass7:i.evapo.time", params)

@mcp_server.tool()
def grass7_i_fft(params: dict) -> dict:
    """i.fft - Fast Fourier Transform (FFT) for image processing.

i.fft (grass7:i.fft)

Fast Fourier Transform (FFT) for image processing.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

real: Real part arrays

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

imaginary: Imaginary part arrays

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

real:  <QgsProcessingOutputRasterLayer>
	Real part arrays

imaginary:  <QgsProcessingOutputRasterLayer>
	Imaginary part arrays"""
    return processing.run("grass7:i.fft", params)

@mcp_server.tool()
def grass7_i_gensig(params: dict) -> dict:
    """i.gensig - Generates statistics for i.maxlik from raster map.

i.gensig (grass7:i.gensig)

Generates statistics for i.maxlik from raster map.


----------------
Input parameters
----------------

trainingmap: Ground truth training map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

input: Input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

signaturefile: Signature File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

signaturefile:  <QgsProcessingOutputFile>
	Signature File"""
    return processing.run("grass7:i.gensig", params)

@mcp_server.tool()
def grass7_i_gensigset(params: dict) -> dict:
    """i.gensigset - Generates statistics for i.smap from raster map.

i.gensigset (grass7:i.gensigset)

Generates statistics for i.smap from raster map.


----------------
Input parameters
----------------

trainingmap: Ground truth training map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

input: Input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

maxsig: Maximum number of sub-signatures in any class

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

signaturefile: Signature File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

signaturefile:  <QgsProcessingOutputFile>
	Signature File"""
    return processing.run("grass7:i.gensigset", params)

@mcp_server.tool()
def grass7_i_group(params: dict) -> dict:
    """i.group - Regroup multiple mono-band rasters into a single multiband raster.

i.group (grass7:i.group)

Regroup multiple mono-band rasters into a single multiband raster.


----------------
Input parameters
----------------

input: Input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

group: Multiband raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

group:  <QgsProcessingOutputRasterLayer>
	Multiband raster"""
    return processing.run("grass7:i.group", params)

@mcp_server.tool()
def grass7_i_his_rgb(params: dict) -> dict:
    """i.his.rgb - Transforms raster maps from HIS (Hue-Intensity-Saturation) color space to RGB (Red-Green-Blue) color space.

i.his.rgb (grass7:i.his.rgb)

Transforms raster maps from HIS (Hue-Intensity-Saturation) color space to RGB (Red-Green-Blue) color space.


----------------
Input parameters
----------------

hue: Name of input raster map (hue)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

intensity: Name of input raster map (intensity)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

saturation: Name of input raster map (saturation)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

red: Red

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

green: Green

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

blue: Blue

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

red:  <QgsProcessingOutputRasterLayer>
	Red

green:  <QgsProcessingOutputRasterLayer>
	Green

blue:  <QgsProcessingOutputRasterLayer>
	Blue"""
    return processing.run("grass7:i.his.rgb", params)

@mcp_server.tool()
def grass7_i_ifft(params: dict) -> dict:
    """i.ifft - Inverse Fast Fourier Transform (IFFT) for image processing.

i.ifft (grass7:i.ifft)

Inverse Fast Fourier Transform (IFFT) for image processing.


----------------
Input parameters
----------------

real: Name of input raster map (image fft, real part)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

imaginary: Name of input raster map (image fft, imaginary part)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: Inverse Fast Fourier Transform

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Inverse Fast Fourier Transform"""
    return processing.run("grass7:i.ifft", params)

@mcp_server.tool()
def grass7_i_image_mosaic(params: dict) -> dict:
    """i.image.mosaic - Mosaics several images and extends colormap.

i.image.mosaic (grass7:i.image.mosaic)

Mosaics several images and extends colormap.


----------------
Input parameters
----------------

input: Input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

output: Mosaic Raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Mosaic Raster"""
    return processing.run("grass7:i.image.mosaic", params)

@mcp_server.tool()
def grass7_i_in_spotvgt(params: dict) -> dict:
    """i.in.spotvgt - Imports SPOT VGT NDVI data into a raster map.

i.in.spotvgt (grass7:i.in.spotvgt)

Imports SPOT VGT NDVI data into a raster map.


----------------
Input parameters
----------------

input: Name of input SPOT VGT NDVI HDF file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

-a: Also import quality map (SM status map layer) and filter NDVI map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: SPOT NDVI Raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	SPOT NDVI Raster"""
    return processing.run("grass7:i.in.spotvgt", params)

@mcp_server.tool()
def grass7_i_landsat_acca(params: dict) -> dict:
    """i.landsat.acca - Performs Landsat TM/ETM+ Automatic Cloud Cover Assessment (ACCA).

i.landsat.acca (grass7:i.landsat.acca)

Performs Landsat TM/ETM+ Automatic Cloud Cover Assessment (ACCA).


----------------
Input parameters
----------------

rasters: Landsat input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

b56composite: B56composite (step 6)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

b45ratio: B45ratio: Desert detection (step 10)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

histogram: Number of classes in the cloud temperature histogram

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-5: Data is Landsat-5 TM

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Apply post-processing filter to remove small holes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-x: Always use cloud signature (step 14)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-2: Bypass second-pass processing, and merge warm (not ambiguous) and cold clouds

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Include a category for cloud shadows

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: ACCA Raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	ACCA Raster"""
    return processing.run("grass7:i.landsat.acca", params)

@mcp_server.tool()
def grass7_i_landsat_toar(params: dict) -> dict:
    """i.landsat.toar - Calculates top-of-atmosphere radiance or reflectance and temperature for Landsat MSS/TM/ETM+/OLI

i.landsat.toar (grass7:i.landsat.toar)

Calculates top-of-atmosphere radiance or reflectance and temperature for Landsat MSS/TM/ETM+/OLI


----------------
Input parameters
----------------

rasters: Landsat input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

metfile: Name of Landsat metadata file (.met or MTL.txt)

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

sensor: Spacecraft sensor

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: mss1
		- 1: mss2
		- 2: mss3
		- 3: mss4
		- 4: mss5
		- 5: tm4
		- 6: tm5
		- 7: tm7
		- 8: oli8

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

method: Atmospheric correction method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: uncorrected
		- 1: dos1
		- 2: dos2
		- 3: dos2b
		- 4: dos3
		- 5: dos4

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

date: Image acquisition date (yyyy-mm-dd)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

sun_elevation: Sun elevation in degrees

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

product_date: Image creation date (yyyy-mm-dd)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

gain: Gain (H/L) of all Landsat ETM+ bands (1-5,61,62,7,8)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

percent: Percent of solar radiance in path radiance

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

pixel: Minimum pixels to consider digital number as dark object

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

rayleigh: Rayleigh atmosphere (diffuse sky irradiance)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

scale: Scale factor for output

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-r: Output at-sensor radiance instead of reflectance for all bands

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Input raster maps use as extension the number of the band instead the code

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Output Directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Output Directory"""
    return processing.run("grass7:i.landsat.toar", params)

@mcp_server.tool()
def grass7_i_maxlik(params: dict) -> dict:
    """i.maxlik - Classifies the cell spectral reflectances in imagery data.

i.maxlik (grass7:i.maxlik)

Classifies the cell spectral reflectances in imagery data.


----------------
Input parameters
----------------

input: Input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

signaturefile: Name of input file containing signatures

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Classification

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

reject: Reject Threshold

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Classification

reject:  <QgsProcessingOutputRasterLayer>
	Reject Threshold"""
    return processing.run("grass7:i.maxlik", params)

@mcp_server.tool()
def grass7_i_modis_qc(params: dict) -> dict:
    """i.modis.qc - Extracts quality control parameters from MODIS QC layers.

i.modis.qc (grass7:i.modis.qc)

Extracts quality control parameters from MODIS QC layers.


----------------
Input parameters
----------------

input: Name of input surface reflectance QC layer [bit array]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

productname: Name of MODIS product type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: mod09Q1
		- 1: mod09A1
		- 2: mod09A1s
		- 3: mod09CMG
		- 4: mod09CMGs
		- 5: mod09CMGi
		- 6: mod11A1
		- 7: mod11A2
		- 8: mod13A2
		- 9: mcd43B2
		- 10: mcd43B2q
		- 11: mod13Q1

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

qcname: Name of QC type to extract

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: adjcorr
		- 1: atcorr
		- 2: cloud
		- 3: data_quality
		- 4: diff_orbit_from_500m
		- 5: modland_qa
		- 6: mandatory_qa_11A1
		- 7: data_quality_flag_11A1
		- 8: emis_error_11A1
		- 9: lst_error_11A1
		- 10: data_quality_flag_11A2
		- 11: emis_error_11A2
		- 12: mandatory_qa_11A2
		- 13: lst_error_11A2
		- 14: aerosol_quantity
		- 15: brdf_correction_performed
		- 16: cirrus_detected
		- 17: cloud_shadow
		- 18: cloud_state
		- 19: internal_cloud_algorithm
		- 20: internal_fire_algorithm
		- 21: internal_snow_mask
		- 22: land_water
		- 23: mod35_snow_ice
		- 24: pixel_adjacent_to_cloud
		- 25: icm_cloudy
		- 26: icm_clear
		- 27: icm_high_clouds
		- 28: icm_low_clouds
		- 29: icm_snow
		- 30: icm_fire
		- 31: icm_sun_glint
		- 32: icm_dust
		- 33: icm_cloud_shadow
		- 34: icm_pixel_is_adjacent_to_cloud
		- 35: icm_cirrus
		- 36: icm_pan_flag
		- 37: icm_criteria_for_aerosol_retrieval
		- 38: icm_aot_has_clim_val
		- 39: modland_qa
		- 40: vi_usefulness
		- 41: aerosol_quantity
		- 42: pixel_adjacent_to_cloud
		- 43: brdf_correction_performed
		- 44: mixed_clouds
		- 45: land_water
		- 46: possible_snow_ice
		- 47: possible_shadow
		- 48: platform
		- 49: land_water
		- 50: sun_z_angle_at_local_noon
		- 51: brdf_correction_performed

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

band: Band number of MODIS product (mod09Q1=[1,2],mod09A1=[1-7],m[o/y]d09CMG=[1-7], mcd43B2q=[1-7])

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: 1
		- 1: 2
		- 2: 3
		- 3: 4
		- 4: 5
		- 5: 6
		- 6: 7

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: QC Classification

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	QC Classification"""
    return processing.run("grass7:i.modis.qc", params)

@mcp_server.tool()
def grass7_i_oif(params: dict) -> dict:
    """i.oif - Calculates Optimum-Index-Factor table for spectral bands

i.oif (grass7:i.oif)

Calculates Optimum-Index-Factor table for spectral bands


----------------
Input parameters
----------------

input: Name of input raster map(s)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

-g: Print in shell script style

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Process bands serially (default: run in parallel)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: OIF File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	OIF File"""
    return processing.run("grass7:i.oif", params)

@mcp_server.tool()
def grass7_i_pansharpen(params: dict) -> dict:
    """i.pansharpen - Image fusion algorithms to sharpen multispectral with high-res panchromatic channels

i.pansharpen (grass7:i.pansharpen)

Image fusion algorithms to sharpen multispectral with high-res panchromatic channels


----------------
Input parameters
----------------

red: Name of red channel

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

green: Name of green channel

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

blue: Name of blue channel

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

pan: Name of raster map to be used for high resolution panchromatic channel

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: brovey
		- 1: ihs
		- 2: pca

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-l: Rebalance blue channel for LANDSAT

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Process bands serially (default: run in parallel)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

redoutput: Enhanced Red

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

greenoutput: Enhanced Green

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

blueoutput: Enhanced Blue

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

redoutput:  <QgsProcessingOutputRasterLayer>
	Enhanced Red

greenoutput:  <QgsProcessingOutputRasterLayer>
	Enhanced Green

blueoutput:  <QgsProcessingOutputRasterLayer>
	Enhanced Blue"""
    return processing.run("grass7:i.pansharpen", params)

@mcp_server.tool()
def grass7_i_pca(params: dict) -> dict:
    """i.pca - Principal components analysis (PCA) for image processing.

i.pca (grass7:i.pca)

Principal components analysis (PCA) for image processing.


----------------
Input parameters
----------------

input: Name of two or more input raster maps

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

rescale: Rescaling range for output maps. For no rescaling use 0,0

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

percent: Cumulative percent importance for filtering

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-n: Normalize (center and scale) input maps

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Output will be filtered input bands

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Output Directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Output Directory"""
    return processing.run("grass7:i.pca", params)

@mcp_server.tool()
def grass7_i_rgb_his(params: dict) -> dict:
    """i.rgb.his - Transforms raster maps from RGB (Red-Green-Blue) color space to HIS (Hue-Intensity-Saturation) color space.

i.rgb.his (grass7:i.rgb.his)

Transforms raster maps from RGB (Red-Green-Blue) color space to HIS (Hue-Intensity-Saturation) color space.


----------------
Input parameters
----------------

red: Name for input raster map (red)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

green: Name for input raster map (green)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

blue: Name for input raster map (blue)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

hue: Hue

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

intensity: Intensity

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

saturation: Saturation

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

hue:  <QgsProcessingOutputRasterLayer>
	Hue

intensity:  <QgsProcessingOutputRasterLayer>
	Intensity

saturation:  <QgsProcessingOutputRasterLayer>
	Saturation"""
    return processing.run("grass7:i.rgb.his", params)

@mcp_server.tool()
def grass7_i_segment(params: dict) -> dict:
    """i.segment - Identifies segments (objects) from imagery data.

i.segment (grass7:i.segment)

Identifies segments (objects) from imagery data.


----------------
Input parameters
----------------

input: Input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

threshold: Difference threshold between 0 and 1

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

method: Segmentation method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: region_growing

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

similarity: Similarity calculation method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: euclidean
		- 1: manhattan

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

minsize: Minimum number of cells in a segment

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Amount of memory to use in MB

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

iterations: Maximum number of iterations

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

seeds: Name for input raster map with starting seeds

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

bounds: Name of input bounding/constraining raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-d: Use 8 neighbors (3x3 neighborhood) instead of the default 4 neighbors for each pixel

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-w: Weighted input, do not perform the default scaling of input raster maps

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Segmented Raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

goodness: Goodness Raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Segmented Raster

goodness:  <QgsProcessingOutputRasterLayer>
	Goodness Raster"""
    return processing.run("grass7:i.segment", params)

@mcp_server.tool()
def grass7_i_smap(params: dict) -> dict:
    """i.smap - Performs contextual image classification using sequential maximum a posteriori (SMAP) estimation.

i.smap (grass7:i.smap)

Performs contextual image classification using sequential maximum a posteriori (SMAP) estimation.


----------------
Input parameters
----------------

input: Input rasters

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

signaturefile: Name of input file containing signatures

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

blocksize: Size of submatrix to process at one time

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-m: Use maximum likelihood estimation (instead of smap)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Classification

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

goodness: Goodness_of_fit

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Classification

goodness:  <QgsProcessingOutputRasterLayer>
	Goodness_of_fit"""
    return processing.run("grass7:i.smap", params)

@mcp_server.tool()
def grass7_i_tasscap(params: dict) -> dict:
    """i.tasscap - Performs Tasseled Cap (Kauth Thomas) transformation.

i.tasscap (grass7:i.tasscap)

Performs Tasseled Cap (Kauth Thomas) transformation.


----------------
Input parameters
----------------

input: Input rasters. Landsat4-7: bands 1,2,3,4,5,7; Landsat8: bands 2,3,4,5,6,7; MODIS: bands 1,2,3,4,5,6,7

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

sensor: Satellite sensor

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: landsat4_tm
		- 1: landsat5_tm
		- 2: landsat7_etm
		- 3: landsat8_oli
		- 4: modis

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Output Directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Output Directory"""
    return processing.run("grass7:i.tasscap", params)

@mcp_server.tool()
def grass7_i_topo_coor_ill(params: dict) -> dict:
    """i.topo.coor.ill - i.topo.coor.ill - Creates illumination model for topographic correction of reflectance.

i.topo.coor.ill (grass7:i.topo.coor.ill)

i.topo.coor.ill - Creates illumination model for topographic correction of reflectance.


----------------
Input parameters
----------------

basemap: Name of elevation raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

zenith: Solar zenith in degrees

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

azimuth: Solar azimuth in degrees

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Illumination Model

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Illumination Model"""
    return processing.run("grass7:i.topo.coor.ill", params)

@mcp_server.tool()
def grass7_i_topo_corr(params: dict) -> dict:
    """i.topo.corr - Computes topographic correction of reflectance.

i.topo.corr (grass7:i.topo.corr)

Computes topographic correction of reflectance.


----------------
Input parameters
----------------

input: Name of reflectance raster maps to be corrected topographically

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

basemap: Name of illumination input base raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

zenith: Solar zenith in degrees

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

method: Topographic correction method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: cosine
		- 1: minnaert
		- 2: c-factor
		- 3: percent

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-s: Scale output to input and copy color rules

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Output Directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Output Directory"""
    return processing.run("grass7:i.topo.corr", params)

@mcp_server.tool()
def grass7_i_vi(params: dict) -> dict:
    """i.vi - Calculates different types of vegetation indices.

i.vi (grass7:i.vi)

Calculates different types of vegetation indices.


----------------
Input parameters
----------------

red: Name of input red channel surface reflectance map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

viname: Type of vegetation index

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: arvi
		- 1: dvi
		- 2: evi
		- 3: evi2
		- 4: gvi
		- 5: gari
		- 6: gemi
		- 7: ipvi
		- 8: msavi
		- 9: msavi2
		- 10: ndvi
		- 11: pvi
		- 12: savi
		- 13: sr
		- 14: vari
		- 15: wdvi

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

nir: Name of input nir channel surface reflectance map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

green: Name of input green channel surface reflectance map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

blue: Name of input blue channel surface reflectance map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

band5: Name of input 5th channel surface reflectance map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

band7: Name of input 7th channel surface reflectance map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

soil_line_slope: Value of the slope of the soil line (MSAVI2 only)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

soil_line_intercept: Value of the factor of reduction of soil noise (MSAVI2 only)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

soil_noise_reduction: Value of the slope of the soil line (MSAVI2 only)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

storage_bit: Maximum bits for digital numbers

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: 7
		- 1: 8
		- 2: 9
		- 3: 10
		- 4: 16

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Vegetation Index

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Vegetation Index"""
    return processing.run("grass7:i.vi", params)

@mcp_server.tool()
def grass7_i_zc(params: dict) -> dict:
    """i.zc - Zero-crossing "edge detection" raster function for image processing.

i.zc (grass7:i.zc)

Zero-crossing "edge detection" raster function for image processing.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

width: x-y extent of the Gaussian filter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

threshold: Sensitivity of Gaussian filter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

orientations: Number of azimuth directions categorized

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Zero crossing

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Zero crossing"""
    return processing.run("grass7:i.zc", params)

@mcp_server.tool()
def grass7_m_cogo(params: dict) -> dict:
    """m.cogo - A simple utility for converting bearing and distance measurements to coordinates and vice versa. It assumes a Cartesian coordinate system

m.cogo (grass7:m.cogo)

A simple utility for converting bearing and distance measurements to coordinates and vice versa. It assumes a Cartesian coordinate system


----------------
Input parameters
----------------

input: Name of input file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Output text file

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

coordinates: Starting coordinate pair

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

-l: Lines are labelled

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-q: Suppress warnings

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Convert from coordinates to bearing and distance

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Repeat the starting coordinate at the end to close a loop

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Output text file"""
    return processing.run("grass7:m.cogo", params)

@mcp_server.tool()
def grass7_nviz(params: dict) -> dict:
    """nviz - Visualization and animation tool for GRASS data.

nviz (grass7:nviz)

Visualization and animation tool for GRASS data.


----------------
Input parameters
----------------

elevation: Name of elevation raster map

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

color: Name of raster map(s) for Color

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

vector: Name of vector lines/areas overlay map(s)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

point: Name of vector points overlay file(s)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

volume: Name of existing 3d raster map

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------"""
    return processing.run("grass7:nviz", params)

@mcp_server.tool()
def grass7_r_basins_fill(params: dict) -> dict:
    """r.basins.fill - Generates watershed subbasins raster map.

r.basins.fill (grass7:r.basins.fill)

Generates watershed subbasins raster map.


----------------
Input parameters
----------------

cnetwork: Input coded stream network raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

tnetwork: Input thinned ridge network raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

number: Number of passes through the dataset

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Watersheds

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Watersheds"""
    return processing.run("grass7:r.basins.fill", params)

@mcp_server.tool()
def grass7_r_blend_combine(params: dict) -> dict:
    """r.blend.combine - r.blend.combine - Blends color components of two raster maps by a given ratio and export into a unique raster.

r.blend.combine (grass7:r.blend.combine)

r.blend.combine - Blends color components of two raster maps by a given ratio and export into a unique raster.


----------------
Input parameters
----------------

first: Name of first raster map for blending

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

second: Name of second raster map for blending

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

percent: Percentage weight of first map for color blending

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Blended

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Blended"""
    return processing.run("grass7:r.blend.combine", params)

@mcp_server.tool()
def grass7_r_blend_rgb(params: dict) -> dict:
    """r.blend.rgb - r.blend.rgb - Blends color components of two raster maps by a given ratio and exports into three rasters.

r.blend.rgb (grass7:r.blend.rgb)

r.blend.rgb - Blends color components of two raster maps by a given ratio and exports into three rasters.


----------------
Input parameters
----------------

first: Name of first raster map for blending

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

second: Name of second raster map for blending

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

percent: Percentage weight of first map for color blending

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output_red: Blended Red

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

output_green: Blended Green

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

output_blue: Blended Blue

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output_red:  <QgsProcessingOutputRasterLayer>
	Blended Red

output_green:  <QgsProcessingOutputRasterLayer>
	Blended Green

output_blue:  <QgsProcessingOutputRasterLayer>
	Blended Blue"""
    return processing.run("grass7:r.blend.rgb", params)

@mcp_server.tool()
def grass7_r_buffer(params: dict) -> dict:
    """r.buffer - Creates a raster map layer showing buffer zones surrounding cells that contain non-NULL category values.

r.buffer (grass7:r.buffer)

Creates a raster map layer showing buffer zones surrounding cells that contain non-NULL category values.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

distances: Distance zone(s) (e.g. 100,200,300)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

units: Units of distance

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: meters
		- 1: kilometers
		- 2: feet
		- 3: miles
		- 4: nautmiles

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-z: Ignore zero (0) data cells instead of NULL cells

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Buffer

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Buffer"""
    return processing.run("grass7:r.buffer", params)

@mcp_server.tool()
def grass7_r_buffer_lowmem(params: dict) -> dict:
    """r.buffer.lowmem - Creates a raster map layer showing buffer zones surrounding cells that contain non-NULL category values (low-memory alternative).

r.buffer.lowmem (grass7:r.buffer.lowmem)

Creates a raster map layer showing buffer zones surrounding cells that contain non-NULL category values (low-memory alternative).


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

distances: Distance zone(s) (e.g. 100,200,300)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

units: Units of distance

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: meters
		- 1: kilometers
		- 2: feet
		- 3: miles
		- 4: nautmiles

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-z: Ignore zero (0) data cells instead of NULL cells

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Buffer

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Buffer"""
    return processing.run("grass7:r.buffer.lowmem", params)

@mcp_server.tool()
def grass7_r_carve(params: dict) -> dict:
    """r.carve - Takes vector stream data, transforms it to raster and subtracts depth from the output DEM.

r.carve (grass7:r.carve)

Takes vector stream data, transforms it to raster and subtracts depth from the output DEM.


----------------
Input parameters
----------------

raster: Elevation

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

vector: Vector layer containing stream(s)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

width: Stream width (in meters). Default is raster cell width

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

depth: Additional stream depth (in meters)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-n: No flat areas allowed in flow direction

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Modified elevation

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

points: Adjusted stream points

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Modified elevation

points:  <QgsProcessingOutputVectorLayer>
	Adjusted stream points"""
    return processing.run("grass7:r.carve", params)

@mcp_server.tool()
def grass7_r_category(params: dict) -> dict:
    """r.category - Manages category values and labels associated with user-specified raster map layers.

r.category (grass7:r.category)

Manages category values and labels associated with user-specified raster map layers.


----------------
Input parameters
----------------

map: Name of raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

separator: Field separator (Special characters: pipe, comma, space, tab, newline)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

rules: File containing category label rules

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

txtrules: Inline category label rules

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

raster: Raster map from which to copy category table

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

format: Default label or format string for dynamic labeling. Used when no explicit label exists for the category

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

coefficients: Dynamic label coefficients. Two pairs of category multiplier and offsets, for $1 and $2

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output: Category

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Category"""
    return processing.run("grass7:r.category", params)

@mcp_server.tool()
def grass7_r_category_out(params: dict) -> dict:
    """r.category.out - r.category.out - Exports category values and labels associated with user-specified raster map layers.

r.category.out (grass7:r.category.out)

r.category.out - Exports category values and labels associated with user-specified raster map layers.


----------------
Input parameters
----------------

map: Name of raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cats: Category values (for Integer rasters). Example: 1,3,7-9,13

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

values: Comma separated value list (for float rasters). Example: 1.4,3.8,13

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

separator: Field separator (Special characters: pipe, comma, space, tab, newline)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

html: Category

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Category"""
    return processing.run("grass7:r.category.out", params)

@mcp_server.tool()
def grass7_r_circle(params: dict) -> dict:
    """r.circle - Creates a raster map containing concentric rings around a given point.

r.circle (grass7:r.circle)

Creates a raster map containing concentric rings around a given point.


----------------
Input parameters
----------------

coordinates: The coordinate of the center (east,north)

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

min: Minimum radius for ring/circle map (in meters)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

max: Maximum radius for ring/circle map (in meters)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

multiplier: Data value multiplier

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-b: Generate binary raster map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Circles

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Circles"""
    return processing.run("grass7:r.circle", params)

@mcp_server.tool()
def grass7_r_clump(params: dict) -> dict:
    """r.clump - Recategorizes data in a raster map by grouping cells that form physically discrete areas into unique categories.

r.clump (grass7:r.clump)

Recategorizes data in a raster map by grouping cells that form physically discrete areas into unique categories.


----------------
Input parameters
----------------

input: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

title: Title for output raster map

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-d: Clump also diagonal cells

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Clumps

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

threshold: Threshold to identify similar cells

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Clumps"""
    return processing.run("grass7:r.clump", params)

@mcp_server.tool()
def grass7_r_coin(params: dict) -> dict:
    """r.coin - Tabulates the mutual occurrence (coincidence) of categories for two raster map layers.

r.coin (grass7:r.coin)

Tabulates the mutual occurrence (coincidence) of categories for two raster map layers.


----------------
Input parameters
----------------

first: Name of first raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

second: Name of second raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

units: Unit of measure

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: c
		- 1: p
		- 2: x
		- 3: y
		- 4: a
		- 5: h
		- 6: k
		- 7: m

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-w: Wide report, 132 columns (default: 80)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Coincidence report

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Coincidence report"""
    return processing.run("grass7:r.coin", params)

@mcp_server.tool()
def grass7_r_colors(params: dict) -> dict:
    """r.colors - Creates/modifies the color table associated with a raster map.

r.colors (grass7:r.colors)

Creates/modifies the color table associated with a raster map.


----------------
Input parameters
----------------

map: Name of raster maps(s)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

color: Name of color table

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: not selected
		- 1: aspect
		- 2: aspectcolr
		- 3: bcyr
		- 4: bgyr
		- 5: blues
		- 6: byg
		- 7: byr
		- 8: celsius
		- 9: corine
		- 10: curvature
		- 11: differences
		- 12: elevation
		- 13: etopo2
		- 14: evi
		- 15: fahrenheit
		- 16: gdd
		- 17: greens
		- 18: grey
		- 19: grey.eq
		- 20: grey.log
		- 21: grey1.0
		- 22: grey255
		- 23: gyr
		- 24: haxby
		- 25: kelvin
		- 26: ndvi
		- 27: ndwi
		- 28: oranges
		- 29: population
		- 30: population_dens
		- 31: precipitation
		- 32: precipitation_daily
		- 33: precipitation_monthly
		- 34: rainbow
		- 35: ramp
		- 36: random
		- 37: reds
		- 38: rstcurv
		- 39: ryb
		- 40: ryg
		- 41: sepia
		- 42: slope
		- 43: srtm
		- 44: srtm_plus
		- 45: terrain
		- 46: wave

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

rules_txt: Color rules

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

rules: Color rules file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

raster: Raster map from which to copy color table

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-r: Remove existing color table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-w: Only write new color table if it does not already exist

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Invert colors

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-g: Logarithmic scaling

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Logarithmic-absolute scaling

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-e: Histogram equalization

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output_dir: Output Directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_dir:  <QgsProcessingOutputFolder>
	Output Directory"""
    return processing.run("grass7:r.colors", params)

@mcp_server.tool()
def grass7_r_colors_out(params: dict) -> dict:
    """r.colors.out - Exports the color table associated with a raster map.

r.colors.out (grass7:r.colors.out)

Exports the color table associated with a raster map.


----------------
Input parameters
----------------

map: Name of raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-p: Output values as percentages

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

rules: Color Table

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

rules:  <QgsProcessingOutputFile>
	Color Table"""
    return processing.run("grass7:r.colors.out", params)

@mcp_server.tool()
def grass7_r_colors_stddev(params: dict) -> dict:
    """r.colors.stddev - Sets color rules based on stddev from a raster map's mean value.

r.colors.stddev (grass7:r.colors.stddev)

Sets color rules based on stddev from a raster map's mean value.


----------------
Input parameters
----------------

map: Name of raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-b: Color using standard deviation bands

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-z: Force center at zero

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Stddev Colors

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Stddev Colors"""
    return processing.run("grass7:r.colors.stddev", params)

@mcp_server.tool()
def grass7_r_composite(params: dict) -> dict:
    """r.composite - Combines red, green and blue raster maps into a single composite raster map.

r.composite (grass7:r.composite)

Combines red, green and blue raster maps into a single composite raster map.


----------------
Input parameters
----------------

red: Red

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

green: Green

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

blue: Blue

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

levels: Number of levels to be used for each component

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

level_red: Number of levels to be used for <red>

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

level_green: Number of levels to be used for <green>

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

level_blue: Number of levels to be used for <blue>

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-d: Dither

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Use closest color

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Composite

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Composite"""
    return processing.run("grass7:r.composite", params)

@mcp_server.tool()
def grass7_r_contour(params: dict) -> dict:
    """r.contour - Produces a vector map of specified contours from a raster map.

r.contour (grass7:r.contour)

Produces a vector map of specified contours from a raster map.


----------------
Input parameters
----------------

input: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

step: Increment between contour levels

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

levels: List of contour levels

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

minlevel: Minimum contour level

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

maxlevel: Maximum contour level

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

cut: Minimum number of points for a contour line (0 -> no limit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Contours

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Contours"""
    return processing.run("grass7:r.contour", params)

@mcp_server.tool()
def grass7_r_cost(params: dict) -> dict:
    """r.cost - Creates a raster layer of cumulative cost of moving across a raster layer whose cell values represent cost.

r.cost (grass7:r.cost)

Creates a raster layer of cumulative cost of moving across a raster layer whose cell values represent cost.


----------------
Input parameters
----------------

input: Unit cost layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

start_coordinates: Coordinates of starting point(s) (E,N)

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

stop_coordinates: Coordinates of stopping point(s) (E,N)

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

-k: Use the 'Knight's move'; slower, but more accurate

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Keep null values in output raster layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

start_points: Start points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

stop_points: Stop points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

start_raster: Name of starting raster points map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

max_cost: Maximum cumulative cost

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

null_cost: Cost assigned to null cells. By default, null cells are excluded

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used in MB

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Cumulative cost

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

nearest: Cost allocation map

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

outdir: Movement directions

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Cumulative cost

nearest:  <QgsProcessingOutputRasterLayer>
	Cost allocation map

outdir:  <QgsProcessingOutputRasterLayer>
	Movement directions"""
    return processing.run("grass7:r.cost", params)

@mcp_server.tool()
def grass7_r_covar(params: dict) -> dict:
    """r.covar - Outputs a covariance/correlation matrix for user-specified raster layer(s).

r.covar (grass7:r.covar)

Outputs a covariance/correlation matrix for user-specified raster layer(s).


----------------
Input parameters
----------------

map: Input layers

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

-r: Print correlation matrix

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Covariance report

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Covariance report"""
    return processing.run("grass7:r.covar", params)

@mcp_server.tool()
def grass7_r_cross(params: dict) -> dict:
    """r.cross - Creates a cross product of the category values from multiple raster map layers.

r.cross (grass7:r.cross)

Creates a cross product of the category values from multiple raster map layers.


----------------
Input parameters
----------------

input: Input raster layers

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

-z: Non-zero data only

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Cross product

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Cross product"""
    return processing.run("grass7:r.cross", params)

@mcp_server.tool()
def grass7_r_describe(params: dict) -> dict:
    """r.describe - Prints terse list of category values found in a raster layer.

r.describe (grass7:r.describe)

Prints terse list of category values found in a raster layer.


----------------
Input parameters
----------------

map: input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

null_value: String representing NULL value

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

nsteps: Number of quantization steps

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-r: Only print the range of the data

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Suppress reporting of any NULLs

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: Use the current region

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Read floating-point map as integer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Categories

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Categories"""
    return processing.run("grass7:r.describe", params)

@mcp_server.tool()
def grass7_r_distance(params: dict) -> dict:
    """r.distance - Locates the closest points between objects in two raster maps.

r.distance (grass7:r.distance)

Locates the closest points between objects in two raster maps.


----------------
Input parameters
----------------

map: Name of two input raster for computing inter-class distances

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

separator: Field separator (Special characters: pipe, comma, space, tab, newline)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

sort: Sort output by distance

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: asc
		- 1: desc

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-l: Include category labels in the output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-o: Report zero distance if rasters are overlapping

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Report null objects as *

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Distance

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Distance"""
    return processing.run("grass7:r.distance", params)

@mcp_server.tool()
def grass7_r_drain(params: dict) -> dict:
    """r.drain - Traces a flow through an elevation model on a raster map.

r.drain (grass7:r.drain)

Traces a flow through an elevation model on a raster map.


----------------
Input parameters
----------------

input: Elevation

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

direction: Name of input movement direction map associated with the cost surface

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

start_coordinates: Map coordinates of starting point(s) (E,N)

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

start_points: Vector layer containing starting point(s)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

-c: Copy input cell values on output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Accumulate input values along the path

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Count cell numbers along the path

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: The input raster map is a cost surface (direction surface must also be specified)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Least cost path

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

drain: Drain

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Least cost path

drain:  <QgsProcessingOutputVectorLayer>
	Drain"""
    return processing.run("grass7:r.drain", params)

@mcp_server.tool()
def grass7_r_fill_dir(params: dict) -> dict:
    """r.fill.dir - Filters and generates a depressionless elevation layer and a flow direction layer from a given elevation raster layer.

r.fill.dir (grass7:r.fill.dir)

Filters and generates a depressionless elevation layer and a flow direction layer from a given elevation raster layer.


----------------
Input parameters
----------------

input: Elevation

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

format: Output aspect direction format

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: grass
		- 1: agnps
		- 2: answers

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-f: Find unresolved areas only

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Depressionless DEM

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

direction: Flow direction

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

areas: Problem areas

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Depressionless DEM

direction:  <QgsProcessingOutputRasterLayer>
	Flow direction

areas:  <QgsProcessingOutputRasterLayer>
	Problem areas"""
    return processing.run("grass7:r.fill.dir", params)

@mcp_server.tool()
def grass7_r_fill_stats(params: dict) -> dict:
    """r.fill.stats - Rapidly fills 'no data' cells (NULLs) of a raster map with interpolated values (IDW).

r.fill.stats (grass7:r.fill.stats)

Rapidly fills 'no data' cells (NULLs) of a raster map with interpolated values (IDW).


----------------
Input parameters
----------------

input: Input raster layer with data gaps to fill

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-k: Preserve original cell values (By default original values are smoothed)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

mode: Statistic for interpolated cell values

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: wmean
		- 1: mean
		- 2: median
		- 3: mode

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-m: Interpret distance as map units, not number of cells (Do not select with geodetic coordinates)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

distance: Distance threshold (default: in cells) for interpolation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

minimum: Minimum input data value to include in interpolation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

maximum: Maximum input data value to include in interpolation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

power: Power coefficient for IDW interpolation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

cells: Minimum number of data cells within search radius

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Output Map

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

uncertainty: Uncertainty Map

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Output Map

uncertainty:  <QgsProcessingOutputRasterLayer>
	Uncertainty Map"""
    return processing.run("grass7:r.fill.stats", params)

@mcp_server.tool()
def grass7_r_fillnulls(params: dict) -> dict:
    """r.fillnulls - Fills no-data areas in raster maps using spline interpolation.

r.fillnulls (grass7:r.fillnulls)

Fills no-data areas in raster maps using spline interpolation.


----------------
Input parameters
----------------

input: Input raster layer to fill

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Interpolation method to use

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: bilinear
		- 1: bicubic
		- 2: rst

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

tension: Spline tension parameter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

smooth: Spline smoothing parameter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

edge: Width of hole edge used for interpolation (in cells)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

npmin: Minimum number of points for approximation in a segment (>segmax)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

segmax: Maximum number of points in a segment

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

lambda: Tykhonov regularization parameter (affects smoothing)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Filled

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Filled"""
    return processing.run("grass7:r.fillnulls", params)

@mcp_server.tool()
def grass7_r_flow(params: dict) -> dict:
    """r.flow - Construction of flowlines, flowpath lengths, and flowaccumulation (contributing areas) from a raster digital elevation model (DEM).

r.flow (grass7:r.flow)

Construction of flowlines, flowpath lengths, and flowaccumulation (contributing areas) from a raster digital elevation model (DEM).


----------------
Input parameters
----------------

elevation: Elevation

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

aspect: Aspect

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

barrier: Barrier

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

skip: Number of cells between flowlines

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

bound: Maximum number of segments per flowline

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-u: Compute upslope flowlines instead of default downhill flowlines

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-3: 3-D lengths instead of 2-D

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-m: Use less memory, at a performance penalty

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

flowline: Flow line

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

flowlength: Flow path length

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

flowaccumulation: Flow accumulation

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

flowline:  <QgsProcessingOutputVectorLayer>
	Flow line

flowlength:  <QgsProcessingOutputRasterLayer>
	Flow path length

flowaccumulation:  <QgsProcessingOutputRasterLayer>
	Flow accumulation"""
    return processing.run("grass7:r.flow", params)

@mcp_server.tool()
def grass7_r_geomorphon(params: dict) -> dict:
    """r.geomorphon - Calculates geomorphons (terrain forms) and associated geometry using machine vision approach.

r.geomorphon (grass7:r.geomorphon)

Calculates geomorphons (terrain forms) and associated geometry using machine vision approach.


----------------
Input parameters
----------------

elevation: Name of input elevation raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

search: Outer search radius

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

skip: Inner search radius

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

flat: Flatness threshold (degrees)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

dist: Flatness distance, zero for none

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

forms: Most common geomorphic forms

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

-m: Use meters to define search units (default is cells)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-e: Use extended form correction

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

forms:  <QgsProcessingOutputRasterLayer>
	Most common geomorphic forms"""
    return processing.run("grass7:r.geomorphon", params)

@mcp_server.tool()
def grass7_r_grow(params: dict) -> dict:
    """r.grow - Generates a raster layer with contiguous areas grown by one cell.

r.grow (grass7:r.grow)

Generates a raster layer with contiguous areas grown by one cell.


----------------
Input parameters
----------------

input: input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

radius: Radius of buffer in raster cells

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

metric: Metric

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: euclidean
		- 1: maximum
		- 2: manhattan

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

old: Value to write for input cells which are non-NULL (-1 => NULL)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

new: Value to write for "grown" cells

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-m: Radius is in map units rather than cells

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Expanded

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Expanded"""
    return processing.run("grass7:r.grow", params)

@mcp_server.tool()
def grass7_r_grow_distance(params: dict) -> dict:
    """r.grow.distance - Generates a raster layer of distance to features in input layer.

r.grow.distance (grass7:r.grow.distance)

Generates a raster layer of distance to features in input layer.


----------------
Input parameters
----------------

input: Input input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

metric: Metric

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: euclidean
		- 1: squared
		- 2: maximum
		- 3: manhattan
		- 4: geodesic

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-m: Output distances in meters instead of map units

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Calculate distance to nearest NULL cell

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

distance: Distance

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

value: Value of nearest cell

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

distance:  <QgsProcessingOutputRasterLayer>
	Distance

value:  <QgsProcessingOutputRasterLayer>
	Value of nearest cell"""
    return processing.run("grass7:r.grow.distance", params)

@mcp_server.tool()
def grass7_r_gwflow(params: dict) -> dict:
    """r.gwflow - Numerical calculation program for transient, confined and unconfined groundwater flow in two dimensions.

r.gwflow (grass7:r.gwflow)

Numerical calculation program for transient, confined and unconfined groundwater flow in two dimensions.


----------------
Input parameters
----------------

phead: The initial piezometric head in [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

status: Boundary condition status, 0-inactive, 1-active, 2-dirichlet

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

hc_x: X-part of the hydraulic conductivity tensor in [m/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

hc_y: Y-part of the hydraulic conductivity tensor in [m/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

q: Water sources and sinks in [m^3/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

s: Specific yield in [1/m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

recharge: Recharge map e.g: 6*10^-9 per cell in [m^3/s*m^2]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

top: Top surface of the aquifer in [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

bottom: Bottom surface of the aquifer in [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

type: The type of groundwater flow

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: confined
		- 1: unconfined

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

river_bed: The height of the river bed in [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

river_head: Water level (head) of the river with leakage connection in [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

river_leak: The leakage coefficient of the river bed in [1/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

drain_bed: The height of the drainage bed in [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

drain_leak: The leakage coefficient of the drainage bed in [1/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

dtime: The calculation time in seconds

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

maxit: Maximum number of iteration used to solver the linear equation system

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

error: Error break criteria for iterative solvers (jacobi, sor, cg or bicgstab)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

solver: The type of solver which should solve the symmetric linear equation system

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: cg
		- 1: pcg
		- 2: cholesky

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

relax: The relaxation parameter used by the jacobi and sor solver for speedup or stabilizing

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-f: Allocate a full quadratic linear equation system, default is a sparse linear equation system

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Groundwater flow

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

vx: Groundwater filter velocity vector part in x direction [m/s]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

vy: Groundwater filter velocity vector part in y direction [m/s]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

budget: Groundwater budget for each cell [m^3/s]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Groundwater flow

vx:  <QgsProcessingOutputRasterLayer>
	Groundwater filter velocity vector part in x direction [m/s]

vy:  <QgsProcessingOutputRasterLayer>
	Groundwater filter velocity vector part in y direction [m/s]

budget:  <QgsProcessingOutputRasterLayer>
	Groundwater budget for each cell [m^3/s]"""
    return processing.run("grass7:r.gwflow", params)

@mcp_server.tool()
def grass7_r_his(params: dict) -> dict:
    """r.his - Generates red, green and blue raster layers combining hue, intensity and saturation (HIS) values from user-specified input raster layers.

r.his (grass7:r.his)

Generates red, green and blue raster layers combining hue, intensity and saturation (HIS) values from user-specified input raster layers.


----------------
Input parameters
----------------

hue: Hue

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

intensity: Intensity

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

saturation: Saturation

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

bgcolor: Color to use instead of NULL values. Either a standard color name, R:G:B triplet, or "none"

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-c: Use colors from color tables for NULL values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

red: Red

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

green: Green

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

blue: Blue

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

red:  <QgsProcessingOutputRasterLayer>
	Red

green:  <QgsProcessingOutputRasterLayer>
	Green

blue:  <QgsProcessingOutputRasterLayer>
	Blue"""
    return processing.run("grass7:r.his", params)

@mcp_server.tool()
def grass7_r_horizon(params: dict) -> dict:
    """r.horizon - Horizon angle computation from a digital elevation model.

r.horizon (grass7:r.horizon)

Horizon angle computation from a digital elevation model.


----------------
Input parameters
----------------

elevation: Name of input elevation raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

direction: Direction in which you want to know the horizon height

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

step: Angle step size for multidirectional horizon

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

start: Start angle for multidirectional horizon

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

end: End angle for multidirectional horizon

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

bufferzone: For horizon rasters, read from the DEM an extra buffer around the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

e_buff: For horizon rasters, read from the DEM an extra buffer eastward the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

w_buff: For horizon rasters, read from the DEM an extra buffer westward the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

n_buff: For horizon rasters, read from the DEM an extra buffer northward the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

s_buff: For horizon rasters, read from the DEM an extra buffer southward the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

maxdistance: The maximum distance to consider when finding the horizon height

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

distance: Sampling distance step coefficient

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-d: Write output in degrees (default is radians)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Write output in compass orientation (default is CCW, East=0)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Folder to get horizon rasters

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Folder to get horizon rasters"""
    return processing.run("grass7:r.horizon", params)

@mcp_server.tool()
def grass7_r_horizon_height(params: dict) -> dict:
    """r.horizon.height - r.horizon.height - Horizon angle computation from a digital elevation model.

r.horizon.height (grass7:r.horizon.height)

r.horizon.height - Horizon angle computation from a digital elevation model.


----------------
Input parameters
----------------

elevation: Name of input elevation raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coordinates: Coordinate for which you want to calculate the horizon

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

direction: Direction in which you want to know the horizon height

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

step: Angle step size for multidirectional horizon

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

start: Start angle for multidirectional horizon

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

end: End angle for multidirectional horizon

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

bufferzone: For horizon rasters, read from the DEM an extra buffer around the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

e_buff: For horizon rasters, read from the DEM an extra buffer eastward the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

w_buff: For horizon rasters, read from the DEM an extra buffer westward the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

n_buff: For horizon rasters, read from the DEM an extra buffer northward the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

s_buff: For horizon rasters, read from the DEM an extra buffer southward the present region

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

maxdistance: The maximum distance to consider when finding the horizon height

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

distance: Sampling distance step coefficient

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-d: Write output in degrees (default is radians)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Write output in compass orientation (default is CCW, East=0)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Horizon

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Horizon"""
    return processing.run("grass7:r.horizon.height", params)

@mcp_server.tool()
def grass7_r_in_lidar(params: dict) -> dict:
    """r.in.lidar - Creates a raster map from LAS LiDAR points using univariate statistics.

r.in.lidar (grass7:r.in.lidar)

Creates a raster map from LAS LiDAR points using univariate statistics.


----------------
Input parameters
----------------

input: LAS input file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

method: Statistic to use for raster values

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: n
		- 1: min
		- 2: max
		- 3: range
		- 4: sum
		- 5: mean
		- 6: stddev
		- 7: variance
		- 8: coeff_var
		- 9: median
		- 10: percentile
		- 11: skewness
		- 12: trimmean

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

type: Storage type for resultant raster map

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: CELL
		- 1: FCELL
		- 2: DCELL

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

base_raster: Subtract raster values from the Z coordinates

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

zrange: Filter range for z data (min, max)

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

zscale: Scale to apply to z data

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

intensity_range: Filter range for intensity values (min, max)

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

intensity_scale: Scale to apply to intensity values

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

percent: Percent of map to keep in memory

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

pth: pth percentile of the values (between 1 and 100)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

trim: Discard <trim> percent of the smallest and <trim> percent of the largest observations (0-50)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

resolution: Output raster resolution

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

return_filter: Only import points of selected return type Options: first, last, mid

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

class_filter: Only import points of selected class(es) (comma separated integers)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-e: Use the extent of the input for the raster extent

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Set computation region to match the new raster map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-o: Override projection check (use current location's projection)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Use intensity values rather than Z values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-j: Use Z values for filtering, but intensity values for statistics

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: Use base raster resolution instead of computational region

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-v: Use only valid points

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Lidar Raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Lidar Raster"""
    return processing.run("grass7:r.in.lidar", params)

@mcp_server.tool()
def grass7_r_in_lidar_info(params: dict) -> dict:
    """r.in.lidar.info - r.in.lidar.info - Extract information from LAS file

r.in.lidar.info (grass7:r.in.lidar.info)

r.in.lidar.info - Extract information from LAS file


----------------
Input parameters
----------------

input: LAS input file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

html: LAS information

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	LAS information"""
    return processing.run("grass7:r.in.lidar.info", params)

@mcp_server.tool()
def grass7_r_info(params: dict) -> dict:
    """r.info - Output basic information about a raster layer.

r.info (grass7:r.info)

Output basic information about a raster layer.


----------------
Input parameters
----------------

map: Raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-r: Print range only

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-g: Print raster array information in shell script style

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-h: Print raster history instead of info

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-e: Print extended metadata information in shell script style

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Basic information

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Basic information"""
    return processing.run("grass7:r.info", params)

@mcp_server.tool()
def grass7_r_kappa(params: dict) -> dict:
    """r.kappa - Calculate error matrix and kappa parameter for accuracy assessment of classification result.

r.kappa (grass7:r.kappa)

Calculate error matrix and kappa parameter for accuracy assessment of classification result.


----------------
Input parameters
----------------

classification: Raster layer containing classification result

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

reference: Raster layer containing reference classes

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

title: Title for error matrix and kappa

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-h: No header in the report

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-w: Wide report (132 columns)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Error matrix and kappa

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Error matrix and kappa"""
    return processing.run("grass7:r.kappa", params)

@mcp_server.tool()
def grass7_r_lake(params: dict) -> dict:
    """r.lake - Fills lake at given point to given level.

r.lake (grass7:r.lake)

Fills lake at given point to given level.


----------------
Input parameters
----------------

elevation: Elevation

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

water_level: Water level

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

coordinates: Seed point coordinates

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

seed: Raster layer with starting point(s) (at least 1 cell > 0)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-n: Use negative depth values for lake raster layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

lake: Lake

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

lake:  <QgsProcessingOutputRasterLayer>
	Lake"""
    return processing.run("grass7:r.lake", params)

@mcp_server.tool()
def grass7_r_latlong(params: dict) -> dict:
    """r.latlong - Creates a latitude/longitude raster map.

r.latlong (grass7:r.latlong)

Creates a latitude/longitude raster map.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-l: Longitude output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: LatLong

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	LatLong"""
    return processing.run("grass7:r.latlong", params)

@mcp_server.tool()
def grass7_r_li_cwed(params: dict) -> dict:
    """r.li.cwed - Calculates contrast weighted edge density index on a raster map

r.li.cwed (grass7:r.li.cwed)

Calculates contrast weighted edge density index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

path: Name of file that contains the weight to calculate the index

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: CWED

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	CWED"""
    return processing.run("grass7:r.li.cwed", params)

@mcp_server.tool()
def grass7_r_li_cwed_ascii(params: dict) -> dict:
    """r.li.cwed.ascii - r.li.cwed.ascii - Calculates contrast weighted edge density index on a raster map

r.li.cwed.ascii (grass7:r.li.cwed.ascii)

r.li.cwed.ascii - Calculates contrast weighted edge density index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

path: Name of file that contains the weight to calculate the index

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: CWED

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	CWED"""
    return processing.run("grass7:r.li.cwed.ascii", params)

@mcp_server.tool()
def grass7_r_li_dominance(params: dict) -> dict:
    """r.li.dominance - Calculates dominance's diversity index on a raster map

r.li.dominance (grass7:r.li.dominance)

Calculates dominance's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Dominance

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Dominance"""
    return processing.run("grass7:r.li.dominance", params)

@mcp_server.tool()
def grass7_r_li_dominance_ascii(params: dict) -> dict:
    """r.li.dominance.ascii - r.li.dominance.ascii - Calculates dominance's diversity index on a raster map

r.li.dominance.ascii (grass7:r.li.dominance.ascii)

r.li.dominance.ascii - Calculates dominance's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Dominance

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Dominance"""
    return processing.run("grass7:r.li.dominance.ascii", params)

@mcp_server.tool()
def grass7_r_li_edgedensity(params: dict) -> dict:
    """r.li.edgedensity - Calculates edge density index on a raster map, using a 4 neighbour algorithm

r.li.edgedensity (grass7:r.li.edgedensity)

Calculates edge density index on a raster map, using a 4 neighbour algorithm


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

patch_type: The value of the patch type

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-b: Exclude border edges

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Edge Density

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Edge Density"""
    return processing.run("grass7:r.li.edgedensity", params)

@mcp_server.tool()
def grass7_r_li_edgedensity_ascii(params: dict) -> dict:
    """r.li.edgedensity.ascii - r.li.edgedensity.ascii - Calculates edge density index on a raster map, using a 4 neighbour algorithm

r.li.edgedensity.ascii (grass7:r.li.edgedensity.ascii)

r.li.edgedensity.ascii - Calculates edge density index on a raster map, using a 4 neighbour algorithm


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

patch_type: The value of the patch type

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-b: Exclude border edges

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output_txt: Edge Density

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Edge Density"""
    return processing.run("grass7:r.li.edgedensity.ascii", params)

@mcp_server.tool()
def grass7_r_li_mpa(params: dict) -> dict:
    """r.li.mpa - Calculates mean pixel attribute index on a raster map

r.li.mpa (grass7:r.li.mpa)

Calculates mean pixel attribute index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Mean Pixel Attribute

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Mean Pixel Attribute"""
    return processing.run("grass7:r.li.mpa", params)

@mcp_server.tool()
def grass7_r_li_mpa_ascii(params: dict) -> dict:
    """r.li.mpa.ascii - r.li.mpa.ascii - Calculates mean pixel attribute index on a raster map

r.li.mpa.ascii (grass7:r.li.mpa.ascii)

r.li.mpa.ascii - Calculates mean pixel attribute index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Mean Pixel Attribute

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Mean Pixel Attribute"""
    return processing.run("grass7:r.li.mpa.ascii", params)

@mcp_server.tool()
def grass7_r_li_mps(params: dict) -> dict:
    """r.li.mps - Calculates mean patch size index on a raster map, using a 4 neighbour algorithm

r.li.mps (grass7:r.li.mps)

Calculates mean patch size index on a raster map, using a 4 neighbour algorithm


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Mean Patch Size

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Mean Patch Size"""
    return processing.run("grass7:r.li.mps", params)

@mcp_server.tool()
def grass7_r_li_mps_ascii(params: dict) -> dict:
    """r.li.mps.ascii - r.li.mps.ascii - Calculates mean patch size index on a raster map, using a 4 neighbour algorithm

r.li.mps.ascii (grass7:r.li.mps.ascii)

r.li.mps.ascii - Calculates mean patch size index on a raster map, using a 4 neighbour algorithm


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Mean Patch Size

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Mean Patch Size"""
    return processing.run("grass7:r.li.mps.ascii", params)

@mcp_server.tool()
def grass7_r_li_padcv(params: dict) -> dict:
    """r.li.padcv - Calculates coefficient of variation of patch area on a raster map

r.li.padcv (grass7:r.li.padcv)

Calculates coefficient of variation of patch area on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: PADCV

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	PADCV"""
    return processing.run("grass7:r.li.padcv", params)

@mcp_server.tool()
def grass7_r_li_padcv_ascii(params: dict) -> dict:
    """r.li.padcv.ascii - r.li.padcv.ascii - Calculates coefficient of variation of patch area on a raster map

r.li.padcv.ascii (grass7:r.li.padcv.ascii)

r.li.padcv.ascii - Calculates coefficient of variation of patch area on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: PADCV

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	PADCV"""
    return processing.run("grass7:r.li.padcv.ascii", params)

@mcp_server.tool()
def grass7_r_li_padrange(params: dict) -> dict:
    """r.li.padrange - Calculates range of patch area size on a raster map

r.li.padrange (grass7:r.li.padrange)

Calculates range of patch area size on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Pad Range

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Pad Range"""
    return processing.run("grass7:r.li.padrange", params)

@mcp_server.tool()
def grass7_r_li_padrange_ascii(params: dict) -> dict:
    """r.li.padrange.ascii - r.li.padrange.ascii - Calculates range of patch area size on a raster map

r.li.padrange.ascii (grass7:r.li.padrange.ascii)

r.li.padrange.ascii - Calculates range of patch area size on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Pad Range

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Pad Range"""
    return processing.run("grass7:r.li.padrange.ascii", params)

@mcp_server.tool()
def grass7_r_li_padsd(params: dict) -> dict:
    """r.li.padsd - Calculates standard deviation of patch area a raster map

r.li.padsd (grass7:r.li.padsd)

Calculates standard deviation of patch area a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Patch Area SD

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Patch Area SD"""
    return processing.run("grass7:r.li.padsd", params)

@mcp_server.tool()
def grass7_r_li_padsd_ascii(params: dict) -> dict:
    """r.li.padsd.ascii - r.li.padsd.ascii - Calculates standard deviation of patch area a raster map

r.li.padsd.ascii (grass7:r.li.padsd.ascii)

r.li.padsd.ascii - Calculates standard deviation of patch area a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Patch Area SD

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Patch Area SD"""
    return processing.run("grass7:r.li.padsd.ascii", params)

@mcp_server.tool()
def grass7_r_li_patchdensity(params: dict) -> dict:
    """r.li.patchdensity - Calculates patch density index on a raster map, using a 4 neighbour algorithm

r.li.patchdensity (grass7:r.li.patchdensity)

Calculates patch density index on a raster map, using a 4 neighbour algorithm


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Patch Density

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Patch Density"""
    return processing.run("grass7:r.li.patchdensity", params)

@mcp_server.tool()
def grass7_r_li_patchdensity_ascii(params: dict) -> dict:
    """r.li.patchdensity.ascii - r.li.patchdensity.ascii - Calculates patch density index on a raster map, using a 4 neighbour algorithm

r.li.patchdensity.ascii (grass7:r.li.patchdensity.ascii)

r.li.patchdensity.ascii - Calculates patch density index on a raster map, using a 4 neighbour algorithm


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Patch Density

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Patch Density"""
    return processing.run("grass7:r.li.patchdensity.ascii", params)

@mcp_server.tool()
def grass7_r_li_patchnum(params: dict) -> dict:
    """r.li.patchnum - Calculates patch number index on a raster map, using a 4 neighbour algorithm.

r.li.patchnum (grass7:r.li.patchnum)

Calculates patch number index on a raster map, using a 4 neighbour algorithm.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Patch Number

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Patch Number"""
    return processing.run("grass7:r.li.patchnum", params)

@mcp_server.tool()
def grass7_r_li_patchnum_ascii(params: dict) -> dict:
    """r.li.patchnum.ascii - r.li.patchnum.ascii - Calculates patch number index on a raster map, using a 4 neighbour algorithm.

r.li.patchnum.ascii (grass7:r.li.patchnum.ascii)

r.li.patchnum.ascii - Calculates patch number index on a raster map, using a 4 neighbour algorithm.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Patch Number

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Patch Number"""
    return processing.run("grass7:r.li.patchnum.ascii", params)

@mcp_server.tool()
def grass7_r_li_pielou(params: dict) -> dict:
    """r.li.pielou - Calculates Pielou's diversity index on a raster map

r.li.pielou (grass7:r.li.pielou)

Calculates Pielou's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Pielou

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Pielou"""
    return processing.run("grass7:r.li.pielou", params)

@mcp_server.tool()
def grass7_r_li_pielou_ascii(params: dict) -> dict:
    """r.li.pielou.ascii - r.li.pielou.ascii - Calculates Pielou's diversity index on a raster map

r.li.pielou.ascii (grass7:r.li.pielou.ascii)

r.li.pielou.ascii - Calculates Pielou's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Pielou

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Pielou"""
    return processing.run("grass7:r.li.pielou.ascii", params)

@mcp_server.tool()
def grass7_r_li_renyi(params: dict) -> dict:
    """r.li.renyi - Calculates Renyi's diversity index on a raster map

r.li.renyi (grass7:r.li.renyi)

Calculates Renyi's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

alpha: Alpha value is the order of the generalized entropy

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output: Renyi

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Renyi"""
    return processing.run("grass7:r.li.renyi", params)

@mcp_server.tool()
def grass7_r_li_renyi_ascii(params: dict) -> dict:
    """r.li.renyi.ascii - r.li.renyi.ascii - Calculates Renyi's diversity index on a raster map

r.li.renyi.ascii (grass7:r.li.renyi.ascii)

r.li.renyi.ascii - Calculates Renyi's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

alpha: Alpha value is the order of the generalized entropy

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output_txt: Renyi

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Renyi"""
    return processing.run("grass7:r.li.renyi.ascii", params)

@mcp_server.tool()
def grass7_r_li_richness(params: dict) -> dict:
    """r.li.richness - Calculates richness index on a raster map

r.li.richness (grass7:r.li.richness)

Calculates richness index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Richness

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Richness"""
    return processing.run("grass7:r.li.richness", params)

@mcp_server.tool()
def grass7_r_li_richness_ascii(params: dict) -> dict:
    """r.li.richness.ascii - r.li.richness.ascii - Calculates richness index on a raster map

r.li.richness.ascii (grass7:r.li.richness.ascii)

r.li.richness.ascii - Calculates richness index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Richness

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Richness"""
    return processing.run("grass7:r.li.richness.ascii", params)

@mcp_server.tool()
def grass7_r_li_shannon(params: dict) -> dict:
    """r.li.shannon - Calculates Shannon's diversity index on a raster map

r.li.shannon (grass7:r.li.shannon)

Calculates Shannon's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Shannon

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Shannon"""
    return processing.run("grass7:r.li.shannon", params)

@mcp_server.tool()
def grass7_r_li_shannon_ascii(params: dict) -> dict:
    """r.li.shannon.ascii - r.li.shannon.ascii - Calculates Shannon's diversity index on a raster map

r.li.shannon.ascii (grass7:r.li.shannon.ascii)

r.li.shannon.ascii - Calculates Shannon's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Shannon

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Shannon"""
    return processing.run("grass7:r.li.shannon.ascii", params)

@mcp_server.tool()
def grass7_r_li_shape(params: dict) -> dict:
    """r.li.shape - Calculates shape index on a raster map

r.li.shape (grass7:r.li.shape)

Calculates shape index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Shape

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Shape"""
    return processing.run("grass7:r.li.shape", params)

@mcp_server.tool()
def grass7_r_li_shape_ascii(params: dict) -> dict:
    """r.li.shape.ascii - r.li.shape.ascii - Calculates shape index on a raster map

r.li.shape.ascii (grass7:r.li.shape.ascii)

r.li.shape.ascii - Calculates shape index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Shape

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Shape"""
    return processing.run("grass7:r.li.shape.ascii", params)

@mcp_server.tool()
def grass7_r_li_simpson(params: dict) -> dict:
    """r.li.simpson - Calculates Simpson's diversity index on a raster map

r.li.simpson (grass7:r.li.simpson)

Calculates Simpson's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Simpson

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Simpson"""
    return processing.run("grass7:r.li.simpson", params)

@mcp_server.tool()
def grass7_r_li_simpson_ascii(params: dict) -> dict:
    """r.li.simpson.ascii - r.li.simpson.ascii - Calculates Simpson's diversity index on a raster map

r.li.simpson.ascii (grass7:r.li.simpson.ascii)

r.li.simpson.ascii - Calculates Simpson's diversity index on a raster map


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

config_txt: Landscape structure configuration

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

config: Landscape structure configuration file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output_txt: Simpson

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_txt:  <QgsProcessingOutputFile>
	Simpson"""
    return processing.run("grass7:r.li.simpson.ascii", params)

@mcp_server.tool()
def grass7_r_mapcalc_simple(params: dict) -> dict:
    """r.mapcalc.simple - Calculate new raster map from a r.mapcalc expression.

r.mapcalc.simple (grass7:r.mapcalc.simple)

Calculate new raster map from a r.mapcalc expression.


----------------
Input parameters
----------------

a: Raster layer A

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

b: Raster layer B

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

c: Raster layer C

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

d: Raster layer D

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

e: Raster layer E

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

f: Raster layer F

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

expression: Formula

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output: Calculated

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Calculated"""
    return processing.run("grass7:r.mapcalc.simple", params)

@mcp_server.tool()
def grass7_r_mask_rast(params: dict) -> dict:
    """r.mask.rast - r.mask.rast - Creates a MASK for limiting raster operation.

r.mask.rast (grass7:r.mask.rast)

r.mask.rast - Creates a MASK for limiting raster operation.


----------------
Input parameters
----------------

raster: Name of raster map to use as mask

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

input: Name of raster map to which apply the mask

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

maskcats: Raster values to use for mask. Format: 1 2 3 thru 7 *

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-i: Create inverse mask

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Masked

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Masked"""
    return processing.run("grass7:r.mask.rast", params)

@mcp_server.tool()
def grass7_r_mask_vect(params: dict) -> dict:
    """r.mask.vect - r.mask.vect - Creates a MASK for limiting raster operation with a vector layer.

r.mask.vect (grass7:r.mask.vect)

r.mask.vect - Creates a MASK for limiting raster operation with a vector layer.


----------------
Input parameters
----------------

vector: Name of vector map to use as mask

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

input: Name of raster map to which apply the mask

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cats: Category values. Example: 1,3,7-9,13

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-i: Create inverse mask

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Masked

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Masked"""
    return processing.run("grass7:r.mask.vect", params)

@mcp_server.tool()
def grass7_r_mfilter(params: dict) -> dict:
    """r.mfilter - Performs raster map matrix filter.

r.mfilter (grass7:r.mfilter)

Performs raster map matrix filter.


----------------
Input parameters
----------------

input: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

filter: Filter file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

repeat: Number of times to repeat the filter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-z: Apply filter only to zero data values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Filtered

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Filtered"""
    return processing.run("grass7:r.mfilter", params)

@mcp_server.tool()
def grass7_r_mode(params: dict) -> dict:
    """r.mode - Finds the mode of values in a cover layer within areas assigned the same category value in a user-specified base layer.

r.mode (grass7:r.mode)

Finds the mode of values in a cover layer within areas assigned the same category value in a user-specified base layer.


----------------
Input parameters
----------------

base: Base layer to be reclassified

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cover: Categories layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: Mode

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Mode"""
    return processing.run("grass7:r.mode", params)

@mcp_server.tool()
def grass7_r_neighbors(params: dict) -> dict:
    """r.neighbors - Makes each cell category value a function of the category values assigned to the cells around it

r.neighbors (grass7:r.neighbors)

Makes each cell category value a function of the category values assigned to the cells around it


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

selection: Raster layer to select the cells which should be processed

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Neighborhood operation

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: average
		- 1: median
		- 2: mode
		- 3: minimum
		- 4: maximum
		- 5: range
		- 6: stddev
		- 7: sum
		- 8: count
		- 9: variance
		- 10: diversity
		- 11: interspersion
		- 12: quart1
		- 13: quart3
		- 14: perc90
		- 15: quantile

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

size: Neighborhood size (must be odd)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

gauss: Sigma (in cells) for Gaussian filter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

quantile: Quantile to calculate for method=quantile

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-c: Use circular neighborhood

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Do not align output with the input

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

weight: File containing weights

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Neighbors

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Neighbors"""
    return processing.run("grass7:r.neighbors", params)

@mcp_server.tool()
def grass7_r_null(params: dict) -> dict:
    """r.null - Manages NULL-values of given raster map.

r.null (grass7:r.null)

Manages NULL-values of given raster map.


----------------
Input parameters
----------------

map: Name of raster map for which to edit null values

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

setnull: List of cell values to be set to NULL

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

null: The value to replace the null value by

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-f: Only do the work if the map is floating-point

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Only do the work if the map is integer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Only do the work if the map doesn't have a NULL-value bitmap file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Create NULL-value bitmap file validating all data cells

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Remove NULL-value bitmap file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: NullRaster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	NullRaster"""
    return processing.run("grass7:r.null", params)

@mcp_server.tool()
def grass7_r_out_ascii(params: dict) -> dict:
    """r.out.ascii - Export a raster layer into a GRASS ASCII text file

r.out.ascii (grass7:r.out.ascii)

Export a raster layer into a GRASS ASCII text file


----------------
Input parameters
----------------

input: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

precision: Number of significant digits

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

width: Number of values printed before wrapping a line (only SURFER or MODFLOW format)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

null_value: String to represent null cell (GRASS grid only)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-s: Write SURFER (Golden Software) ASCII grid

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-m: Write MODFLOW (USGS) ASCII array

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Force output of integer values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: GRASS Ascii

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	GRASS Ascii"""
    return processing.run("grass7:r.out.ascii", params)

@mcp_server.tool()
def grass7_r_out_gridatb(params: dict) -> dict:
    """r.out.gridatb - Exports GRASS raster map to GRIDATB.FOR map file (TOPMODEL)

r.out.gridatb (grass7:r.out.gridatb)

Exports GRASS raster map to GRIDATB.FOR map file (TOPMODEL)


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: GRIDATB

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	GRIDATB"""
    return processing.run("grass7:r.out.gridatb", params)

@mcp_server.tool()
def grass7_r_out_mat(params: dict) -> dict:
    """r.out.mat - Exports a GRASS raster to a binary MAT-File

r.out.mat (grass7:r.out.mat)

Exports a GRASS raster to a binary MAT-File


----------------
Input parameters
----------------

input: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: MAT File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	MAT File"""
    return processing.run("grass7:r.out.mat", params)

@mcp_server.tool()
def grass7_r_out_mpeg(params: dict) -> dict:
    """r.out.mpeg - Converts raster map series to MPEG movie

r.out.mpeg (grass7:r.out.mpeg)

Converts raster map series to MPEG movie


----------------
Input parameters
----------------

view1: Name of input raster map(s) for view no.1

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

view2: Name of input raster map(s) for view no.2

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

view3: Name of input raster map(s) for view no.3

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

view4: Name of input raster map(s) for view no.4

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

quality: Quality factor (1 = highest quality, lowest compression)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: MPEG file

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	MPEG file"""
    return processing.run("grass7:r.out.mpeg", params)

@mcp_server.tool()
def grass7_r_out_png(params: dict) -> dict:
    """r.out.png - Export a GRASS raster map as a non-georeferenced PNG image

r.out.png (grass7:r.out.png)

Export a GRASS raster map as a non-georeferenced PNG image


----------------
Input parameters
----------------

input: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

compression: Compression level of PNG file (0 = none, 1 = fastest, 9 = best)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Make NULL cells transparent

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-w: Output world file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: PNG File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	PNG File"""
    return processing.run("grass7:r.out.png", params)

@mcp_server.tool()
def grass7_r_out_pov(params: dict) -> dict:
    """r.out.pov - Converts a raster map layer into a height-field file for POV-Ray

r.out.pov (grass7:r.out.pov)

Converts a raster map layer into a height-field file for POV-Ray


----------------
Input parameters
----------------

input: Input raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

hftype: Height-field type (0=actual heights 1=normalized)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

bias: Elevation bias

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

scale: Vertical scaling factor

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Name of output povray file (TGA height field file)

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Name of output povray file (TGA height field file)"""
    return processing.run("grass7:r.out.pov", params)

@mcp_server.tool()
def grass7_r_out_ppm(params: dict) -> dict:
    """r.out.ppm - Converts a raster layer to a PPM image file at the pixel resolution of the currently defined region.

r.out.ppm (grass7:r.out.ppm)

Converts a raster layer to a PPM image file at the pixel resolution of the currently defined region.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-g: Output greyscale instead of color

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: PPM

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	PPM"""
    return processing.run("grass7:r.out.ppm", params)

@mcp_server.tool()
def grass7_r_out_ppm3(params: dict) -> dict:
    """r.out.ppm3 - Converts 3 GRASS raster layers (R,G,B) to a PPM image file

r.out.ppm3 (grass7:r.out.ppm3)

Converts 3 GRASS raster layers (R,G,B) to a PPM image file


----------------
Input parameters
----------------

red: Name of raster map to be used for <red>

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

green: Name of raster map to be used for <green>

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

blue: Name of raster map to be used for <blue>

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-c: Add comments to describe the region

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Name for new PPM file

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Name for new PPM file"""
    return processing.run("grass7:r.out.ppm3", params)

@mcp_server.tool()
def grass7_r_out_vrml(params: dict) -> dict:
    """r.out.vrml - Export a raster layer to the Virtual Reality Modeling Language (VRML)

r.out.vrml (grass7:r.out.vrml)

Export a raster layer to the Virtual Reality Modeling Language (VRML)


----------------
Input parameters
----------------

elevation: Elevation layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

color: Color layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

exaggeration: Vertical exaggeration

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: VRML

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	VRML"""
    return processing.run("grass7:r.out.vrml", params)

@mcp_server.tool()
def grass7_r_out_vtk(params: dict) -> dict:
    """r.out.vtk - Converts raster maps into the VTK-ASCII format

r.out.vtk (grass7:r.out.vtk)

Converts raster maps into the VTK-ASCII format


----------------
Input parameters
----------------

input: Input raster

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

elevation: Input elevation raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

null: Value to represent no data cell

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

z: Constant elevation (if no elevation map is specified)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

rgbmaps: Three (r,g,b) raster maps to create RGB values

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

vectormaps: Three (x,y,z) raster maps to create vector values

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

zscale: Scale factor for elevation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

precision: Number of significant digits

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-p: Create VTK point data instead of VTK cell data

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Use structured grid for elevation (not recommended)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Use polydata-trianglestrips for elevation grid creation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-v: Use polydata-vertices for elevation grid creation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-o: Scale factor affects the origin (if no elevation map is given)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Correct the coordinates to match the VTK-OpenGL precision

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: VTK File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	VTK File"""
    return processing.run("grass7:r.out.vtk", params)

@mcp_server.tool()
def grass7_r_out_xyz(params: dict) -> dict:
    """r.out.xyz - Exports a raster map to a text file as x,y,z values based on cell centers

r.out.xyz (grass7:r.out.xyz)

Exports a raster map to a text file as x,y,z values based on cell centers


----------------
Input parameters
----------------

input: Input raster(s)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

separator: Field separator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-i: Include no data values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: XYZ File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	XYZ File"""
    return processing.run("grass7:r.out.xyz", params)

@mcp_server.tool()
def grass7_r_param_scale(params: dict) -> dict:
    """r.param.scale - Extracts terrain parameters from a DEM.

r.param.scale (grass7:r.param.scale)

Extracts terrain parameters from a DEM.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

slope_tolerance: Slope tolerance that defines a 'flat' surface (degrees)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

curvature_tolerance: Curvature tolerance that defines 'planar' surface

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

size: Size of processing window (odd number only, max: 69)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

method: Morphometric parameter in 'size' window to calculate

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: elev
		- 1: slope
		- 2: aspect
		- 3: profc
		- 4: planc
		- 5: longc
		- 6: crosc
		- 7: minic
		- 8: maxic
		- 9: feature

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

exponent: Exponent for distance weighting (0.0-4.0)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zscale: Vertical scaling factor

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-c: Constrain model through central window cell

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Morphometric parameter

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Morphometric parameter"""
    return processing.run("grass7:r.param.scale", params)

@mcp_server.tool()
def grass7_r_patch(params: dict) -> dict:
    """r.patch - Creates a composite raster layer by using one (or more) layer(s) to fill in areas of "no data" in another map layer.

r.patch (grass7:r.patch)

Creates a composite raster layer by using one (or more) layer(s) to fill in areas of "no data" in another map layer.


----------------
Input parameters
----------------

input: Raster layers to be patched together

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

-z: Use zero (0) for transparency instead of NULL

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Patched

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Patched"""
    return processing.run("grass7:r.patch", params)

@mcp_server.tool()
def grass7_r_path(params: dict) -> dict:
    """r.path - Traces paths from starting points following input directions.

r.path (grass7:r.path)

Traces paths from starting points following input directions.


----------------
Input parameters
----------------

input: Name of input direction

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

format: Format of the input direction map

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: degree
		- 2: 45degree
		- 3: bitmask

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

values: Name of input raster values to be used for output

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

raster_path: Name for output raster path map

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

vector_path: Name for output vector path map

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

start_points: Vector layer containing starting point(s)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

-c: Copy input cell values on output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Accumulate input values along the path

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Count cell numbers along the path

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

raster_path:  <QgsProcessingOutputRasterLayer>
	Name for output raster path map

vector_path:  <QgsProcessingOutputVectorLayer>
	Name for output vector path map"""
    return processing.run("grass7:r.path", params)

@mcp_server.tool()
def grass7_r_path_coordinate_txt(params: dict) -> dict:
    """r.path.coordinate.txt - r.path.coordinate.txt - Traces paths from starting points following input directions.

r.path.coordinate.txt (grass7:r.path.coordinate.txt)

r.path.coordinate.txt - Traces paths from starting points following input directions.


----------------
Input parameters
----------------

input: Name of input direction

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

format: Format of the input direction map

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: degree
		- 2: 45degree
		- 3: bitmask

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

values: Name of input raster values to be used for output

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

raster_path: Name for output raster path map

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

vector_path: Name for output vector path map

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

start_coordinates: Map coordinate of starting point (E,N)

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

-c: Copy input cell values on output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Accumulate input values along the path

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Count cell numbers along the path

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

raster_path:  <QgsProcessingOutputRasterLayer>
	Name for output raster path map

vector_path:  <QgsProcessingOutputVectorLayer>
	Name for output vector path map"""
    return processing.run("grass7:r.path.coordinate.txt", params)

@mcp_server.tool()
def grass7_r_plane(params: dict) -> dict:
    """r.plane - Creates raster plane layer given dip (inclination), aspect (azimuth) and one point.

r.plane (grass7:r.plane)

Creates raster plane layer given dip (inclination), aspect (azimuth) and one point.


----------------
Input parameters
----------------

dip: Dip of plane

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

azimuth: Azimuth of the plane

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

easting: Easting coordinate of a point on the plane

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

northing: Northing coordinate of a point on the plane

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

elevation: Elevation coordinate of a point on the plane

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

type: Data type of resulting layer

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: CELL
		- 1: FCELL
		- 2: DCELL

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Plane

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Plane"""
    return processing.run("grass7:r.plane", params)

@mcp_server.tool()
def grass7_r_profile(params: dict) -> dict:
    """r.profile - Outputs the raster layer values lying on user-defined line(s).

r.profile (grass7:r.profile)

Outputs the raster layer values lying on user-defined line(s).


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coordinates: Profile coordinate pairs

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

resolution: Resolution along profile

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

null_value: Character to represent no data cell

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

file: Name of input file containing coordinate pairs

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

-g: Output easting and northing in first two columns of four column output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Output RRR:GGG:BBB color values for each profile point

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Profile

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Profile"""
    return processing.run("grass7:r.profile", params)

@mcp_server.tool()
def grass7_r_proj(params: dict) -> dict:
    """r.proj - Re-projects a raster layer to another coordinate reference system

r.proj (grass7:r.proj)

Re-projects a raster layer to another coordinate reference system


----------------
Input parameters
----------------

input: Input raster to reproject

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

crs: New coordinate reference system

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

method: Interpolation method to use

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: nearest
		- 1: bilinear
		- 2: bicubic
		- 3: lanczos
		- 4: bilinear_f
		- 5: bicubic_f
		- 6: lanczos_f

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

memory: Maximum memory to be used (in MB)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

resolution: Resolution of output raster map

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-n: Do not perform region cropping optimization

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Reprojected raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Reprojected raster"""
    return processing.run("grass7:r.proj", params)

@mcp_server.tool()
def grass7_r_quant(params: dict) -> dict:
    """r.quant - Produces the quantization file for a floating-point map.

r.quant (grass7:r.quant)

Produces the quantization file for a floating-point map.


----------------
Input parameters
----------------

input: Raster layer(s) to be quantized

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

basemap: Base layer to take quant rules from

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

fprange: Floating point range: dmin,dmax

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

range: Integer range: min,max

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

-t: Truncate floating point data

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Round floating point data

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Quantized raster(s)

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Quantized raster(s)"""
    return processing.run("grass7:r.quant", params)

@mcp_server.tool()
def grass7_r_quantile(params: dict) -> dict:
    """r.quantile - Compute quantiles using two passes.

r.quantile (grass7:r.quantile)

Compute quantiles using two passes.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

quantiles: Number of quantiles

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

percentiles: List of percentiles

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

bins: Number of bins to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-r: Generate recode rules based on quantile-defined intervals

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

file: Quantiles

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

file:  <QgsProcessingOutputHtml>
	Quantiles"""
    return processing.run("grass7:r.quantile", params)

@mcp_server.tool()
def grass7_r_quantile_plain(params: dict) -> dict:
    """r.quantile.plain - r.quantile.plain - Compute quantiles using two passes and save them as plain text.

r.quantile.plain (grass7:r.quantile.plain)

r.quantile.plain - Compute quantiles using two passes and save them as plain text.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

quantiles: Number of quantiles

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

percentiles: List of percentiles

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

bins: Number of bins to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-r: Generate recode rules based on quantile-defined intervals

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

file: Quantiles

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

file:  <QgsProcessingOutputFile>
	Quantiles"""
    return processing.run("grass7:r.quantile.plain", params)

@mcp_server.tool()
def grass7_r_random(params: dict) -> dict:
    """r.random - Creates a raster layer and vector point map containing randomly located points.

r.random (grass7:r.random)

Creates a raster layer and vector point map containing randomly located points.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cover: Input cover raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

npoints: The number of points to allocate

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-z: Generate points also for NULL category

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: Generate vector points as 3D points

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Do not build topology

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

raster: Random raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

vector: Random vector

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

raster:  <QgsProcessingOutputRasterLayer>
	Random raster

vector:  <QgsProcessingOutputVectorLayer>
	Random vector"""
    return processing.run("grass7:r.random", params)

@mcp_server.tool()
def grass7_r_random_cells(params: dict) -> dict:
    """r.random.cells - Generates random cell values with spatial dependence.

r.random.cells (grass7:r.random.cells)

Generates random cell values with spatial dependence.


----------------
Input parameters
----------------

distance: Maximum distance of spatial correlation (value(s) >= 0.0)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ncells: Maximum number of cells to be created

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

seed: Random seed (SEED_MIN >= value >= SEED_MAX) (default [random])

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Random

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Random"""
    return processing.run("grass7:r.random.cells", params)

@mcp_server.tool()
def grass7_r_random_surface(params: dict) -> dict:
    """r.random.surface - Generates random surface(s) with spatial dependence.

r.random.surface (grass7:r.random.surface)

Generates random surface(s) with spatial dependence.


----------------
Input parameters
----------------

distance: Maximum distance of spatial correlation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

exponent: Distance decay exponent

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

flat: Distance filter remains flat before beginning exponent

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

seed: Random seed (SEED_MIN >= value >= SEED_MAX)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

high: Maximum cell value of distribution

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-u: Uniformly distributed cell values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Random_Surface

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Random_Surface"""
    return processing.run("grass7:r.random.surface", params)

@mcp_server.tool()
def grass7_r_reclass(params: dict) -> dict:
    """r.reclass - Creates a new map layer whose category values are based upon a reclassification of the categories in an existing raster map layer.

r.reclass (grass7:r.reclass)

Creates a new map layer whose category values are based upon a reclassification of the categories in an existing raster map layer.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

rules: File containing reclass rules

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

txtrules: Reclass rules text (if rule file not used)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output: Reclassified

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Reclassified"""
    return processing.run("grass7:r.reclass", params)

@mcp_server.tool()
def grass7_r_reclass_area(params: dict) -> dict:
    """r.reclass.area - Reclassifies a raster layer, greater or less than user specified area size (in hectares)

r.reclass.area (grass7:r.reclass.area)

Reclassifies a raster layer, greater or less than user specified area size (in hectares)


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

value: Value option that sets the area size limit [hectares]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

mode: Lesser or greater than specified value

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: lesser
		- 1: greater

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

method: Method used for reclassification

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: reclass
		- 1: rmarea

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-c: Input map is clumped

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: Clumps including diagonal neighbors

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Reclassified

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Reclassified"""
    return processing.run("grass7:r.reclass.area", params)

@mcp_server.tool()
def grass7_r_recode(params: dict) -> dict:
    """r.recode - Recodes categorical raster maps.

r.recode (grass7:r.recode)

Recodes categorical raster maps.


----------------
Input parameters
----------------

input: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

rules: File containing recode rules

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

-d: Force output to 'double' raster map type (DCELL)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Align the current region to the input raster map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Recoded

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Recoded"""
    return processing.run("grass7:r.recode", params)

@mcp_server.tool()
def grass7_r_regression_line(params: dict) -> dict:
    """r.regression.line - Calculates linear regression from two raster layers : y = a + b*x.

r.regression.line (grass7:r.regression.line)

Calculates linear regression from two raster layers : y = a + b*x.


----------------
Input parameters
----------------

mapx: Layer for x coefficient

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

mapy: Layer for y coefficient

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

html: Regression coefficients

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Regression coefficients"""
    return processing.run("grass7:r.regression.line", params)

@mcp_server.tool()
def grass7_r_regression_multi(params: dict) -> dict:
    """r.regression.multi - Calculates multiple linear regression from raster maps.

r.regression.multi (grass7:r.regression.multi)

Calculates multiple linear regression from raster maps.


----------------
Input parameters
----------------

mapx: Map(s) for x coefficient

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

mapy: Map for y coefficient

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

residuals: Residual Map

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

estimates: Estimates Map

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

html: Regression coefficients

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

residuals:  <QgsProcessingOutputRasterLayer>
	Residual Map

estimates:  <QgsProcessingOutputRasterLayer>
	Estimates Map

html:  <QgsProcessingOutputHtml>
	Regression coefficients"""
    return processing.run("grass7:r.regression.multi", params)

@mcp_server.tool()
def grass7_r_relief(params: dict) -> dict:
    """r.relief - Creates shaded relief from an elevation layer (DEM).

r.relief (grass7:r.relief)

Creates shaded relief from an elevation layer (DEM).


----------------
Input parameters
----------------

input: Input elevation layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

altitude: Altitude of the sun in degrees above the horizon

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

azimuth: Azimuth of the sun in degrees to the east of north

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zscale: Factor for exaggerating relief

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

scale: Scale factor for converting horizontal units to elevation units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

units: Elevation units (overrides scale factor)

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: intl
		- 1: survey

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Output shaded relief layer

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Output shaded relief layer"""
    return processing.run("grass7:r.relief", params)

@mcp_server.tool()
def grass7_r_relief_scaling(params: dict) -> dict:
    """r.relief.scaling - r.relief.scaling - Creates shaded relief from an elevation layer (DEM).

r.relief.scaling (grass7:r.relief.scaling)

r.relief.scaling - Creates shaded relief from an elevation layer (DEM).


----------------
Input parameters
----------------

input: Input elevation layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

altitude: Altitude of the sun in degrees above the horizon

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

azimuth: Azimuth of the sun in degrees to the east of north

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zscale: Factor for exaggerating relief

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

scale: Scale factor for converting horizontal units to elevation units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

units: Elevation units (overrides scale factor)

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: intl
		- 1: survey

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Output shaded relief layer

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Output shaded relief layer"""
    return processing.run("grass7:r.relief.scaling", params)

@mcp_server.tool()
def grass7_r_report(params: dict) -> dict:
    """r.report - Reports statistics for raster layers.

r.report (grass7:r.report)

Reports statistics for raster layers.


----------------
Input parameters
----------------

map: Raster layer(s) to report on

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

units: Units

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: mi
		- 1: me
		- 2: k
		- 3: a
		- 4: h
		- 5: c
		- 6: p

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

null_value: Character representing no data cell value

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

page_length: Page length

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

page_width: Page width

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

nsteps: Number of fp subranges to collect stats from

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

sort: Sort output statistics by cell counts

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: asc
		- 1: desc

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-h: Suppress page headers

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Use formfeeds between pages

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-e: Scientific format

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Do not report no data cells

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Do not report cells where all maps have no data

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Report for cats floating-point ranges (floating-point maps only)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Read floating-point map as integer (use map's quant rules)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Name for output file to hold the report

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Name for output file to hold the report"""
    return processing.run("grass7:r.report", params)

@mcp_server.tool()
def grass7_r_resamp_bspline(params: dict) -> dict:
    """r.resamp.bspline - Performs bilinear or bicubic spline interpolation with Tykhonov regularization.

r.resamp.bspline (grass7:r.resamp.bspline)

Performs bilinear or bicubic spline interpolation with Tykhonov regularization.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

mask: Name of raster map to use for masking. Only cells that are not NULL and not zero are interpolated

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Sampling interpolation method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: bilinear
		- 1: bicubic

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

ew_step: Length (float) of each spline step in the east-west direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ns_step: Length (float) of each spline step in the north-south direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

lambda: Tykhonov regularization parameter (affects smoothing)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used (in MB). Cache size for raster rows

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-n: Only interpolate null cells in input raster map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Find the best Tykhonov regularizing parameter using a "leave-one-out" cross validation method

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Resampled BSpline

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

grid: Interpolation Grid

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Resampled BSpline

grid:  <QgsProcessingOutputVectorLayer>
	Interpolation Grid"""
    return processing.run("grass7:r.resamp.bspline", params)

@mcp_server.tool()
def grass7_r_resamp_filter(params: dict) -> dict:
    """r.resamp.filter - Resamples raster map layers using an analytic kernel.

r.resamp.filter (grass7:r.resamp.filter)

Resamples raster map layers using an analytic kernel.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

filter: Filter kernel(s)

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: box
		- 1: bartlett
		- 2: gauss
		- 3: normal
		- 4: hermite
		- 5: sinc
		- 6: lanczos1
		- 7: lanczos2
		- 8: lanczos3
		- 9: hann
		- 10: hamming
		- 11: blackman

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

radius: Filter radius for each filter (comma separated list of float if multiple)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

x_radius: Filter radius (horizontal) for each filter (comma separated list of float if multiple)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

y_radius: Filter radius (vertical) for each filter (comma separated list of float if multiple)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-n: Propagate NULLs

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Resampled Filter

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Resampled Filter"""
    return processing.run("grass7:r.resamp.filter", params)

@mcp_server.tool()
def grass7_r_resamp_interp(params: dict) -> dict:
    """r.resamp.interp - Resamples raster map to a finer grid using interpolation.

r.resamp.interp (grass7:r.resamp.interp)

Resamples raster map to a finer grid using interpolation.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Sampling interpolation method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: nearest
		- 1: bilinear
		- 2: bicubic
		- 3: lanczos

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Resampled interpolated

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Resampled interpolated"""
    return processing.run("grass7:r.resamp.interp", params)

@mcp_server.tool()
def grass7_r_resamp_rst(params: dict) -> dict:
    """r.resamp.rst - Reinterpolates using regularized spline with tension and smoothing.

r.resamp.rst (grass7:r.resamp.rst)

Reinterpolates using regularized spline with tension and smoothing.


----------------
Input parameters
----------------

input: Raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

smooth: Input raster map containing smoothing

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

maskmap: Input raster map to be used as mask

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

ew_res: Desired east-west resolution

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ns_res: Desired north-south resolution

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

overlap: Rows/columns overlap for segmentation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zscale: Multiplier for z-values

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

tension: Spline tension value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

theta: Anisotropy angle (in degrees counterclockwise from East)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

scalex: Anisotropy scaling factor

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Use dnorm independent tension

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: Output partial derivatives instead of topographic parameters

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

elevation: Resampled RST

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

slope: Slope raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

aspect: Aspect raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

pcurvature: Profile curvature raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

tcurvature: Tangential curvature raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

mcurvature: Mean curvature raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

elevation:  <QgsProcessingOutputRasterLayer>
	Resampled RST

slope:  <QgsProcessingOutputRasterLayer>
	Slope raster

aspect:  <QgsProcessingOutputRasterLayer>
	Aspect raster

pcurvature:  <QgsProcessingOutputRasterLayer>
	Profile curvature raster

tcurvature:  <QgsProcessingOutputRasterLayer>
	Tangential curvature raster

mcurvature:  <QgsProcessingOutputRasterLayer>
	Mean curvature raster"""
    return processing.run("grass7:r.resamp.rst", params)

@mcp_server.tool()
def grass7_r_resamp_stats(params: dict) -> dict:
    """r.resamp.stats - Resamples raster layers to a coarser grid using aggregation.

r.resamp.stats (grass7:r.resamp.stats)

Resamples raster layers to a coarser grid using aggregation.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Aggregation method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: average
		- 1: median
		- 2: mode
		- 3: minimum
		- 4: maximum
		- 5: quart1
		- 6: quart3
		- 7: perc90
		- 8: sum
		- 9: variance
		- 10: stddev
		- 11: quantile

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

quantile: Quantile to calculate for method=quantile

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-n: Propagate NULLs

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-w: Weight according to area (slower)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Resampled aggregated

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Resampled aggregated"""
    return processing.run("grass7:r.resamp.stats", params)

@mcp_server.tool()
def grass7_r_resample(params: dict) -> dict:
    """r.resample - GRASS raster map layer data resampling capability using nearest neighbors.

r.resample (grass7:r.resample)

GRASS raster map layer data resampling capability using nearest neighbors.


----------------
Input parameters
----------------

input: Input raster layer 

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: Resampled NN

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Resampled NN"""
    return processing.run("grass7:r.resample", params)

@mcp_server.tool()
def grass7_r_rescale(params: dict) -> dict:
    """r.rescale - Rescales the range of category values in a raster layer.

r.rescale (grass7:r.rescale)

Rescales the range of category values in a raster layer.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

from: The input data range to be rescaled

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

to: The output data range

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

output: Rescaled

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Rescaled"""
    return processing.run("grass7:r.rescale", params)

@mcp_server.tool()
def grass7_r_rescale_eq(params: dict) -> dict:
    """r.rescale.eq - Rescales histogram equalized the range of category values in a raster  layer.

r.rescale.eq (grass7:r.rescale.eq)

Rescales histogram equalized the range of category values in a raster  layer.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

from: The input data range to be rescaled

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

to: The output data range

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

output: Rescaled equalized

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Rescaled equalized"""
    return processing.run("grass7:r.rescale.eq", params)

@mcp_server.tool()
def grass7_r_rgb(params: dict) -> dict:
    """r.rgb - Splits a raster map into red, green and blue maps.

r.rgb (grass7:r.rgb)

Splits a raster map into red, green and blue maps.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

red: Red

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

green: Green

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

blue: Blue

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

red:  <QgsProcessingOutputRasterLayer>
	Red

green:  <QgsProcessingOutputRasterLayer>
	Green

blue:  <QgsProcessingOutputRasterLayer>
	Blue"""
    return processing.run("grass7:r.rgb", params)

@mcp_server.tool()
def grass7_r_ros(params: dict) -> dict:
    """r.ros - Generates rate of spread raster maps.

r.ros (grass7:r.ros)

Generates rate of spread raster maps.


----------------
Input parameters
----------------

model: Raster map containing fuel models

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

moisture_1h: Raster map containing the 1-hour fuel moisture (%)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

moisture_10h: Raster map containing the 10-hour fuel moisture (%)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

moisture_100h: Raster map containing the 100-hour fuel moisture (%)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

moisture_live: Raster map containing live fuel moisture (%)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

velocity: Raster map containing midflame wind velocities (ft/min)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

direction: Name of raster map containing wind directions (degree)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

slope: Name of raster map containing slope (degree)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

aspect: Raster map containing aspect (degree, CCW from E)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

elevation: Raster map containing elevation (m, required for spotting)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

base_ros: Base ROS

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

max_ros: Max ROS

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

direction_ros: Direction ROS

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

spotting_distance: Spotting Distance

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

base_ros:  <QgsProcessingOutputRasterLayer>
	Base ROS

max_ros:  <QgsProcessingOutputRasterLayer>
	Max ROS

direction_ros:  <QgsProcessingOutputRasterLayer>
	Direction ROS

spotting_distance:  <QgsProcessingOutputRasterLayer>
	Spotting Distance"""
    return processing.run("grass7:r.ros", params)

@mcp_server.tool()
def grass7_r_series(params: dict) -> dict:
    """r.series - Makes each output cell value a function of the values assigned to the corresponding cells in the input raster layers. Input rasters layers/bands must be separated in different data sources.

r.series (grass7:r.series)

Makes each output cell value a function of the values assigned to the corresponding cells in the input raster layers. Input rasters layers/bands must be separated in different data sources.


----------------
Input parameters
----------------

input: Input raster layer(s)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

-n: Propagate NULLs

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

method: Aggregate operation

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: average
		- 1: count
		- 2: median
		- 3: mode
		- 4: minimum
		- 5: min_raster
		- 6: maximum
		- 7: max_raster
		- 8: stddev
		- 9: range
		- 10: sum
		- 11: variance
		- 12: diversity
		- 13: slope
		- 14: offset
		- 15: detcoeff
		- 16: quart1
		- 17: quart3
		- 18: perc90
		- 19: skewness
		- 20: kurtosis
		- 21: quantile
		- 22: tvalue

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

quantile: Quantile to calculate for method=quantile

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

weights: Weighting factor for each input map, default value is 1.0

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

range: Ignore values outside this range (lo,hi)

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

output: Aggregated

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Aggregated"""
    return processing.run("grass7:r.series", params)

@mcp_server.tool()
def grass7_r_series_accumulate(params: dict) -> dict:
    """r.series.accumulate - Makes each output cell value an accumulation function of the values assigned to the corresponding cells in the input raster map layers.

r.series.accumulate (grass7:r.series.accumulate)

Makes each output cell value an accumulation function of the values assigned to the corresponding cells in the input raster map layers.


----------------
Input parameters
----------------

input: Input raster layer(s)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

lower: Raster map specifying the lower accumulation limit

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

upper: Raster map specifying the upper accumulation limit

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: This method will be applied to compute the accumulative values from the input maps

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: gdd
		- 1: bedd
		- 2: huglin
		- 3: mean

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

scale: Scale factor for input

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

shift: Shift factor for input

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

range: Ignore values outside this range (min,max)

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

limits: Lower and upper accumulation limits (lower,upper)

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

-n: Propagate NULLs

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Create a FCELL map (floating point single precision) as output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Accumulated

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Accumulated"""
    return processing.run("grass7:r.series.accumulate", params)

@mcp_server.tool()
def grass7_r_series_interp(params: dict) -> dict:
    """r.series.interp - Interpolates raster maps located (temporal or spatial) in between input raster maps at specific sampling positions.

r.series.interp (grass7:r.series.interp)

Interpolates raster maps located (temporal or spatial) in between input raster maps at specific sampling positions.


----------------
Input parameters
----------------

input: Input raster layer(s)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

datapos: Data point position for each input map

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

infile: Input file with one input raster map name and data point position per line, field separator between name and sample point is 'pipe'

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Name for output raster map (comma separated list if multiple)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

samplingpos: Sampling point position for each output map (comma separated list)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

outfile: Input file with one output raster map name and sample point position per line, field separator between name and sample point is 'pipe'

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

method: Interpolation method, currently only linear interpolation is supported

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: linear

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output_dir: Interpolated rasters

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output_dir:  <QgsProcessingOutputFolder>
	Interpolated rasters"""
    return processing.run("grass7:r.series.interp", params)

@mcp_server.tool()
def grass7_r_shade(params: dict) -> dict:
    """r.shade - Drapes a color raster over an shaded relief or aspect map.

r.shade (grass7:r.shade)

Drapes a color raster over an shaded relief or aspect map.


----------------
Input parameters
----------------

shade: Name of shaded relief or aspect raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

color: Name of raster to drape over relief raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

brighten: Percent to brighten

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

bgcolor: Color to use instead of NULL values. Either a standard color name, R:G:B triplet, or "none"

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-c: Use colors from color tables for NULL values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Shaded

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Shaded"""
    return processing.run("grass7:r.shade", params)

@mcp_server.tool()
def grass7_r_sim_sediment(params: dict) -> dict:
    """r.sim.sediment - Sediment transport and erosion/deposition simulation using path sampling method (SIMWE).

r.sim.sediment (grass7:r.sim.sediment)

Sediment transport and erosion/deposition simulation using path sampling method (SIMWE).


----------------
Input parameters
----------------

elevation: Name of the elevation raster map [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

water_depth: Name of the water depth raster map [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

dx: Name of the x-derivatives raster map [m/m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

dy: Name of the y-derivatives raster map [m/m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

detachment_coeff: Name of the detachment capacity coefficient raster map [s/m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

transport_coeff: Name of the transport capacity coefficient raster map [s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

shear_stress: Name of the critical shear stress raster map [Pa]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

man: Name of the Mannings n raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

man_value: Name of the Mannings n value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

observation: Sampling locations vector points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

nwalkers: Number of walkers

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

niterations: Time used for iterations [minutes]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output_step: Time interval for creating output maps [minutes]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

diffusion_coeff: Water diffusion constant

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

transport_capacity: Transport capacity [kg/ms]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

tlimit_erosion_deposition: Transport limited erosion-deposition [kg/m2s]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

sediment_concentration: Sediment concentration [particle/m3]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

sediment_flux: Sediment flux [kg/ms]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

erosion_deposition: Erosion-deposition [kg/m2s]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

walkers_output: Name of the output walkers vector points layer

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

logfile: Name for sampling points output text file.

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

transport_capacity:  <QgsProcessingOutputRasterLayer>
	Transport capacity [kg/ms]

tlimit_erosion_deposition:  <QgsProcessingOutputRasterLayer>
	Transport limited erosion-deposition [kg/m2s]

sediment_concentration:  <QgsProcessingOutputRasterLayer>
	Sediment concentration [particle/m3]

sediment_flux:  <QgsProcessingOutputRasterLayer>
	Sediment flux [kg/ms]

erosion_deposition:  <QgsProcessingOutputRasterLayer>
	Erosion-deposition [kg/m2s]

walkers_output:  <QgsProcessingOutputVectorLayer>
	Name of the output walkers vector points layer

logfile:  <QgsProcessingOutputFile>
	Name for sampling points output text file."""
    return processing.run("grass7:r.sim.sediment", params)

@mcp_server.tool()
def grass7_r_sim_water(params: dict) -> dict:
    """r.sim.water - Overland flow hydrologic simulation using path sampling method (SIMWE).

r.sim.water (grass7:r.sim.water)

Overland flow hydrologic simulation using path sampling method (SIMWE).


----------------
Input parameters
----------------

elevation: Name of the elevation raster map [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

dx: Name of the x-derivatives raster map [m/m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

dy: Name of the y-derivatives raster map [m/m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

rain: Name of the rainfall excess rate (rain-infilt) raster map [mm/hr]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

rain_value: Rainfall excess rate unique value [mm/hr]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

infil: Name of the runoff infiltration rate raster map [mm/hr]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

infil_value: Runoff infiltration rate unique value [mm/hr]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

man: Name of the Mannings n raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

man_value: Manning's n unique value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

flow_control: Name of the flow controls raster map (permeability ratio 0-1)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

observation: Sampling locations vector points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

nwalkers: Number of walkers, default is twice the number of cells

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

niterations: Time used for iterations [minutes]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output_step: Time interval for creating output maps [minutes]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

diffusion_coeff: Water diffusion constant

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

hmax: Threshold water depth [m]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

halpha: Diffusion increase constant

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

hbeta: Weighting factor for water flow velocity vector

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Time-series output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

depth: Water depth [m]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

discharge: Water discharge [m3/s]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

error: Simulation error [m]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

walkers_output: Name of the output walkers vector points layer

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

logfile: Name for sampling points output text file.

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

depth:  <QgsProcessingOutputRasterLayer>
	Water depth [m]

discharge:  <QgsProcessingOutputRasterLayer>
	Water discharge [m3/s]

error:  <QgsProcessingOutputRasterLayer>
	Simulation error [m]

walkers_output:  <QgsProcessingOutputVectorLayer>
	Name of the output walkers vector points layer

logfile:  <QgsProcessingOutputFile>
	Name for sampling points output text file."""
    return processing.run("grass7:r.sim.water", params)

@mcp_server.tool()
def grass7_r_slope_aspect(params: dict) -> dict:
    """r.slope.aspect - Generates raster layers of slope, aspect, curvatures and partial derivatives from a elevation raster layer.

r.slope.aspect (grass7:r.slope.aspect)

Generates raster layers of slope, aspect, curvatures and partial derivatives from a elevation raster layer.


----------------
Input parameters
----------------

elevation: Elevation

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

format: Format for reporting the slope

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: degrees
		- 1: percent

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

precision: Type of output aspect and slope layer

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: FCELL
		- 1: CELL
		- 2: DCELL

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-a: Do not align the current region to the elevation layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-e: Compute output at edges and near NULL values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Create aspect as degrees clockwise from North (azimuth), with flat = -9999

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

zscale: Multiplicative factor to convert elevation units to meters

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

min_slope: Minimum slope val. (in percent) for which aspect is computed

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

slope: Slope

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

aspect: Aspect

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

pcurvature: Profile curvature

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

tcurvature: Tangential curvature

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

dx: First order partial derivative dx (E-W slope)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

dy: First order partial derivative dy (N-S slope)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

dxx: Second order partial derivative dxx

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

dyy: Second order partial derivative dyy

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

dxy: Second order partial derivative dxy

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

slope:  <QgsProcessingOutputRasterLayer>
	Slope

aspect:  <QgsProcessingOutputRasterLayer>
	Aspect

pcurvature:  <QgsProcessingOutputRasterLayer>
	Profile curvature

tcurvature:  <QgsProcessingOutputRasterLayer>
	Tangential curvature

dx:  <QgsProcessingOutputRasterLayer>
	First order partial derivative dx (E-W slope)

dy:  <QgsProcessingOutputRasterLayer>
	First order partial derivative dy (N-S slope)

dxx:  <QgsProcessingOutputRasterLayer>
	Second order partial derivative dxx

dyy:  <QgsProcessingOutputRasterLayer>
	Second order partial derivative dyy

dxy:  <QgsProcessingOutputRasterLayer>
	Second order partial derivative dxy"""
    return processing.run("grass7:r.slope.aspect", params)

@mcp_server.tool()
def grass7_r_solute_transport(params: dict) -> dict:
    """r.solute.transport - Numerical calculation program for transient, confined and unconfined solute transport in two dimensions

r.solute.transport (grass7:r.solute.transport)

Numerical calculation program for transient, confined and unconfined solute transport in two dimensions


----------------
Input parameters
----------------

c: The initial concentration in [kg/m^3]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

phead: The piezometric head in [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

hc_x: The x-part of the hydraulic conductivity tensor in [m/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

hc_y: The y-part of the hydraulic conductivity tensor in [m/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

status: The status for each cell, = 0 - inactive cell, 1 - active cell, 2 - dirichlet- and 3 - transfer boundary condition

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

diff_x: The x-part of the diffusion tensor in [m^2/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

diff_y: The y-part of the diffusion tensor in [m^2/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

q: Groundwater sources and sinks in [m^3/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cin: Concentration sources and sinks bounded to a water source or sink in [kg/s]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cs: Concentration of inner sources and inner sinks in [kg/s] (i.e. a chemical reaction)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

rd: Retardation factor [-]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

nf: Effective porosity [-]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

top: Top surface of the aquifer in [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

bottom: Bottom surface of the aquifer in [m]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

dtime: Calculation time (in seconds)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

maxit: Maximum number of iteration used to solve the linear equation system

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

error: Error break criteria for iterative solver

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

solver: The type of solver which should solve the linear equation system

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: gauss
		- 1: lu
		- 2: jacobi
		- 3: sor
		- 4: bicgstab

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

relax: The relaxation parameter used by the jacobi and sor solver for speedup or stabilizing

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

al: The longitudinal dispersivity length. [m]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

at: The transversal dispersivity length. [m]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

loops: Use this number of time loops if the CFL flag is off. The timestep will become dt/loops.

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

stab: Set the flow stabilizing scheme (full or exponential upwinding).

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: full
		- 1: exp

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-c: Use the Courant-Friedrichs-Lewy criteria for time step calculation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Use a full filled quadratic linear equation system, default is a sparse linear equation system.

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Solute Transport

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

vx: Calculate and store the groundwater filter velocity vector part in x direction [m/s]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

vy: Calculate and store the groundwater filter velocity vector part in y direction [m/s]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Solute Transport

vx:  <QgsProcessingOutputRasterLayer>
	Calculate and store the groundwater filter velocity vector part in x direction [m/s]

vy:  <QgsProcessingOutputRasterLayer>
	Calculate and store the groundwater filter velocity vector part in y direction [m/s]"""
    return processing.run("grass7:r.solute.transport", params)

@mcp_server.tool()
def grass7_r_spread(params: dict) -> dict:
    """r.spread - Simulates elliptically anisotropic spread.

r.spread (grass7:r.spread)

Simulates elliptically anisotropic spread.


----------------
Input parameters
----------------

base_ros: Raster map containing base ROS (cm/min)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

max_ros: Raster map containing maximal ROS (cm/min)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

direction_ros: Raster map containing directions of maximal ROS (degree)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

start: Raster map containing starting sources

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

spotting_distance: Raster map containing maximal spotting distance (m, required with -s)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

wind_speed: Raster map containing midflame wind speed (ft/min, required with -s)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

fuel_moisture: Raster map containing fine fuel moisture of the cell receiving a spotting firebrand (%, required with -s)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

backdrop: Name of raster map as a display backdrop

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

least_size: Basic sampling window size needed to meet certain accuracy (3)

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: 3
		- 1: 5
		- 2: 7
		- 3: 9
		- 4: 11
		- 5: 13
		- 6: 15

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

comp_dens: Sampling density for additional computing (range: 0.0 - 1.0 (0.5))

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

init_time: Initial time for current simulation (0) (min)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

lag: Simulating time duration LAG (fill the region) (min)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-s: Consider spotting effect (for wildfires)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Use start raster map values in output spread time raster map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Spread Time

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

x_output: X Back Coordinates

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

y_output: Y Back Coordinates

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Spread Time

x_output:  <QgsProcessingOutputRasterLayer>
	X Back Coordinates

y_output:  <QgsProcessingOutputRasterLayer>
	Y Back Coordinates"""
    return processing.run("grass7:r.spread", params)

@mcp_server.tool()
def grass7_r_spreadpath(params: dict) -> dict:
    """r.spreadpath - Recursively traces the least cost path backwards to cells from which the cumulative cost was determined.

r.spreadpath (grass7:r.spreadpath)

Recursively traces the least cost path backwards to cells from which the cumulative cost was determined.


----------------
Input parameters
----------------

x_input: x_input

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

y_input: y_input

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coordinates: coordinate

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

output: Backward least cost

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Backward least cost"""
    return processing.run("grass7:r.spreadpath", params)

@mcp_server.tool()
def grass7_r_statistics(params: dict) -> dict:
    """r.statistics - Calculates category or object oriented statistics.

r.statistics (grass7:r.statistics)

Calculates category or object oriented statistics.


----------------
Input parameters
----------------

base: Base raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cover: Cover raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: diversity
		- 1: average
		- 2: mode
		- 3: median
		- 4: avedev
		- 5: stddev
		- 6: variance
		- 7: skewness
		- 8: kurtosis
		- 9: min
		- 10: max
		- 11: sum

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-c: Cover values extracted from the category labels of the cover map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

routput: Statistics

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

routput:  <QgsProcessingOutputRasterLayer>
	Statistics"""
    return processing.run("grass7:r.statistics", params)

@mcp_server.tool()
def grass7_r_stats(params: dict) -> dict:
    """r.stats - Generates area statistics for raster layers.

r.stats (grass7:r.stats)

Generates area statistics for raster layers.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

separator: Output field separator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

null_value: String representing no data cell value

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

nsteps: Number of floating-point subranges to collect stats from

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

sort: Sort output statistics by cell counts

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: asc
		- 1: desc

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-1: One cell (range) per line

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-A: Print averaged values instead of intervals

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Print area totals

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Print cell counts

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-p: Print APPROXIMATE percents (total percent may not be 100%)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-l: Print category labels

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-g: Print grid coordinates (east and north)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-x: Print x and y (column and row)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Print raw indexes of fp ranges (fp maps only)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Suppress reporting of any NULLs

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-N: Suppress reporting of NULLs when all values are NULL

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-C: Report for cats fp ranges (fp maps only)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Read fp map as integer (use map's quant rules)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Statistics

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Statistics"""
    return processing.run("grass7:r.stats", params)

@mcp_server.tool()
def grass7_r_stats_quantile_out(params: dict) -> dict:
    """r.stats.quantile.out - r.stats.quantile.out - Compute category quantiles using two passes and output statistics

r.stats.quantile.out (grass7:r.stats.quantile.out)

r.stats.quantile.out - Compute category quantiles using two passes and output statistics


----------------
Input parameters
----------------

base: Name of base raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cover: Name of cover raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

quantiles: Number of quantiles

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

percentiles: List of percentiles

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

bins: Number of bins to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-r: Create reclass map with statistics as category labels

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

file: Statistics File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

file:  <QgsProcessingOutputFile>
	Statistics File"""
    return processing.run("grass7:r.stats.quantile.out", params)

@mcp_server.tool()
def grass7_r_stats_quantile_rast(params: dict) -> dict:
    """r.stats.quantile.rast - r.stats.quantile.rast - Compute category quantiles using two passes and output rasters.

r.stats.quantile.rast (grass7:r.stats.quantile.rast)

r.stats.quantile.rast - Compute category quantiles using two passes and output rasters.


----------------
Input parameters
----------------

base: Name of base raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cover: Name of cover raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

quantiles: Number of quantiles

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

percentiles: List of percentiles

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

bins: Number of bins to use

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-r: Create reclass map with statistics as category labels

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Output Directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Output Directory"""
    return processing.run("grass7:r.stats.quantile.rast", params)

@mcp_server.tool()
def grass7_r_stats_zonal(params: dict) -> dict:
    """r.stats.zonal - Calculates category or object oriented statistics (accumulator-based statistics)

r.stats.zonal (grass7:r.stats.zonal)

Calculates category or object oriented statistics (accumulator-based statistics)


----------------
Input parameters
----------------

base: Base raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

cover: Cover raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Method of object-based statistic

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: count
		- 1: sum
		- 2: min
		- 3: max
		- 4: range
		- 5: average
		- 6: avedev
		- 7: variance
		- 8: stddev
		- 9: skewness
		- 10: kurtosis
		- 11: variance2
		- 12: stddev2
		- 13: skewness2
		- 14: kurtosis2

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-c: Cover values extracted from the category labels of the cover map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Create reclass map with statistics as category labels

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Resultant raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Resultant raster"""
    return processing.run("grass7:r.stats.zonal", params)

@mcp_server.tool()
def grass7_r_stream_extract(params: dict) -> dict:
    """r.stream.extract - Stream network extraction

r.stream.extract (grass7:r.stream.extract)

Stream network extraction


----------------
Input parameters
----------------

elevation: Input map: elevation map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

accumulation: Input map: accumulation map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

depression: Input map: map with real depressions

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

threshold: Minimum flow accumulation for streams

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

mexp: Montgomery exponent for slope

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

stream_length: Delete stream segments shorter than cells

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

d8cut: Use SFD above this threshold

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used (in MB)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

stream_raster: Unique stream ids (rast)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

stream_vector: Unique stream ids (vect)

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

direction: Flow direction

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

stream_raster:  <QgsProcessingOutputRasterLayer>
	Unique stream ids (rast)

stream_vector:  <QgsProcessingOutputVectorLayer>
	Unique stream ids (vect)

direction:  <QgsProcessingOutputRasterLayer>
	Flow direction"""
    return processing.run("grass7:r.stream.extract", params)

@mcp_server.tool()
def grass7_r_sun_incidout(params: dict) -> dict:
    """r.sun.incidout - r.sun.incidout - Solar irradiance and irradiation model ( for the set local time).

r.sun.incidout (grass7:r.sun.incidout)

r.sun.incidout - Solar irradiance and irradiation model ( for the set local time).


----------------
Input parameters
----------------

elevation: Elevation layer [meters]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

aspect: Aspect layer [decimal degrees]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

aspect_value: A single value of the orientation (aspect), 270 is south

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

slope: Name of the input slope raster map (terrain slope or solar panel inclination) [decimal degrees]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

slope_value: A single value of inclination (slope)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

linke: Name of the Linke atmospheric turbidity coefficient input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

albedo: Name of the ground albedo coefficient input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

albedo_value: A single value of the ground albedo coefficient

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

lat: Name of input raster map containing latitudes [decimal degrees]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

long: Name of input raster map containing longitudes [decimal degrees]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coeff_bh: Name of real-sky beam radiation coefficient input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coeff_dh: Name of real-sky diffuse radiation coefficient input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

horizon_basemap: The horizon information input map basename

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

horizon_step: Angle step size for multidirectional horizon [degrees]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

day: No. of day of the year (1-365)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

step: Time step when computing all-day radiation sums [decimal hours]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

declination: Declination value (overriding the internally computed value) [radians]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

distance_step: Sampling distance step coefficient (0.5-1.5)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

npartitions: Read the input files in this number of chunks

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

civil_time: Civil time zone value, if none, the time will be local solar time

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

time: Local (solar) time (decimal hours)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-p: Do not incorporate the shadowing effect of terrain

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-m: Use the low-memory version of the program

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

incidout: incidence angle raster map

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

beam_rad: Beam irradiance [W.m-2]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

diff_rad: Diffuse irradiance [W.m-2]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

refl_rad: Ground reflected irradiance [W.m-2]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

glob_rad: Global (total) irradiance/irradiation [W.m-2]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

incidout:  <QgsProcessingOutputRasterLayer>
	incidence angle raster map

beam_rad:  <QgsProcessingOutputRasterLayer>
	Beam irradiance [W.m-2]

diff_rad:  <QgsProcessingOutputRasterLayer>
	Diffuse irradiance [W.m-2]

refl_rad:  <QgsProcessingOutputRasterLayer>
	Ground reflected irradiance [W.m-2]

glob_rad:  <QgsProcessingOutputRasterLayer>
	Global (total) irradiance/irradiation [W.m-2]"""
    return processing.run("grass7:r.sun.incidout", params)

@mcp_server.tool()
def grass7_r_sun_insoltime(params: dict) -> dict:
    """r.sun.insoltime - r.sun.insoltime - Solar irradiance and irradiation model (daily sums).

r.sun.insoltime (grass7:r.sun.insoltime)

r.sun.insoltime - Solar irradiance and irradiation model (daily sums).


----------------
Input parameters
----------------

elevation: Elevation layer [meters]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

aspect: Aspect layer [decimal degrees]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

aspect_value: A single value of the orientation (aspect), 270 is south

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

slope: Name of the input slope raster map (terrain slope or solar panel inclination) [decimal degrees]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

slope_value: A single value of inclination (slope)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

linke: Name of the Linke atmospheric turbidity coefficient input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

albedo: Name of the ground albedo coefficient input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

albedo_value: A single value of the ground albedo coefficient

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

lat: Name of input raster map containing latitudes [decimal degrees]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

long: Name of input raster map containing longitudes [decimal degrees]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coeff_bh: Name of real-sky beam radiation coefficient input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coeff_dh: Name of real-sky diffuse radiation coefficient input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

horizon_basemap: The horizon information input map basename

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

horizon_step: Angle step size for multidirectional horizon [degrees]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

day: No. of day of the year (1-365)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

step: Time step when computing all-day radiation sums [decimal hours]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

declination: Declination value (overriding the internally computed value) [radians]

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

distance_step: Sampling distance step coefficient (0.5-1.5)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

npartitions: Read the input files in this number of chunks

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

civil_time: Civil time zone value, if none, the time will be local solar time

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-p: Do not incorporate the shadowing effect of terrain

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-m: Use the low-memory version of the program

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

insol_time: Insolation time [h] 

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

beam_rad: Irradiation raster map [Wh.m-2.day-1]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

diff_rad: Irradiation raster map [Wh.m-2.day-1]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

refl_rad: Irradiation raster map [Wh.m-2.day-1]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

glob_rad: Irradiance/irradiation raster map [Wh.m-2.day-1]

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

insol_time:  <QgsProcessingOutputRasterLayer>
	Insolation time [h] 

beam_rad:  <QgsProcessingOutputRasterLayer>
	Irradiation raster map [Wh.m-2.day-1]

diff_rad:  <QgsProcessingOutputRasterLayer>
	Irradiation raster map [Wh.m-2.day-1]

refl_rad:  <QgsProcessingOutputRasterLayer>
	Irradiation raster map [Wh.m-2.day-1]

glob_rad:  <QgsProcessingOutputRasterLayer>
	Irradiance/irradiation raster map [Wh.m-2.day-1]"""
    return processing.run("grass7:r.sun.insoltime", params)

@mcp_server.tool()
def grass7_r_sunhours(params: dict) -> dict:
    """r.sunhours - Calculates solar elevation, solar azimuth, and sun hours.

r.sunhours (grass7:r.sunhours)

Calculates solar elevation, solar azimuth, and sun hours.


----------------
Input parameters
----------------

year: Year

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

month: Month

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

day: Day

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

hour: Hour

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

minute: Minutes

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

second: Seconds

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Time is local sidereal time, not Greenwich standard time

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Do not use SOLPOS algorithm of NREL

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

elevation: Solar Elevation Angle

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

azimuth: Solar Azimuth Angle

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

sunhour: Sunshine Hours

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

elevation:  <QgsProcessingOutputRasterLayer>
	Solar Elevation Angle

azimuth:  <QgsProcessingOutputRasterLayer>
	Solar Azimuth Angle

sunhour:  <QgsProcessingOutputRasterLayer>
	Sunshine Hours"""
    return processing.run("grass7:r.sunhours", params)

@mcp_server.tool()
def grass7_r_sunmask_datetime(params: dict) -> dict:
    """r.sunmask.datetime - r.sunmask.datetime - Calculates cast shadow areas from sun position and elevation raster map.

r.sunmask.datetime (grass7:r.sunmask.datetime)

r.sunmask.datetime - Calculates cast shadow areas from sun position and elevation raster map.


----------------
Input parameters
----------------

elevation: Elevation raster layer [meters]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

year: year

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

month: month

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

day: day

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

hour: hour

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

minute: minute

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

second: second

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

timezone: East positive, offset from GMT

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

east: Easting coordinate (point of interest)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

north: Northing coordinate (point of interest)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-z: Do not ignore zero elevation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Calculate sun position only and exit

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Shadows

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Shadows"""
    return processing.run("grass7:r.sunmask.datetime", params)

@mcp_server.tool()
def grass7_r_sunmask_position(params: dict) -> dict:
    """r.sunmask.position - r.sunmask.position - Calculates cast shadow areas from sun position and elevation raster map.

r.sunmask.position (grass7:r.sunmask.position)

r.sunmask.position - Calculates cast shadow areas from sun position and elevation raster map.


----------------
Input parameters
----------------

elevation: Elevation raster layer [meters]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

altitude: Altitude of the sun in degrees above the horizon

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

azimuth: Azimuth of the sun in degrees from north

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

east: Easting coordinate (point of interest)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

north: Northing coordinate (point of interest)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-z: Do not ignore zero elevation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Calculate sun position only and exit

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Shadows

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Shadows"""
    return processing.run("grass7:r.sunmask.position", params)

@mcp_server.tool()
def grass7_r_surf_area(params: dict) -> dict:
    """r.surf.area - Surface area estimation for rasters.

r.surf.area (grass7:r.surf.area)

Surface area estimation for rasters.


----------------
Input parameters
----------------

map: Input layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

vscale: Vertical scale

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

units: Units

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: miles
		- 1: feet
		- 2: meters
		- 3: kilometers
		- 4: acres
		- 5: hectares

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

html: Area

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Area"""
    return processing.run("grass7:r.surf.area", params)

@mcp_server.tool()
def grass7_r_surf_contour(params: dict) -> dict:
    """r.surf.contour - Surface generation program from rasterized contours.

r.surf.contour (grass7:r.surf.contour)

Surface generation program from rasterized contours.


----------------
Input parameters
----------------

input: Raster layer with rasterized contours

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: DTM from contours

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	DTM from contours"""
    return processing.run("grass7:r.surf.contour", params)

@mcp_server.tool()
def grass7_r_surf_fractal(params: dict) -> dict:
    """r.surf.fractal - Creates a fractal surface of a given fractal dimension.

r.surf.fractal (grass7:r.surf.fractal)

Creates a fractal surface of a given fractal dimension.


----------------
Input parameters
----------------

dimension: Fractal dimension of surface (2 < D < 3)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

number: Number of intermediate images to produce

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Fractal Surface

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Fractal Surface"""
    return processing.run("grass7:r.surf.fractal", params)

@mcp_server.tool()
def grass7_r_surf_gauss(params: dict) -> dict:
    """r.surf.gauss - Creates a raster layer of Gaussian deviates.

r.surf.gauss (grass7:r.surf.gauss)

Creates a raster layer of Gaussian deviates.


----------------
Input parameters
----------------

mean: Distribution mean

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

sigma: Standard deviation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Gaussian deviates

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Gaussian deviates"""
    return processing.run("grass7:r.surf.gauss", params)

@mcp_server.tool()
def grass7_r_surf_idw(params: dict) -> dict:
    """r.surf.idw - Surface interpolation utility for raster layers.

r.surf.idw (grass7:r.surf.idw)

Surface interpolation utility for raster layers.


----------------
Input parameters
----------------

input: Name of input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

npoints: Number of interpolation points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-e: Output is the interpolation error

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Interpolated IDW

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Interpolated IDW"""
    return processing.run("grass7:r.surf.idw", params)

@mcp_server.tool()
def grass7_r_surf_random(params: dict) -> dict:
    """r.surf.random - Produces a raster layer of uniform random deviates whose range can be expressed by the user.

r.surf.random (grass7:r.surf.random)

Produces a raster layer of uniform random deviates whose range can be expressed by the user.


----------------
Input parameters
----------------

min: Minimum random value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

max: Maximum random value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-i: Create an integer raster layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Random

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Random"""
    return processing.run("grass7:r.surf.random", params)

@mcp_server.tool()
def grass7_r_terraflow(params: dict) -> dict:
    """r.terraflow - Flow computation for massive grids.

r.terraflow (grass7:r.terraflow)

Flow computation for massive grids.


----------------
Input parameters
----------------

elevation: Name of elevation raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-s: SFD (D8) flow (default is MFD)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

d8cut: Routing using SFD (D8) direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used (in MB)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

filled: Filled (flooded) elevation

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

direction: Flow direction

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

swatershed: Sink-watershed

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

accumulation: Flow accumulation

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

tci: Topographic convergence index (tci)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

stats: Runtime statistics

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

filled:  <QgsProcessingOutputRasterLayer>
	Filled (flooded) elevation

direction:  <QgsProcessingOutputRasterLayer>
	Flow direction

swatershed:  <QgsProcessingOutputRasterLayer>
	Sink-watershed

accumulation:  <QgsProcessingOutputRasterLayer>
	Flow accumulation

tci:  <QgsProcessingOutputRasterLayer>
	Topographic convergence index (tci)

stats:  <QgsProcessingOutputFile>
	Runtime statistics"""
    return processing.run("grass7:r.terraflow", params)

@mcp_server.tool()
def grass7_r_texture(params: dict) -> dict:
    """r.texture - Generate images with textural features from a raster map.

r.texture (grass7:r.texture)

Generate images with textural features from a raster map.


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Textural measurement method(s)

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: asm
		- 1: contrast
		- 2: corr
		- 3: var
		- 4: idm
		- 5: sa
		- 6: se
		- 7: sv
		- 8: entr
		- 9: dv
		- 10: de
		- 11: moc1
		- 12: moc2

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

size: The size of moving window (odd and >= 3)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

distance: The distance between two samples (>= 1)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-s: Separate output for each angle (0, 45, 90, 135)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Calculate all textural measurements

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Texture files directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Texture files directory"""
    return processing.run("grass7:r.texture", params)

@mcp_server.tool()
def grass7_r_thin(params: dict) -> dict:
    """r.thin - Thins non-zero cells that denote linear features in a raster layer.

r.thin (grass7:r.thin)

Thins non-zero cells that denote linear features in a raster layer.


----------------
Input parameters
----------------

input: Input raster layer to thin

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

iterations: Maximum number of iterations

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Thinned

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Thinned"""
    return processing.run("grass7:r.thin", params)

@mcp_server.tool()
def grass7_r_tile(params: dict) -> dict:
    """r.tile - Splits a raster map into tiles

r.tile (grass7:r.tile)

Splits a raster map into tiles


----------------
Input parameters
----------------

input: Name of input raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

width: Width of tiles (columns)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

height: Height of tiles (rows)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

overlap: Overlap of tiles

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Tiles Directory

	Parameter type:	QgsProcessingParameterFolderDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFolder>
	Tiles Directory"""
    return processing.run("grass7:r.tile", params)

@mcp_server.tool()
def grass7_r_tileset(params: dict) -> dict:
    """r.tileset - Produces tilings of the source projection for use in the destination region and projection.

r.tileset (grass7:r.tileset)

Produces tilings of the source projection for use in the destination region and projection.


----------------
Input parameters
----------------

sourceproj: Source projection

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

sourcescale: Conversion factor from units to meters in source projection

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

destproj: Destination projection

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

destscale: Conversion factor from units to meters in destination projection

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

maxcols: Maximum number of columns for a tile in the source projection

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

maxrows: Maximum number of rows for a tile in the source projection

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

overlap: Number of cells tiles should overlap in each direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

separator: Output field separator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-g: Produces shell script output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-w: Produces web map server query string output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Tileset

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Tileset"""
    return processing.run("grass7:r.tileset", params)

@mcp_server.tool()
def grass7_r_to_vect(params: dict) -> dict:
    """r.to.vect - Converts a raster into a vector layer.

r.to.vect (grass7:r.to.vect)

Converts a raster into a vector layer.


----------------
Input parameters
----------------

input: Input raster layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

type: Feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: point
		- 2: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

column: Name of attribute column to store value

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-s: Smooth corners of area features

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-v: Use raster values as categories instead of unique sequence

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-z: Write raster values as z coordinate

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Do not build vector topology

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Do not create attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Vectorized

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Vectorized"""
    return processing.run("grass7:r.to.vect", params)

@mcp_server.tool()
def grass7_r_topidx(params: dict) -> dict:
    """r.topidx - Creates topographic index layer from elevation raster layer

r.topidx (grass7:r.topidx)

Creates topographic index layer from elevation raster layer


----------------
Input parameters
----------------

input: Input elevation layer

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: Topographic index

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Topographic index"""
    return processing.run("grass7:r.topidx", params)

@mcp_server.tool()
def grass7_r_topmodel(params: dict) -> dict:
    """r.topmodel - Simulates TOPMODEL which is a physically based hydrologic model.

r.topmodel (grass7:r.topmodel)

Simulates TOPMODEL which is a physically based hydrologic model.


----------------
Input parameters
----------------

parameters: Name of TOPMODEL parameters file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

topidxstats: Name of topographic index statistics file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

input: Name of rainfall and potential evapotranspiration data file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

timestep: Time step. Generate output for this time step

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

topidxclass: Topographic index class. Generate output for this topographic index class

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: TOPMODEL output

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	TOPMODEL output"""
    return processing.run("grass7:r.topmodel", params)

@mcp_server.tool()
def grass7_r_topmodel_topidxstats(params: dict) -> dict:
    """r.topmodel.topidxstats - r.topmodel.topidxstats - Builds a TOPMODEL topographic index statistics file.

r.topmodel.topidxstats (grass7:r.topmodel.topidxstats)

r.topmodel.topidxstats - Builds a TOPMODEL topographic index statistics file.


----------------
Input parameters
----------------

topidx: Name of input topographic index raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

ntopidxclasses: Number of topographic index classes

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

outtopidxstats: TOPMODEL topographic index statistics file

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

outtopidxstats:  <QgsProcessingOutputFile>
	TOPMODEL topographic index statistics file"""
    return processing.run("grass7:r.topmodel.topidxstats", params)

@mcp_server.tool()
def grass7_r_transect(params: dict) -> dict:
    """r.transect - Outputs raster map layer values lying along user defined transect line(s).

r.transect (grass7:r.transect)

Outputs raster map layer values lying along user defined transect line(s).


----------------
Input parameters
----------------

map: Raster map to be queried

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

line: Transect definition: east,north,azimuth,distance[,east,north,azimuth,distance,...]

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

null_value: String representing NULL value

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-g: Output easting and northing in first two columns of four column output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Transect file

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Transect file"""
    return processing.run("grass7:r.transect", params)

@mcp_server.tool()
def grass7_r_univar(params: dict) -> dict:
    """r.univar - Calculates univariate statistics from the non-null cells of a raster map.

r.univar (grass7:r.univar)

Calculates univariate statistics from the non-null cells of a raster map.


----------------
Input parameters
----------------

map: Name of raster map(s)

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

zones: Raster map used for zoning, must be of type CELL

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

percentile: Percentile to calculate (comma separated list if multiple) (requires extended statistics flag)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

separator: Field separator. Special characters: pipe, comma, space, tab, newline

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-e: Calculate extended statistics

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Univariate results

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Univariate results"""
    return processing.run("grass7:r.univar", params)

@mcp_server.tool()
def grass7_r_uslek(params: dict) -> dict:
    """r.uslek - Computes USLE Soil Erodibility Factor (K).

r.uslek (grass7:r.uslek)

Computes USLE Soil Erodibility Factor (K).


----------------
Input parameters
----------------

psand: Name of soil sand fraction raster map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

pclay: Name of soil clay fraction raster map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

psilt: Name of soil silt fraction raster map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

pomat: Name of soil organic matter raster map [0.0-1.0]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

output: USLE R Raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	USLE R Raster"""
    return processing.run("grass7:r.uslek", params)

@mcp_server.tool()
def grass7_r_usler(params: dict) -> dict:
    """r.usler - Computes USLE R factor, Rainfall erosivity index.

r.usler (grass7:r.usler)

Computes USLE R factor, Rainfall erosivity index.


----------------
Input parameters
----------------

input: Name of annual precipitation raster map [mm/year]

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Name of USLE R equation

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: roose
		- 1: morgan
		- 2: foster
		- 3: elswaify

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: USLE R Raster

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	USLE R Raster"""
    return processing.run("grass7:r.usler", params)

@mcp_server.tool()
def grass7_r_viewshed(params: dict) -> dict:
    """r.viewshed - Computes the viewshed of a point on an elevation raster map.

r.viewshed (grass7:r.viewshed)

Computes the viewshed of a point on an elevation raster map.


----------------
Input parameters
----------------

input: Elevation

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coordinates: Coordinate identifying the viewing position

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

observer_elevation: Viewing elevation above the ground

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

target_elevation: Offset for target elevation above the ground

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

max_distance: Maximum visibility radius. By default infinity (-1)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

refraction_coeff: Refraction coefficient

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Amount of memory to use in MB

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-c: Consider earth curvature (current ellipsoid)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Consider the effect of atmospheric refraction

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Output format is invisible = 0, visible = 1

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-e: Output format is invisible = NULL, else current elev - viewpoint_elev

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Intervisibility

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Intervisibility"""
    return processing.run("grass7:r.viewshed", params)

@mcp_server.tool()
def grass7_r_volume(params: dict) -> dict:
    """r.volume - Calculates the volume of data "clumps".

r.volume (grass7:r.volume)

Calculates the volume of data "clumps".


----------------
Input parameters
----------------

input: Name of input raster map representing data that will be summed within clumps

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

clump: Clumps layer (preferably the output of r.clump)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

-f: Generate unformatted report

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

centroids: Centroids

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

centroids:  <QgsProcessingOutputVectorLayer>
	Centroids"""
    return processing.run("grass7:r.volume", params)

@mcp_server.tool()
def grass7_r_walk_coords(params: dict) -> dict:
    """r.walk.coords - r.walk.coords - Creates a raster map showing the anisotropic cumulative cost of moving between different geographic locations on an input raster map whose cell category values represent cost from a list of coordinates.

r.walk.coords (grass7:r.walk.coords)

r.walk.coords - Creates a raster map showing the anisotropic cumulative cost of moving between different geographic locations on an input raster map whose cell category values represent cost from a list of coordinates.


----------------
Input parameters
----------------

elevation: Name of input elevation raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

friction: Name of input raster map containing friction costs

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

start_coordinates: Coordinates of starting point(s) (a list of E,N)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

stop_coordinates: Coordinates of stopping point(s) (a list of E,N)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

walk_coeff: Coefficients for walking energy formula parameters a,b,c,d

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

lambda: Lambda coefficients for combining walking energy and friction cost

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

slope_factor: Slope factor determines travel energy cost per height step

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

max_cost: Maximum cumulative cost

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

null_cost: Cost assigned to null cells. By default, null cells are excluded

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used in MB

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-k: Use the 'Knight's move'; slower, but more accurate

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Keep null values in output raster layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Cumulative cost

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

outdir: Movement Directions

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Cumulative cost

outdir:  <QgsProcessingOutputRasterLayer>
	Movement Directions"""
    return processing.run("grass7:r.walk.coords", params)

@mcp_server.tool()
def grass7_r_walk_points(params: dict) -> dict:
    """r.walk.points - r.walk.points - Creates a raster map showing the anisotropic cumulative cost of moving between different geographic locations on an input raster map whose cell category values represent cost from point vector layers.

r.walk.points (grass7:r.walk.points)

r.walk.points - Creates a raster map showing the anisotropic cumulative cost of moving between different geographic locations on an input raster map whose cell category values represent cost from point vector layers.


----------------
Input parameters
----------------

elevation: Name of input elevation raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

friction: Name of input raster map containing friction costs

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

start_points: Start points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

stop_points: Stop points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

walk_coeff: Coefficients for walking energy formula parameters a,b,c,d

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

lambda: Lambda coefficients for combining walking energy and friction cost

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

slope_factor: Slope factor determines travel energy cost per height step

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

max_cost: Maximum cumulative cost

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

null_cost: Cost assigned to null cells. By default, null cells are excluded

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used in MB

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-k: Use the 'Knight's move'; slower, but more accurate

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Keep null values in output raster layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Cumulative cost

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

outdir: Movement Directions

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Cumulative cost

outdir:  <QgsProcessingOutputRasterLayer>
	Movement Directions"""
    return processing.run("grass7:r.walk.points", params)

@mcp_server.tool()
def grass7_r_walk_rast(params: dict) -> dict:
    """r.walk.rast - r.walk.rast - Creates a raster map showing the anisotropic cumulative cost of moving between different geographic locations on an input raster map whose cell category values represent cost from a raster.

r.walk.rast (grass7:r.walk.rast)

r.walk.rast - Creates a raster map showing the anisotropic cumulative cost of moving between different geographic locations on an input raster map whose cell category values represent cost from a raster.


----------------
Input parameters
----------------

elevation: Name of input elevation raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

friction: Name of input raster map containing friction costs

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

start_raster: Name of starting raster points map (all non-NULL cells are starting points)

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

walk_coeff: Coefficients for walking energy formula parameters a,b,c,d

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

lambda: Lambda coefficients for combining walking energy and friction cost

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

slope_factor: Slope factor determines travel energy cost per height step

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

max_cost: Maximum cumulative cost

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

null_cost: Cost assigned to null cells. By default, null cells are excluded

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used in MB

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-k: Use the 'Knight's move'; slower, but more accurate

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Keep null values in output raster layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Cumulative cost

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

outdir: Movement Directions

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Cumulative cost

outdir:  <QgsProcessingOutputRasterLayer>
	Movement Directions"""
    return processing.run("grass7:r.walk.rast", params)

@mcp_server.tool()
def grass7_r_water_outlet(params: dict) -> dict:
    """r.water.outlet - Watershed basin creation program.

r.water.outlet (grass7:r.water.outlet)

Watershed basin creation program.


----------------
Input parameters
----------------

input: Drainage direction raster

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coordinates: Coordinates of outlet point

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

output: Basin

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Basin"""
    return processing.run("grass7:r.water.outlet", params)

@mcp_server.tool()
def grass7_r_watershed(params: dict) -> dict:
    """r.watershed - Watershed basin analysis program.

r.watershed (grass7:r.watershed)

Watershed basin analysis program.


----------------
Input parameters
----------------

elevation: Elevation

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

depression: Locations of real depressions

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

flow: Amount of overland flow per cell

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

disturbed_land: Percent of disturbed land, for USLE

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

blocking: Terrain blocking overland surface flow, for USLE

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

threshold: Minimum size of exterior watershed basin

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

max_slope_length: Maximum length of surface flow, for USLE

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

convergence: Convergence factor for MFD (1-10)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used with -m flag (in MB)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-s: Enable Single Flow Direction (D8) flow (default is Multiple Flow Direction)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-m: Enable disk swap memory option (-m): Operation is slow

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-4: Allow only horizontal and vertical flow of water

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Use positive flow accumulation even for likely underestimates

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Beautify flat areas

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

accumulation: Number of cells that drain through each cell

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

drainage: Drainage direction

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

basin: Unique label for each watershed basin

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

stream: Stream segments

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

half_basin: Half-basins

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

length_slope: Slope length and steepness (LS) factor for USLE

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

slope_steepness: Slope steepness (S) factor for USLE

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

tci: Topographic index ln(a / tan(b))

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

spi: Stream power index a * tan(b)

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

----------------
Outputs
----------------

accumulation:  <QgsProcessingOutputRasterLayer>
	Number of cells that drain through each cell

drainage:  <QgsProcessingOutputRasterLayer>
	Drainage direction

basin:  <QgsProcessingOutputRasterLayer>
	Unique label for each watershed basin

stream:  <QgsProcessingOutputRasterLayer>
	Stream segments

half_basin:  <QgsProcessingOutputRasterLayer>
	Half-basins

length_slope:  <QgsProcessingOutputRasterLayer>
	Slope length and steepness (LS) factor for USLE

slope_steepness:  <QgsProcessingOutputRasterLayer>
	Slope steepness (S) factor for USLE

tci:  <QgsProcessingOutputRasterLayer>
	Topographic index ln(a / tan(b))

spi:  <QgsProcessingOutputRasterLayer>
	Stream power index a * tan(b)"""
    return processing.run("grass7:r.watershed", params)

@mcp_server.tool()
def grass7_r_what_color(params: dict) -> dict:
    """r.what.color - Queries colors for a raster map layer.

r.what.color (grass7:r.what.color)

Queries colors for a raster map layer.


----------------
Input parameters
----------------

input: Raster map to query colors

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

value: Values to query colors for (comma separated list)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

format: Output format (printf-style)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

html: Colors file

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Colors file"""
    return processing.run("grass7:r.what.color", params)

@mcp_server.tool()
def grass7_r_what_coords(params: dict) -> dict:
    """r.what.coords - r.what.coords - Queries raster maps on their category values and category labels on a point.

r.what.coords (grass7:r.what.coords)

r.what.coords - Queries raster maps on their category values and category labels on a point.


----------------
Input parameters
----------------

map: Name of raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

coordinates: Coordinates for query (east, north)

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

null_value: String representing NULL value

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

separator: Field separator. Special characters: pipe, comma, space, tab, newlineString representing NULL value

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

cache: Size of point cache

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-n: Output header row

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Show the category labels of the grid cell(s)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Output color values as RRR:GGG:BBB

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Output integer category values, not cell values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Turn on cache reporting

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Raster Value File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Raster Value File"""
    return processing.run("grass7:r.what.coords", params)

@mcp_server.tool()
def grass7_r_what_points(params: dict) -> dict:
    """r.what.points - r.what.points - Queries raster maps on their category values and category labels on a layer of points.

r.what.points (grass7:r.what.points)

r.what.points - Queries raster maps on their category values and category labels on a layer of points.


----------------
Input parameters
----------------

map: Name of raster map

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

points: Name of vector points layer for query

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

null_value: String representing NULL value

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

separator: Field separator. Special characters: pipe, comma, space, tab, newline

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

cache: Size of point cache

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-n: Output header row

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Show the category labels of the grid cell(s)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Output color values as RRR:GGG:BBB

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Output integer category values, not cell values

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Turn on cache reporting

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Raster Values File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Raster Values File"""
    return processing.run("grass7:r.what.points", params)

@mcp_server.tool()
def grass7_v_buffer(params: dict) -> dict:
    """v.buffer - Creates a buffer around vector features of given type.

v.buffer (grass7:v.buffer)

Creates a buffer around vector features of given type.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

distance: Buffer distance in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

minordistance: Buffer distance along minor axis in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

angle: Angle of major axis in degrees

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

layer: Layer number or name ('-1' for all layers)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

column: Name of column to use for buffer distances

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

scale: Scaling factor for attribute column values

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

tolerance: Maximum distance between theoretical arc and polygon segments as multiple of buffer

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-s: Make outside corners straight

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Do not make caps at the ends of polylines

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Transfer categories and attributes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Buffer

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Buffer"""
    return processing.run("grass7:v.buffer", params)

@mcp_server.tool()
def grass7_v_build_check(params: dict) -> dict:
    """v.build.check - v.build.check - Checks for topological errors.

v.build.check (grass7:v.build.check)

v.build.check - Checks for topological errors.


----------------
Input parameters
----------------

map: Name of vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

error: Topological errors

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

error:  <QgsProcessingOutputVectorLayer>
	Topological errors"""
    return processing.run("grass7:v.build.check", params)

@mcp_server.tool()
def grass7_v_build_polylines(params: dict) -> dict:
    """v.build.polylines - Builds polylines from lines or boundaries.

v.build.polylines (grass7:v.build.polylines)

Builds polylines from lines or boundaries.


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

cats: Category number mode

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: no
		- 1: first
		- 2: multi
		- 3: same

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Polylines

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Polylines"""
    return processing.run("grass7:v.build.polylines", params)

@mcp_server.tool()
def grass7_v_class(params: dict) -> dict:
    """v.class - Classifies attribute data, e.g. for thematic mapping.

v.class (grass7:v.class)

Classifies attribute data, e.g. for thematic mapping.


----------------
Input parameters
----------------

map: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

column: Column name or expression

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

algorithm: Algorithm to use for classification

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: int
		- 1: std
		- 2: qua
		- 3: equ

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

nbclasses: Number of classes to define

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-g: Print only class breaks (without min and max)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Classification

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Classification"""
    return processing.run("grass7:v.class", params)

@mcp_server.tool()
def grass7_v_clean(params: dict) -> dict:
    """v.clean - Toolset for cleaning topology of vector map.

v.clean (grass7:v.clean)

Toolset for cleaning topology of vector map.


----------------
Input parameters
----------------

input: Layer to clean

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area
		- 5: face
		- 6: kernel

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

tool: Cleaning tool

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: break
		- 1: snap
		- 2: rmdangle
		- 3: chdangle
		- 4: rmbridge
		- 5: chbridge
		- 6: rmdupl
		- 7: rmdac
		- 8: bpol
		- 9: prune
		- 10: rmarea
		- 11: rmline
		- 12: rmsa

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

threshold: Threshold (comma separated for each tool)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-b: Do not build topology for the output vector

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Combine tools with recommended follow-up tools

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Cleaned

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

error: Errors

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Cleaned

error:  <QgsProcessingOutputVectorLayer>
	Errors"""
    return processing.run("grass7:v.clean", params)

@mcp_server.tool()
def grass7_v_cluster(params: dict) -> dict:
    """v.cluster - Performs cluster identification

v.cluster (grass7:v.cluster)

Performs cluster identification


----------------
Input parameters
----------------

input: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

distance: Maximum distance to neighbors

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

min: Minimum number of points to create a cluster

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

method: Clustering method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: dbscan
		- 1: dbscan2
		- 2: density
		- 3: optics
		- 4: optics2

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-2: Force 2D clustering

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Do not build topology

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Do not create attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Clustered

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Clustered"""
    return processing.run("grass7:v.cluster", params)

@mcp_server.tool()
def grass7_v_db_select(params: dict) -> dict:
    """v.db.select - Prints vector map attributes

v.db.select (grass7:v.db.select)

Prints vector map attributes


----------------
Input parameters
----------------

map: Input vector map 

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

layer: Layer Number

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

columns: Name of attribute column(s), comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-c: Do not include column names in output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

separator: Output field separator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

group: GROUP BY conditions of SQL statement without 'group by' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

vertical_separator: Output vertical record separator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

null_value: Null value indicator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-v: Vertical output (instead of horizontal)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Print minimal region extent of selected vector features instead of attributes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

file: Attributes

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

file:  <QgsProcessingOutputFile>
	Attributes"""
    return processing.run("grass7:v.db.select", params)

@mcp_server.tool()
def grass7_v_decimate(params: dict) -> dict:
    """v.decimate - Decimates a point cloud

v.decimate (grass7:v.decimate)

Decimates a point cloud


----------------
Input parameters
----------------

input: Input vector

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

zrange: Filter range for z data (min,max)

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

skip: Throw away every n-th point

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

preserve: Preserve only every n-th point

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

offset: Skip first n points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

limit: Copy only n points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zdiff: Minimal difference of z values

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

cell_limit: Preserve only n points per grid cell

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-g: Apply grid-based decimation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Use only first point in grid cell during grid-based decimation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Only one point per cat in grid cell

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-z: Use z in grid decimation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-x: Store only the coordinates, throw away categories

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Do not build topology

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Output vector map

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Output vector map"""
    return processing.run("grass7:v.decimate", params)

@mcp_server.tool()
def grass7_v_delaunay(params: dict) -> dict:
    """v.delaunay - Creates a Delaunay triangulation from an input vector map containing points or centroids.

v.delaunay (grass7:v.delaunay)

Creates a Delaunay triangulation from an input vector map containing points or centroids.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

-r: Use only points in current region

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-l: Output triangulation as a graph (lines), not areas

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Delaunay triangulation

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Delaunay triangulation"""
    return processing.run("grass7:v.delaunay", params)

@mcp_server.tool()
def grass7_v_dissolve(params: dict) -> dict:
    """v.dissolve - Dissolves boundaries between adjacent areas sharing a common category number or attribute.

v.dissolve (grass7:v.dissolve)

Dissolves boundaries between adjacent areas sharing a common category number or attribute.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

column: Name of column used to dissolve common boundaries

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

output: Dissolved

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Dissolved"""
    return processing.run("grass7:v.dissolve", params)

@mcp_server.tool()
def grass7_v_distance(params: dict) -> dict:
    """v.distance - Finds the nearest element in vector map 'to' for elements in vector map 'from'.

v.distance (grass7:v.distance)

Finds the nearest element in vector map 'to' for elements in vector map 'from'.


----------------
Input parameters
----------------

from: 'from' vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

from_type: 'from' feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: area
		- 4: centroid

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

to: 'to' vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

to_type: 'to' feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: area
		- 4: centroid

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

dmax: Maximum distance or -1.0 for no limit

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

dmin: Minimum distance or -1.0 for no limit

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

upload: 'upload': Values describing the relation between two nearest features

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: cat
		- 1: dist
		- 2: to_x
		- 3: to_y
		- 4: to_along
		- 5: to_angle
		- 6: to_attr

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

column: Column name(s) where values specified by 'upload' option will be uploaded

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

to_column: Column name of nearest feature (used with upload=to_attr)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

from_output: Nearest

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

output: Distance

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

from_output:  <QgsProcessingOutputVectorLayer>
	Nearest

output:  <QgsProcessingOutputVectorLayer>
	Distance"""
    return processing.run("grass7:v.distance", params)

@mcp_server.tool()
def grass7_v_drape(params: dict) -> dict:
    """v.drape - Converts 2D vector features to 3D by sampling of elevation raster map.

v.drape (grass7:v.drape)

Converts 2D vector features to 3D by sampling of elevation raster map.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

elevation: Elevation raster map for height extraction

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Sampling method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: nearest
		- 1: bilinear
		- 2: bicubic

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

scale: Scale factor sampled raster values

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

null_value: Height for sampled raster NULL values

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: 3D vector

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	3D vector"""
    return processing.run("grass7:v.drape", params)

@mcp_server.tool()
def grass7_v_edit(params: dict) -> dict:
    """v.edit - Edits a vector map, allows adding, deleting and modifying selected vector features.

v.edit (grass7:v.edit)

Edits a vector map, allows adding, deleting and modifying selected vector features.


----------------
Input parameters
----------------

map: Name of vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

tool: Tool

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: create
		- 1: add
		- 2: delete
		- 3: copy
		- 4: move
		- 5: flip
		- 6: catadd
		- 7: catdel
		- 8: merge
		- 9: break
		- 10: snap
		- 11: connect
		- 12: chtype
		- 13: vertexadd
		- 14: vertexdel
		- 15: vertexmove
		- 16: areadel
		- 17: zbulk
		- 18: select

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

input: ASCII file for add tool

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

move: Difference in x,y,z direction for moving feature or vertex

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

threshold: Threshold distance (coords,snap,query)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

ids: Feature ids

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

coords: List of point coordinates

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

bbox: Bounding box for selecting features

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

polygon: Polygon for selecting features

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

query: Query tool

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: length
		- 1: dangle

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

bgmap: Name of background vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

snap: Snap added or modified features in the given threshold to the nearest existing feature

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: no
		- 1: node
		- 2: vertex

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

zbulk: Starting value and step for z bulk-labeling. Pair: value,step (e.g. 1100,10)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-r: Reverse selection

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Close added boundaries (using threshold distance)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Do not expect header of input data

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Do not build topology

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-1: Modify only first found feature in bounding box

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Edited

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Edited"""
    return processing.run("grass7:v.edit", params)

@mcp_server.tool()
def grass7_v_extract(params: dict) -> dict:
    """v.extract - Selects vector objects from a vector layer and creates a new layer containing only the selected objects.

v.extract (grass7:v.extract)

Selects vector objects from a vector layer and creates a new layer containing only the selected objects.


----------------
Input parameters
----------------

input: Vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area
		- 5: face

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

file: Input text file with category numbers/number ranges to be extracted

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

random: Number of random categories matching vector objects to extract

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

new: Desired new category value (enter -1 to keep original categories)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-d: Dissolve common boundaries

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Do not copy attributes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Reverse selection

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Selected

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Selected"""
    return processing.run("grass7:v.extract", params)

@mcp_server.tool()
def grass7_v_extrude(params: dict) -> dict:
    """v.extrude - Extrudes flat vector object to 3D with defined height.

v.extrude (grass7:v.extrude)

Extrudes flat vector object to 3D with defined height.


----------------
Input parameters
----------------

input: Name of input 2D vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

zshift: Shifting value for z coordinates

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

height: Fixed height for 3D vector objects

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

height_column: Name of attribute column with object heights

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

elevation: Elevation raster for height extraction

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

method: Sampling interpolation method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: nearest
		- 1: bilinear
		- 2: bicubic

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

scale: Scale factor sampled raster values

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

null_value: Height for sampled raster NULL values

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Trace elevation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: 3D Vector

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	3D Vector"""
    return processing.run("grass7:v.extrude", params)

@mcp_server.tool()
def grass7_v_generalize(params: dict) -> dict:
    """v.generalize - Vector based generalization.

v.generalize (grass7:v.generalize)

Vector based generalization.


----------------
Input parameters
----------------

input: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: boundary
		- 2: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

method: Generalization algorithm

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: douglas
		- 1: douglas_reduction
		- 2: lang
		- 3: reduction
		- 4: reumann
		- 5: boyle
		- 6: sliding_averaging
		- 7: distance_weighting
		- 8: chaiken
		- 9: hermite
		- 10: snakes
		- 11: network
		- 12: displacement

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

threshold: Maximal tolerance value

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

look_ahead: Look-ahead parameter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

reduction: Percentage of the points in the output of 'douglas_reduction' algorithm

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

slide: Slide of computed point toward the original point

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

angle_thresh: Minimum angle between two consecutive segments in Hermite method

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

degree_thresh: Degree threshold in network generalization

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

closeness_thresh: Closeness threshold in network generalization

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

betweeness_thresh: Betweenness threshold in network generalization

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

alpha: Snakes alpha parameter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

beta: Snakes beta parameter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

iterations: Number of iterations

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Do not copy attributes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-l: Disable loop support

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Generalized

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

error: Errors

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Generalized

error:  <QgsProcessingOutputVectorLayer>
	Errors"""
    return processing.run("grass7:v.generalize", params)

@mcp_server.tool()
def grass7_v_hull(params: dict) -> dict:
    """v.hull - Produces a convex hull for a given vector map.

v.hull (grass7:v.hull)

Produces a convex hull for a given vector map.


----------------
Input parameters
----------------

input: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-f: Create a 'flat' 2D hull even if the input is 3D points

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Convex hull

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Convex hull"""
    return processing.run("grass7:v.hull", params)

@mcp_server.tool()
def grass7_v_in_ascii(params: dict) -> dict:
    """v.in.ascii - Creates a vector map from an ASCII points file or ASCII vector file.

v.in.ascii (grass7:v.in.ascii)

Creates a vector map from an ASCII points file or ASCII vector file.


----------------
Input parameters
----------------

input: ASCII file to be imported

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

format: Input file format

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: standard

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

separator: Field separator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

text: Text delimiter

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

skip: Number of header lines to skip at top of input file

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

columns: Column definition in SQL style (example: 'x double precision, y double precision, cat int, name varchar(10)')

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

x: Number of column used as x coordinate

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

y: Number of column used as y coordinate

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

z: Number of column used as z coordinate

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

cat: Number of column used as category

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-z: Create 3D vector map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Do not expect a header when reading in standard format

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Do not create table in points mode

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Do not build topology in points mode

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Only import points falling within current region (points mode)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Ignore broken line(s) in points mode

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: ASCII

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	ASCII"""
    return processing.run("grass7:v.in.ascii", params)

@mcp_server.tool()
def grass7_v_in_dxf(params: dict) -> dict:
    """v.in.dxf - Converts files in DXF format to GRASS vector map format.

v.in.dxf (grass7:v.in.dxf)

Converts files in DXF format to GRASS vector map format.


----------------
Input parameters
----------------

input: Name of input DXF file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

layers: List of layers to import

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-e: Ignore the map extent of DXF file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Do not create attribute tables

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Import polyface meshes as 3D wire frame

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-l: List available layers and exit

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-i: Invert selection by layers (don't import layers in list)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-1: Import all objects into one layer

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Converted

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Converted"""
    return processing.run("grass7:v.in.dxf", params)

@mcp_server.tool()
def grass7_v_in_e00(params: dict) -> dict:
    """v.in.e00 - Imports E00 file into a vector map

v.in.e00 (grass7:v.in.e00)

Imports E00 file into a vector map


----------------
Input parameters
----------------

input: Name of input E00 file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Name of output vector

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Name of output vector"""
    return processing.run("grass7:v.in.e00", params)

@mcp_server.tool()
def grass7_v_in_geonames(params: dict) -> dict:
    """v.in.geonames - Imports geonames.org country files into a GRASS vector points map.

v.in.geonames (grass7:v.in.geonames)

Imports geonames.org country files into a GRASS vector points map.


----------------
Input parameters
----------------

input: Uncompressed geonames file from (with .txt extension)

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Geonames

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Geonames"""
    return processing.run("grass7:v.in.geonames", params)

@mcp_server.tool()
def grass7_v_in_lidar(params: dict) -> dict:
    """v.in.lidar - Converts LAS LiDAR point clouds to a GRASS vector map with libLAS.

v.in.lidar (grass7:v.in.lidar)

Converts LAS LiDAR point clouds to a GRASS vector map with libLAS.


----------------
Input parameters
----------------

input: LiDAR input files in LAS format (*.las or *.laz)

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

spatial: Import subregion only

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

zrange: Filter range for z data

	Parameter type:	QgsProcessingParameterRange

	Accepted data types:
		- list[float]: list of 2 float values
		- list[str]: list of strings representing floats
		- str: as two comma delimited floats, e.g. '1,10'
		- QgsProperty

return_filter: Only import points of selected return type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: first
		- 1: last
		- 2: mid

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

class_filter: Only import points of selected class(es) (comma separated integers)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

skip: Do not import every n-th point

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

preserve: Import only every n-th point

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

offset: Skip first n points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

limit: Import only n points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Do not create attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Do not automatically add unique ID as category to each point

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Do not build topology

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Lidar

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Lidar"""
    return processing.run("grass7:v.in.lidar", params)

@mcp_server.tool()
def grass7_v_in_lines(params: dict) -> dict:
    """v.in.lines - Import ASCII x,y[,z] coordinates as a series of lines.

v.in.lines (grass7:v.in.lines)

Import ASCII x,y[,z] coordinates as a series of lines.


----------------
Input parameters
----------------

input: ASCII file to be imported

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

separator: Field separator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-z: Create 3D vector map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Lines

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Lines"""
    return processing.run("grass7:v.in.lines", params)

@mcp_server.tool()
def grass7_v_in_mapgen(params: dict) -> dict:
    """v.in.mapgen - Imports Mapgen or Matlab-ASCII vector maps into GRASS.

v.in.mapgen (grass7:v.in.mapgen)

Imports Mapgen or Matlab-ASCII vector maps into GRASS.


----------------
Input parameters
----------------

input: Name of input file in Mapgen/Matlab format

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

-z: Create 3D vector map

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Input map is in Matlab format

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Mapgen

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Mapgen"""
    return processing.run("grass7:v.in.mapgen", params)

@mcp_server.tool()
def grass7_v_in_wfs(params: dict) -> dict:
    """v.in.wfs - Import GetFeature from WFS

v.in.wfs (grass7:v.in.wfs)

Import GetFeature from WFS


----------------
Input parameters
----------------

url: GetFeature URL starting with 'http'

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

srs: Alternate spatial reference system

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

name: Comma separated names of data layers to download

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

maximum_features: Maximum number of features to download

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

start_index: Skip earlier feature IDs and start downloading at this one

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Converted

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Converted"""
    return processing.run("grass7:v.in.wfs", params)

@mcp_server.tool()
def grass7_v_info(params: dict) -> dict:
    """v.info - Outputs basic information about a user-specified vector map.

v.info (grass7:v.info)

Outputs basic information about a user-specified vector map.


----------------
Input parameters
----------------

map: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

-c: Print types/names of table columns for specified layer instead of info

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-g: Print map region only

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-e: Print extended metadata info in shell script style

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Print topology information only

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Information report

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Information report"""
    return processing.run("grass7:v.info", params)

@mcp_server.tool()
def grass7_v_kcv(params: dict) -> dict:
    """v.kcv - Randomly partition points into test/train sets.

v.kcv (grass7:v.kcv)

Randomly partition points into test/train sets.


----------------
Input parameters
----------------

map: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

npartitions: Number of partitions

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

column: Name for new column to which partition number is written

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output: Partition

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Partition"""
    return processing.run("grass7:v.kcv", params)

@mcp_server.tool()
def grass7_v_kernel_rast(params: dict) -> dict:
    """v.kernel.rast - v.kernel.rast - Generates a raster density map from vector points map.

v.kernel.rast (grass7:v.kernel.rast)

v.kernel.rast - Generates a raster density map from vector points map.


----------------
Input parameters
----------------

input: Name of input vector map with training points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

radius: Kernel radius in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

dsize: Discretization error in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

segmax: Maximum length of segment on network

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

distmax: Maximum distance from point to network

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

multiplier: Multiply the density result by this number

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

node: Node method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: none
		- 1: split

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

kernel: Kernel function

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: uniform
		- 1: triangular
		- 2: epanechnikov
		- 3: quartic
		- 4: triweight
		- 5: gaussian
		- 6: cosine

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-o: Try to calculate an optimal radius with given 'radius' taken as maximum (experimental)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Kernel

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Kernel"""
    return processing.run("grass7:v.kernel.rast", params)

@mcp_server.tool()
def grass7_v_kernel_vector(params: dict) -> dict:
    """v.kernel.vector - v.kernel.vector - Generates a vector density map from vector points on a vector network.

v.kernel.vector (grass7:v.kernel.vector)

v.kernel.vector - Generates a vector density map from vector points on a vector network.


----------------
Input parameters
----------------

input: Name of input vector map with training points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

net: Name of input network vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

radius: Kernel radius in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

dsize: Discretization error in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

segmax: Maximum length of segment on network

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

distmax: Maximum distance from point to network

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

multiplier: Multiply the density result by this number

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

node: Node method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: none
		- 1: split

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

kernel: Kernel function

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: uniform
		- 1: triangular
		- 2: epanechnikov
		- 3: quartic
		- 4: triweight
		- 5: gaussian
		- 6: cosine

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-o: Try to calculate an optimal radius with given 'radius' taken as maximum (experimental)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Normalize values by sum of density multiplied by length of each segment.

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-m: Multiply the result by number of input points

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Kernel

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Kernel"""
    return processing.run("grass7:v.kernel.vector", params)

@mcp_server.tool()
def grass7_v_lidar_correction(params: dict) -> dict:
    """v.lidar.correction - Correction of the v.lidar.growing output. It is the last of the three algorithms for LIDAR filtering.

v.lidar.correction (grass7:v.lidar.correction)

Correction of the v.lidar.growing output. It is the last of the three algorithms for LIDAR filtering.


----------------
Input parameters
----------------

input: Input vector layer (v.lidar.growing output)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

ew_step: Length of each spline step in the east-west direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ns_step: Length of each spline step in the north-south direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

lambda_c: Regularization weight in reclassification evaluation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

tch: High threshold for object to terrain reclassification

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

tcl: Low threshold for terrain to object reclassification

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-e: Estimate point density and distance

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Classified

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

terrain: Only 'terrain' points

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Classified

terrain:  <QgsProcessingOutputVectorLayer>
	Only 'terrain' points"""
    return processing.run("grass7:v.lidar.correction", params)

@mcp_server.tool()
def grass7_v_lidar_edgedetection(params: dict) -> dict:
    """v.lidar.edgedetection - Detects the object's edges from a LIDAR data set.

v.lidar.edgedetection (grass7:v.lidar.edgedetection)

Detects the object's edges from a LIDAR data set.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

ew_step: Length of each spline step in the east-west direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ns_step: Length of each spline step in the north-south direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

lambda_g: Regularization weight in gradient evaluation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

tgh: High gradient threshold for edge classification

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

tgl: Low gradient threshold for edge classification

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

theta_g: Angle range for same direction detection

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

lambda_r: Regularization weight in residual evaluation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-e: Estimate point density and distance

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Edges

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Edges"""
    return processing.run("grass7:v.lidar.edgedetection", params)

@mcp_server.tool()
def grass7_v_lidar_growing(params: dict) -> dict:
    """v.lidar.growing - Building contour determination and Region Growing algorithm for determining the building inside

v.lidar.growing (grass7:v.lidar.growing)

Building contour determination and Region Growing algorithm for determining the building inside


----------------
Input parameters
----------------

input: Input vector (v.lidar.edgedetection output)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

first: First pulse vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

tj: Threshold for cell object frequency in region growing

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

td: Threshold for double pulse in region growing

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Buildings

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Buildings"""
    return processing.run("grass7:v.lidar.growing", params)

@mcp_server.tool()
def grass7_v_mkgrid(params: dict) -> dict:
    """v.mkgrid - Creates a GRASS vector layer of a user-defined grid.

v.mkgrid (grass7:v.mkgrid)

Creates a GRASS vector layer of a user-defined grid.


----------------
Input parameters
----------------

grid: Number of rows and columns in grid

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

position: Where to place the grid

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: coor

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

coordinates: Lower left easting and northing coordinates of map

	Parameter type:	QgsProcessingParameterPoint

	Accepted data types:
		- str: as an 'x,y' string, e.g. '1.5,10.1'
		- QgsPointXY
		- QgsProperty
		- QgsReferencedPointXY
		- QgsGeometry: centroid of geometry is used

box: Width and height of boxes in grid

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

angle: Angle of rotation (in degrees counter-clockwise)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

breaks: Number of vertex points per grid cell

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-h: Create hexagons (default: rectangles)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-p: Create grid of points instead of areas and centroids

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

map: Grid

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

map:  <QgsProcessingOutputVectorLayer>
	Grid"""
    return processing.run("grass7:v.mkgrid", params)

@mcp_server.tool()
def grass7_v_neighbors(params: dict) -> dict:
    """v.neighbors - Makes each cell value a function of attribute values and stores in an output raster map.

v.neighbors (grass7:v.neighbors)

Makes each cell value a function of attribute values and stores in an output raster map.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

method: Method for aggregate statistics (count if non given)

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: count
		- 1: sum
		- 2: average
		- 3: median
		- 4: mode
		- 5: minimum
		- 6: maximum
		- 7: range
		- 8: stddev
		- 9: variance
		- 10: diversity

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

points_column: Column name of points map to use for statistics

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

size: Neighborhood diameter in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Neighborhood

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Neighborhood"""
    return processing.run("grass7:v.neighbors", params)

@mcp_server.tool()
def grass7_v_net(params: dict) -> dict:
    """v.net - Performs network maintenance

v.net (grass7:v.net)

Performs network maintenance


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Input vector point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

file: Name of input arcs file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

operation: Operation to be performed

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: nodes
		- 1: connect
		- 2: arcs

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

arc_type: Arc type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-s: Snap points to network

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Assign unique categories to new points

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network"""
    return processing.run("grass7:v.net", params)

@mcp_server.tool()
def grass7_v_net_alloc(params: dict) -> dict:
    """v.net.alloc - Allocates subnets for nearest centers

v.net.alloc (grass7:v.net.alloc)

Allocates subnets for nearest centers


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Centers point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

center_cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

arc_type: Arc type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

method: Use costs from centers or costs to centers

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: from
		- 1: to

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-g: Use geodesic calculation for longitude-latitude locations

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network Alloction

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network Alloction"""
    return processing.run("grass7:v.net.alloc", params)

@mcp_server.tool()
def grass7_v_net_allpairs(params: dict) -> dict:
    """v.net.allpairs - Computes the shortest path between all pairs of nodes in the network

v.net.allpairs (grass7:v.net.allpairs)

Computes the shortest path between all pairs of nodes in the network


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Centers point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

where: WHERE condition of SQL statement without 'where' keyword'

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-g: Use geodesic calculation for longitude-latitude locations

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network_Allpairs

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network_Allpairs"""
    return processing.run("grass7:v.net.allpairs", params)

@mcp_server.tool()
def grass7_v_net_bridge(params: dict) -> dict:
    """v.net.bridge - Computes bridges and articulation points in the network.

v.net.bridge (grass7:v.net.bridge)

Computes bridges and articulation points in the network.


----------------
Input parameters
----------------

input: Input vector line layer (network)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Centers point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

method: Feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: bridge
		- 1: articulation

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (name)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (name)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

output: Bridge

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Bridge"""
    return processing.run("grass7:v.net.bridge", params)

@mcp_server.tool()
def grass7_v_net_centrality(params: dict) -> dict:
    """v.net.centrality - Computes degree, centrality, betweenness, closeness and eigenvector centrality measures in the network.

v.net.centrality (grass7:v.net.centrality)

Computes degree, centrality, betweenness, closeness and eigenvector centrality measures in the network.


----------------
Input parameters
----------------

input: Input vector line layer (network)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

degree: Name of output degree centrality column

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

closeness: Name of output closeness centrality column

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

betweenness: Name of output betweenness centrality column

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

eigenvector: Name of output eigenvector centrality column

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

iterations: Maximum number of iterations to compute eigenvector centrality

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

error: Cumulative error tolerance for eigenvector centrality

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-a: Add points on nodes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-g: Use geodesic calculation for longitude-latitude locations

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network Centrality

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network Centrality"""
    return processing.run("grass7:v.net.centrality", params)

@mcp_server.tool()
def grass7_v_net_components(params: dict) -> dict:
    """v.net.components - Computes strongly and weakly connected components in the network.

v.net.components (grass7:v.net.components)

Computes strongly and weakly connected components in the network.


----------------
Input parameters
----------------

input: Input vector line layer (network)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Centers point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

method: Type of components

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: weak
		- 1: strong

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-a: Add points on nodes

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network_Components_Line

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

output_point: Network_Components_Point

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network_Components_Line

output_point:  <QgsProcessingOutputVectorLayer>
	Network_Components_Point"""
    return processing.run("grass7:v.net.components", params)

@mcp_server.tool()
def grass7_v_net_connectivity(params: dict) -> dict:
    """v.net.connectivity - Computes vertex connectivity between two sets of nodes in the network.

v.net.connectivity (grass7:v.net.connectivity)

Computes vertex connectivity between two sets of nodes in the network.


----------------
Input parameters
----------------

input: Input vector line layer (network)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Input vector point layer (first set of nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

set1_cats: Set1 Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

set1_where: Set1 WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

set2_cats: Set2 Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

set2_where: Set2 WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

output: Network_Connectivity

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network_Connectivity"""
    return processing.run("grass7:v.net.connectivity", params)

@mcp_server.tool()
def grass7_v_net_distance(params: dict) -> dict:
    """v.net.distance - Computes shortest distance via the network between the given sets of features.

v.net.distance (grass7:v.net.distance)

Computes shortest distance via the network between the given sets of features.


----------------
Input parameters
----------------

input: Input vector line layer (network)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

flayer: Input vector from points layer (from)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

tlayer: Input vector to layer (to)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting nodes to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

arc_type: Arc type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

from_cats: From Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

from_where: From WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

to_type: To feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

to_cats: To Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

to_where: To WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-g: Use geodesic calculation for longitude-latitude locations

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-l: Write each output path as one line, not as original input segments

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network_Distance

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network_Distance"""
    return processing.run("grass7:v.net.distance", params)

@mcp_server.tool()
def grass7_v_net_flow(params: dict) -> dict:
    """v.net.flow - Computes the maximum flow between two sets of nodes in the network.

v.net.flow (grass7:v.net.flow)

Computes the maximum flow between two sets of nodes in the network.


----------------
Input parameters
----------------

input: Input vector line layer (network)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Input vector point layer (flow nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

source_cats: Source Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

source_where: Source WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

sink_cats: Sink Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

sink_where: Sink WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

output: Network_Flow

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

cut: Network_Cut

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network_Flow

cut:  <QgsProcessingOutputVectorLayer>
	Network_Cut"""
    return processing.run("grass7:v.net.flow", params)

@mcp_server.tool()
def grass7_v_net_iso(params: dict) -> dict:
    """v.net.iso - Splits network by cost isolines.

v.net.iso (grass7:v.net.iso)

Splits network by cost isolines.


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Centers point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

arc_type: Arc type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

center_cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

costs: Costs for isolines

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-g: Use geodesic calculation for longitude-latitude locations

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network_Iso

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network_Iso"""
    return processing.run("grass7:v.net.iso", params)

@mcp_server.tool()
def grass7_v_net_nreport(params: dict) -> dict:
    """v.net.nreport - v.net.nreport - Reports nodes information of a network

v.net.nreport (grass7:v.net.nreport)

v.net.nreport - Reports nodes information of a network


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

output: NReport

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputHtml>
	NReport"""
    return processing.run("grass7:v.net.nreport", params)

@mcp_server.tool()
def grass7_v_net_path(params: dict) -> dict:
    """v.net.path - Finds shortest path on vector network

v.net.path (grass7:v.net.path)

Finds shortest path on vector network


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Centers point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

file: Name of file containing start and end points

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

arc_type: Arc type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

dmax: Maximum distance to the network

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-g: Use geodesic calculation for longitude-latitude locations

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Write output as original input segments, not each path as one line

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network_Path

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network_Path"""
    return processing.run("grass7:v.net.path", params)

@mcp_server.tool()
def grass7_v_net_report(params: dict) -> dict:
    """v.net.report - v.net.report - Reports lines information of a network

v.net.report (grass7:v.net.report)

v.net.report - Reports lines information of a network


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

html: Report

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Report"""
    return processing.run("grass7:v.net.report", params)

@mcp_server.tool()
def grass7_v_net_salesman(params: dict) -> dict:
    """v.net.salesman - Creates a cycle connecting given nodes (Traveling salesman problem)

v.net.salesman (grass7:v.net.salesman)

Creates a cycle connecting given nodes (Traveling salesman problem)


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Centers point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

arc_type: Arc type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

center_cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-g: Use geodesic calculation for longitude-latitude locations

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network_Salesman

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

sequence: Output file holding node sequence

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network_Salesman

sequence:  <QgsProcessingOutputFile>
	Output file holding node sequence"""
    return processing.run("grass7:v.net.salesman", params)

@mcp_server.tool()
def grass7_v_net_spanningtree(params: dict) -> dict:
    """v.net.spanningtree - Computes minimum spanning tree for the network.

v.net.spanningtree (grass7:v.net.spanningtree)

Computes minimum spanning tree for the network.


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Input point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-g: Use geodesic calculation for longitude-latitude locations

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: SpanningTree

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	SpanningTree"""
    return processing.run("grass7:v.net.spanningtree", params)

@mcp_server.tool()
def grass7_v_net_steiner(params: dict) -> dict:
    """v.net.steiner - Creates Steiner tree for the network and given terminals

v.net.steiner (grass7:v.net.steiner)

Creates Steiner tree for the network and given terminals


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Centers point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

arc_type: Arc type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: line
		- 1: boundary

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

terminal_cats: Category values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

acolumn: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

npoints: Number of Steiner points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-g: Use geodesic calculation for longitude-latitude locations

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Network Steiner

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network Steiner"""
    return processing.run("grass7:v.net.steiner", params)

@mcp_server.tool()
def grass7_v_net_timetable(params: dict) -> dict:
    """v.net.timetable - Finds shortest path using timetables.

v.net.timetable (grass7:v.net.timetable)

Finds shortest path using timetables.


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

points: Centers point layer (nodes)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

walk_layer: Layer number or name with walking connections

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

threshold: Threshold for connecting centers to the network (in map unit)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

arc_column: Arc forward/both direction(s) cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

arc_backward_column: Arc backward direction cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

node_column: Node cost column (number)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

route_id: Name of column with route ids

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

stop_time: Name of column with stop timestamps

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

to_stop: Name of column with stop ids

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

walk_length: Name of column with walk lengths

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

output: Network Timetable

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network Timetable"""
    return processing.run("grass7:v.net.timetable", params)

@mcp_server.tool()
def grass7_v_net_visibility(params: dict) -> dict:
    """v.net.visibility - Performs visibility graph construction.

v.net.visibility (grass7:v.net.visibility)

Performs visibility graph construction.


----------------
Input parameters
----------------

input: Input vector line layer (arcs)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

coordinates: Coordinates

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

visibility: Input vector line layer containing visible points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

output: Network Visibility

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Network Visibility"""
    return processing.run("grass7:v.net.visibility", params)

@mcp_server.tool()
def grass7_v_normal(params: dict) -> dict:
    """v.normal - Tests for normality for points.

v.normal (grass7:v.normal)

Tests for normality for points.


----------------
Input parameters
----------------

map: point vector defining sample points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

tests: Lists of tests (1-15): e.g. 1,3-8,13

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

column: Attribute column

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-r: Use only points in current region

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-l: lognormal

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Normality

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Normality"""
    return processing.run("grass7:v.normal", params)

@mcp_server.tool()
def grass7_v_out_ascii(params: dict) -> dict:
    """v.out.ascii - Exports a vector map to a GRASS ASCII vector representation.

v.out.ascii (grass7:v.out.ascii)

Exports a vector map to a GRASS ASCII vector representation.


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area
		- 5: face
		- 6: kernel

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

columns: Name of attribute column(s) to be exported

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

format: Output format

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: standard
		- 2: wkt

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

separator: Field separator

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: pipe
		- 1: comma
		- 2: space
		- 3: tab
		- 4: newline

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

precision: Number of significant digits (floating point only)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-o: Create old (version 4) ASCII file

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Include column names in output (points mode)

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Name for output ASCII file or ASCII vector name if '-o' is defined

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Name for output ASCII file or ASCII vector name if '-o' is defined"""
    return processing.run("grass7:v.out.ascii", params)

@mcp_server.tool()
def grass7_v_out_dxf(params: dict) -> dict:
    """v.out.dxf - Exports GRASS vector map layers to DXF file format.

v.out.dxf (grass7:v.out.dxf)

Exports GRASS vector map layers to DXF file format.


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

output: DXF vector

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	DXF vector"""
    return processing.run("grass7:v.out.dxf", params)

@mcp_server.tool()
def grass7_v_out_postgis(params: dict) -> dict:
    """v.out.postgis - Exports a vector map layer to PostGIS feature table.

v.out.postgis (grass7:v.out.postgis)

Exports a vector map layer to PostGIS feature table.


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area
		- 5: face
		- 6: kernel
		- 7: auto

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Name for output PostGIS datasource

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output_layer: Name for output PostGIS layer

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

options: Creation options

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-t: Do not export attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-l: Export PostGIS topology instead of simple features

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-2: Force 2D output even if input is 3D

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------"""
    return processing.run("grass7:v.out.postgis", params)

@mcp_server.tool()
def grass7_v_out_pov(params: dict) -> dict:
    """v.out.pov - Converts to POV-Ray format, GRASS x,y,z -> POV-Ray x,z,y

v.out.pov (grass7:v.out.pov)

Converts to POV-Ray format, GRASS x,y,z -> POV-Ray x,z,y


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area
		- 5: face
		- 6: kernel

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

size: Radius of sphere for points and tube for lines

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zmod: Modifier for z coordinates, this string is appended to each z coordinate

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

objmod: Object modifier (OBJECT_MODIFIER in POV-Ray documentation)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output: POV vector

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	POV vector"""
    return processing.run("grass7:v.out.pov", params)

@mcp_server.tool()
def grass7_v_out_svg(params: dict) -> dict:
    """v.out.svg - Exports a vector map to SVG file.

v.out.svg (grass7:v.out.svg)

Exports a vector map to SVG file.


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: poly
		- 1: line
		- 2: point

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

precision: Coordinate precision

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

attribute: Attribute(s) to include in output SVG

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

output: SVG File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	SVG File"""
    return processing.run("grass7:v.out.svg", params)

@mcp_server.tool()
def grass7_v_out_vtk(params: dict) -> dict:
    """v.out.vtk - Converts a vector map to VTK ASCII output.

v.out.vtk (grass7:v.out.vtk)

Converts a vector map to VTK ASCII output.


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: kernel
		- 2: centroid
		- 3: line
		- 4: boundary
		- 5: area
		- 6: face

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

precision: Number of significant digits (floating point only)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zscale: Scale factor for elevation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-c: Correct the coordinates to fit the VTK-OpenGL precision

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-n: Export numeric attribute table fields as VTK scalar variables

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: VTK File

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	VTK File"""
    return processing.run("grass7:v.out.vtk", params)

@mcp_server.tool()
def grass7_v_outlier(params: dict) -> dict:
    """v.outlier - Removes outliers from vector point data.

v.outlier (grass7:v.outlier)

Removes outliers from vector point data.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

ew_step: Interpolation spline step value in east direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ns_step: Interpolation spline step value in north direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

lambda: Tykhonov regularization weight

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

threshold: Threshold for the outliers

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

filter: Filtering option

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: both
		- 1: positive
		- 2: negative

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-e: Estimate point density and distance

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Layer without outliers

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

outlier: Outliers

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Layer without outliers

outlier:  <QgsProcessingOutputVectorLayer>
	Outliers"""
    return processing.run("grass7:v.outlier", params)

@mcp_server.tool()
def grass7_v_overlay(params: dict) -> dict:
    """v.overlay - Overlays two vector maps.

v.overlay (grass7:v.overlay)

Overlays two vector maps.


----------------
Input parameters
----------------

ainput: Input layer (A)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

atype: Input layer (A) Type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: area
		- 1: line
		- 2: auto

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

binput: Input layer (B)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

btype: Input layer (B) Type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

operator: Operator to use

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: and
		- 1: or
		- 2: not
		- 3: xor

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

snap: Snapping threshold for boundaries

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Do not create attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Overlay

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Overlay"""
    return processing.run("grass7:v.overlay", params)

@mcp_server.tool()
def grass7_v_pack(params: dict) -> dict:
    """v.pack - Exports a vector map as GRASS GIS specific archive file.

v.pack (grass7:v.pack)

Exports a vector map as GRASS GIS specific archive file.


----------------
Input parameters
----------------

input: Name of input vector map to pack

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

-c: Switch the compression off

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Packed archive

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputFile>
	Packed archive"""
    return processing.run("grass7:v.pack", params)

@mcp_server.tool()
def grass7_v_parallel(params: dict) -> dict:
    """v.parallel - Creates parallel line to input vector lines.

v.parallel (grass7:v.parallel)

Creates parallel line to input vector lines.


----------------
Input parameters
----------------

input: Input lines

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

distance: Offset along major axis in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

minordistance: Offset along minor axis in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

angle: Angle of major axis in degrees

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

side: Side

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: left
		- 1: right
		- 2: both

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

tolerance: Tolerance of arc polylines in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-r: Make outside corners round

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Create buffer-like parallel lines

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Parallel lines

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Parallel lines"""
    return processing.run("grass7:v.parallel", params)

@mcp_server.tool()
def grass7_v_patch(params: dict) -> dict:
    """v.patch - Create a new vector map layer by combining other vector map layers.

v.patch (grass7:v.patch)

Create a new vector map layer by combining other vector map layers.


----------------
Input parameters
----------------

input: Input layers

	Parameter type:	QgsProcessingParameterMultipleLayers

	Accepted data types:
		- list[str]: list of layer IDs
		- list[str]: list of layer names
		- list[str]: list of layer sources
		- list[QgsMapLayer]
		- QgsProperty

-e: Copy also attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Combined

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

bbox: Bounding boxes

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Combined

bbox:  <QgsProcessingOutputVectorLayer>
	Bounding boxes"""
    return processing.run("grass7:v.patch", params)

@mcp_server.tool()
def grass7_v_perturb(params: dict) -> dict:
    """v.perturb - Random location perturbations of GRASS vector points

v.perturb (grass7:v.perturb)

Random location perturbations of GRASS vector points


----------------
Input parameters
----------------

input: Vector points to be spatially perturbed

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

distribution: Distribution of perturbation

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: uniform
		- 1: normal

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

parameters: Parameter(s) of distribution (uniform: maximum; normal: mean and stddev)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

minimum: Minimum deviation in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

seed: Seed for random number generation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Perturbed

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Perturbed"""
    return processing.run("grass7:v.perturb", params)

@mcp_server.tool()
def grass7_v_proj(params: dict) -> dict:
    """v.proj - Re-projects a vector layer to another coordinate reference system

v.proj (grass7:v.proj)

Re-projects a vector layer to another coordinate reference system


----------------
Input parameters
----------------

input: Input vector to reproject

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

crs: New coordinate reference system

	Parameter type:	QgsProcessingParameterCrs

	Accepted data types:
		- str: 'ProjectCrs'
		- str: CRS auth ID (e.g. 'EPSG:3111')
		- str: CRS PROJ4 (e.g. 'PROJ4:…')
		- str: CRS WKT (e.g. 'WKT:…')
		- str: layer ID. CRS of layer is used.
		- str: layer name. CRS of layer is used.
		- str: layer source. CRS of layer is used.
		- QgsCoordinateReferenceSystem
		- QgsMapLayer: CRS of layer is used
		- QgsProcessingFeatureSourceDefinition: CRS of source is used
		- QgsProperty

smax: Maximum segment length in meters in output vector map

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-z: Assume z coordinate is ellipsoidal height and transform if possible

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-w: Disable wrapping to -180,180 for latlon output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Output vector map

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Output vector map"""
    return processing.run("grass7:v.proj", params)

@mcp_server.tool()
def grass7_v_qcount(params: dict) -> dict:
    """v.qcount - Indices for quadrat counts of vector point lists.

v.qcount (grass7:v.qcount)

Indices for quadrat counts of vector point lists.


----------------
Input parameters
----------------

input: Vector points layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

nquadrats: Number of quadrats

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

radius: Quadrat radius

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Quadrats

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Quadrats"""
    return processing.run("grass7:v.qcount", params)

@mcp_server.tool()
def grass7_v_random(params: dict) -> dict:
    """v.random - Randomly generate a 2D/3D vector points map.

v.random (grass7:v.random)

Randomly generate a 2D/3D vector points map.


----------------
Input parameters
----------------

npoints: Number of points to be created

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

restrict: Restrict points to areas in input vector

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

zmin: Minimum z height for 3D output

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zmax: Maximum z height for 3D output

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

seed: Seed for random number generation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

column: Column for Z values

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

column_type: Type of column for z values

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: integer
		- 1: double precision

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

-z: Create 3D output

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-a: Generate n points for each individual area

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Random

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Random"""
    return processing.run("grass7:v.random", params)

@mcp_server.tool()
def grass7_v_rast_stats(params: dict) -> dict:
    """v.rast.stats - Calculates univariate statistics from a raster map based on vector polygons and uploads statistics to new attribute columns.

v.rast.stats (grass7:v.rast.stats)

Calculates univariate statistics from a raster map based on vector polygons and uploads statistics to new attribute columns.


----------------
Input parameters
----------------

map: Name of vector polygon map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

raster: Name of raster map to calculate statistics from

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

column_prefix: Column prefix for new attribute columns

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

method: The methods to use

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: number
		- 1: minimum
		- 2: maximum
		- 3: range
		- 4: average
		- 5: stddev
		- 6: variance
		- 7: coeff_var
		- 8: sum
		- 9: first_quartile
		- 10: median
		- 11: third_quartile
		- 12: percentile

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

percentile: Percentile to calculate

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Rast stats

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Rast stats"""
    return processing.run("grass7:v.rast.stats", params)

@mcp_server.tool()
def grass7_v_reclass(params: dict) -> dict:
    """v.reclass - Changes vector category values for an existing vector map according to results of SQL queries or a value in attribute table column.

v.reclass (grass7:v.reclass)

Changes vector category values for an existing vector map according to results of SQL queries or a value in attribute table column.


----------------
Input parameters
----------------

input: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

column: The name of the column whose values are to be used as new categories

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

rules: Reclass rule file

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Reclassified

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Reclassified"""
    return processing.run("grass7:v.reclass", params)

@mcp_server.tool()
def grass7_v_rectify(params: dict) -> dict:
    """v.rectify - Rectifies a vector by computing a coordinate transformation for each object in the vector based on the control points.

v.rectify (grass7:v.rectify)

Rectifies a vector by computing a coordinate transformation for each object in the vector based on the control points.


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

inline_points: Inline control points

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

points: Name of input file with control points

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

order: Rectification polynomial order

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

separator: Field separator for RMS report

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-3: Perform 3D transformation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-o: Perform orthogonal 3D transformation

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-b: Do not build topology

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Rectified

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

rmsfile: Root Mean Square errors file

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Rectified

rmsfile:  <QgsProcessingOutputFile>
	Root Mean Square errors file"""
    return processing.run("grass7:v.rectify", params)

@mcp_server.tool()
def grass7_v_report(params: dict) -> dict:
    """v.report - Reports geometry statistics for vectors.

v.report (grass7:v.report)

Reports geometry statistics for vectors.


----------------
Input parameters
----------------

map: Input layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

option: Value to calculate

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: area
		- 1: length
		- 2: coor

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

units: units

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: miles
		- 1: feet
		- 2: meters
		- 3: kilometers
		- 4: acres
		- 5: hectares
		- 6: percent

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

sort: Sort the result (ascending, descending)

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: asc
		- 1: desc

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

html: Report

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Report"""
    return processing.run("grass7:v.report", params)

@mcp_server.tool()
def grass7_v_sample(params: dict) -> dict:
    """v.sample - Samples a raster layer at vector point locations.

v.sample (grass7:v.sample)

Samples a raster layer at vector point locations.


----------------
Input parameters
----------------

input: Vector layer defining sample points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

column: Vector layer attribute column to use for comparison

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

raster: Raster map to be sampled

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

zscale: Sampled raster values will be multiplied by this factor

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

method: Sampling interpolation method

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: nearest
		- 1: bilinear
		- 2: bicubic

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Sampled

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Sampled"""
    return processing.run("grass7:v.sample", params)

@mcp_server.tool()
def grass7_v_segment(params: dict) -> dict:
    """v.segment - Creates points/segments from input vector lines and positions.

v.segment (grass7:v.segment)

Creates points/segments from input vector lines and positions.


----------------
Input parameters
----------------

input: Input lines layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

rules: File containing segment rules

	Parameter type:	QgsProcessingParameterFile

	Accepted data types:
		- str
		- QgsProperty

output: Segments

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Segments"""
    return processing.run("grass7:v.segment", params)

@mcp_server.tool()
def grass7_v_select(params: dict) -> dict:
    """v.select - Selects features from vector map (A) by features from other vector map (B).

v.select (grass7:v.select)

Selects features from vector map (A) by features from other vector map (B).


----------------
Input parameters
----------------

ainput: Input layer (A)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

atype: Input layer (A) Type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

binput: Input layer (B)

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

btype: Input layer (B) Type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

operator: Operator to use

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: overlap
		- 1: equals
		- 2: disjoint
		- 3: intersect
		- 4: touches
		- 5: crosses
		- 6: within
		- 7: contains
		- 8: overlaps
		- 9: relate

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

relate: Intersection Matrix Pattern used for 'relate' operator

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-t: Do not create attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Do not skip features without category

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-r: Reverse selection

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Selected

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Selected"""
    return processing.run("grass7:v.select", params)

@mcp_server.tool()
def grass7_v_split(params: dict) -> dict:
    """v.split - Split lines to shorter segments by length.

v.split (grass7:v.split)

Split lines to shorter segments by length.


----------------
Input parameters
----------------

input: Input lines layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

length: Maximum segment length

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

units: Length units

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: map
		- 1: meters
		- 2: kilometers
		- 3: feet
		- 4: surveyfeet
		- 5: miles
		- 6: nautmiles

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

vertices: Maximum number of vertices in segment

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-n: Add new vertices, but do not split

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-f: Force segments to be exactly of given length, except for last one

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Split by length

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Split by length"""
    return processing.run("grass7:v.split", params)

@mcp_server.tool()
def grass7_v_surf_bspline(params: dict) -> dict:
    """v.surf.bspline - Bicubic or bilinear spline interpolation with Tykhonov regularization.

v.surf.bspline (grass7:v.surf.bspline)

Bicubic or bilinear spline interpolation with Tykhonov regularization.


----------------
Input parameters
----------------

input: Input points layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

column: Attribute table column with values to interpolate

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

sparse_input: Sparse points layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

ew_step: Length of each spline step in the east-west direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

ns_step: Length of each spline step in the north-south direction

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

method: Spline interpolation algorithm

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: bilinear
		- 1: bicubic

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

lambda_i: Tykhonov regularization parameter (affects smoothing)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

solver: Type of solver which should solve the symmetric linear equation system

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: cholesky
		- 1: cg

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

maxit: Maximum number of iteration used to solve the linear equation system

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

error: Error break criteria for iterative solver

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used (in MB)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Output vector

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

raster_output: Interpolated spline

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Output vector

raster_output:  <QgsProcessingOutputRasterLayer>
	Interpolated spline"""
    return processing.run("grass7:v.surf.bspline", params)

@mcp_server.tool()
def grass7_v_surf_idw(params: dict) -> dict:
    """v.surf.idw - Surface interpolation from vector point data by Inverse Distance Squared Weighting.

v.surf.idw (grass7:v.surf.idw)

Surface interpolation from vector point data by Inverse Distance Squared Weighting.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

npoints: Number of interpolation points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

power: Power parameter; greater values assign greater influence to closer points

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

column: Attribute table column with values to interpolate

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-n: Don't index points by raster cell

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Interpolated IDW

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Interpolated IDW"""
    return processing.run("grass7:v.surf.idw", params)

@mcp_server.tool()
def grass7_v_surf_rst(params: dict) -> dict:
    """v.surf.rst - Performs surface interpolation from vector points map by splines.

v.surf.rst (grass7:v.surf.rst)

Performs surface interpolation from vector points map by splines.


----------------
Input parameters
----------------

input: Input points layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

zcolumn: Name of the attribute column with values to be used for approximation

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

mask: Name of the raster map used as mask

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

tension: Tension parameter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

smooth: Smoothing parameter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

smooth_column: Name of the attribute column with smoothing parameters

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

segmax: Maximum number of points in a segment

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

npmin: Minimum number of points for approximation in a segment (>segmax)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

dmin: Minimum distance between points (to remove almost identical points)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

dmax: Maximum distance between points on isoline (to insert additional points)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zscale: Conversion factor for values used for approximation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

theta: Anisotropy angle (in degrees counterclockwise from East)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

scalex: Anisotropy scaling factor

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Use scale dependent tension

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: Output partial derivatives instead of topographic parameters

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

elevation: Interpolated RST

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

slope: Slope

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

aspect: Aspect

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

pcurvature: Profile curvature

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

tcurvature: Tangential curvature

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

mcurvature: Mean curvature

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

deviations: Deviations

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

treeseg: Quadtree Segmentation

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

overwin: Overlapping Windows

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

elevation:  <QgsProcessingOutputRasterLayer>
	Interpolated RST

slope:  <QgsProcessingOutputRasterLayer>
	Slope

aspect:  <QgsProcessingOutputRasterLayer>
	Aspect

pcurvature:  <QgsProcessingOutputRasterLayer>
	Profile curvature

tcurvature:  <QgsProcessingOutputRasterLayer>
	Tangential curvature

mcurvature:  <QgsProcessingOutputRasterLayer>
	Mean curvature

deviations:  <QgsProcessingOutputVectorLayer>
	Deviations

treeseg:  <QgsProcessingOutputVectorLayer>
	Quadtree Segmentation

overwin:  <QgsProcessingOutputVectorLayer>
	Overlapping Windows"""
    return processing.run("grass7:v.surf.rst", params)

@mcp_server.tool()
def grass7_v_surf_rst_cvdev(params: dict) -> dict:
    """v.surf.rst.cvdev - v.surf.rst.cvdev - Performs surface interpolation from vector points map by splines.

v.surf.rst.cvdev (grass7:v.surf.rst.cvdev)

v.surf.rst.cvdev - Performs surface interpolation from vector points map by splines.


----------------
Input parameters
----------------

input: Input points layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

zcolumn: Name of the attribute column with values to be used for approximation

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

mask: Name of the raster map used as mask

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

tension: Tension parameter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

smooth: Smoothing parameter

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

smooth_column: Name of the attribute column with smoothing parameters

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

segmax: Maximum number of points in a segment

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

npmin: Minimum number of points for approximation in a segment (>segmax)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

dmin: Minimum distance between points (to remove almost identical points)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

dmax: Maximum distance between points on isoline (to insert additional points)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zscale: Conversion factor for values used for approximation

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

theta: Anisotropy angle (in degrees counterclockwise from East)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

scalex: Anisotropy scaling factor

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-t: Use scale dependent tension

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-c: Perform cross-validation procedure without raster approximation [leave this option as True]

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

cvdev: Cross Validation Errors

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

cvdev:  <QgsProcessingOutputVectorLayer>
	Cross Validation Errors"""
    return processing.run("grass7:v.surf.rst.cvdev", params)

@mcp_server.tool()
def grass7_v_to_3d(params: dict) -> dict:
    """v.to.3d - Performs transformation of 2D vector features to 3D.

v.to.3d (grass7:v.to.3d)

Performs transformation of 2D vector features to 3D.


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

height: Fixed height for 3D vector features

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

column: Name of attribute column used for height

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

-r: Reverse transformation; 3D vector features to 2D

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Do not copy attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: 3D

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	3D"""
    return processing.run("grass7:v.to.3d", params)

@mcp_server.tool()
def grass7_v_to_lines(params: dict) -> dict:
    """v.to.lines - Converts vector polygons or points to lines.

v.to.lines (grass7:v.to.lines)

Converts vector polygons or points to lines.


----------------
Input parameters
----------------

input: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

method: Method used for point interpolation

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: delaunay

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Lines

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Lines"""
    return processing.run("grass7:v.to.lines", params)

@mcp_server.tool()
def grass7_v_to_points(params: dict) -> dict:
    """v.to.points - Create points along input lines

v.to.points (grass7:v.to.points)

Create points along input lines


----------------
Input parameters
----------------

input: Input lines layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area
		- 5: face
		- 6: kernel

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

use: Use line nodes or vertices only

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: node
		- 1: vertex

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

dmax: Maximum distance between points in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-i: Interpolate points between line vertices

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Do not create attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Points along lines

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Points along lines"""
    return processing.run("grass7:v.to.points", params)

@mcp_server.tool()
def grass7_v_to_rast(params: dict) -> dict:
    """v.to.rast - Converts (rasterize) a vector layer into a raster layer.

v.to.rast (grass7:v.to.rast)

Converts (rasterize) a vector layer into a raster layer.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

use: Source of raster values

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: attr
		- 1: cat
		- 2: val
		- 3: z
		- 4: dir

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

attribute_column: Name of column for 'attr' parameter (data type must be numeric)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

rgb_column: Name of color definition column (with RRR:GGG:BBB entries)

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

label_column: Name of column used as raster category labels

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

value: Raster value (for use=val)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

memory: Maximum memory to be used (in MB)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Rasterized

	Parameter type:	QgsProcessingParameterRasterDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_RASTER_FORMAT_OPT: Output Rasters format options (createopt)

	Creation options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_RASTER_FORMAT_META: Output Rasters format metadata options (metaopt)

	Metadata options should be comma separated

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputRasterLayer>
	Rasterized"""
    return processing.run("grass7:v.to.rast", params)

@mcp_server.tool()
def grass7_v_transform(params: dict) -> dict:
    """v.transform - Performs an affine transformation on a vector layer.

v.transform (grass7:v.transform)

Performs an affine transformation on a vector layer.


----------------
Input parameters
----------------

input: Input vector layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

xshift: X shift

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

yshift: Y shift

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zshift: Z shift

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

xscale: X scale

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

yscale: Y scale

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zscale: Z scale

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

zrotation: Rotation around z axis in degrees counterclockwise

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

columns: Name of attribute column(s) used as transformation parameters (Format: parameter:column, e.g. xshift:xs,yshift:ys,zrot:zr)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output: Transformed

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Transformed"""
    return processing.run("grass7:v.transform", params)

@mcp_server.tool()
def grass7_v_type(params: dict) -> dict:
    """v.type - Change the type of geometry elements.

v.type (grass7:v.type)

Change the type of geometry elements.


----------------
Input parameters
----------------

input: Name of existing vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

from_type: Feature type to convert from

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: face
		- 5: kernel

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

to_type: Feature type to convert to

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: face
		- 5: kernel

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

output: Typed

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Typed"""
    return processing.run("grass7:v.type", params)

@mcp_server.tool()
def grass7_v_univar(params: dict) -> dict:
    """v.univar - Calculates univariate statistics for attribute. Variance and standard deviation is calculated only for points if specified.

v.univar (grass7:v.univar)

Calculates univariate statistics for attribute. Variance and standard deviation is calculated only for points if specified.


----------------
Input parameters
----------------

map: Name of input vector map

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: line
		- 2: boundary
		- 3: centroid
		- 4: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

column: Column name

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

percentile: Percentile to calculate

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-g: Print the stats in shell script style

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-e: Calculate extended statistics

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-w: Weigh by line length or area size

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-d: Calculate geometric distances instead of attribute statistics

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

html: Statistics

	Parameter type:	QgsProcessingParameterFileDestination

	Accepted data types:
		- str
		- QgsProperty

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

----------------
Outputs
----------------

html:  <QgsProcessingOutputHtml>
	Statistics"""
    return processing.run("grass7:v.univar", params)

@mcp_server.tool()
def grass7_v_vect_stats(params: dict) -> dict:
    """v.vect.stats - Count points in areas and calculate statistics.

v.vect.stats (grass7:v.vect.stats)

Count points in areas and calculate statistics.


----------------
Input parameters
----------------

points: Name of existing vector map with points

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

areas: Name of existing vector map with areas

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: centroid

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

method: Method for aggregate statistics

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: sum
		- 1: average
		- 2: median
		- 3: mode
		- 4: minimum
		- 5: min_cat
		- 6: maximum
		- 7: max_cat
		- 8: range
		- 9: stddev
		- 10: variance
		- 11: diversity

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

points_column: Column name of points map to use for statistics

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

count_column: Column name to upload points count (integer, created if doesn't exists)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

stats_column: Column name to upload statistics (double, created if doesn't exists)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

output: Updated

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Updated"""
    return processing.run("grass7:v.vect.stats", params)

@mcp_server.tool()
def grass7_v_voronoi(params: dict) -> dict:
    """v.voronoi - v.voronoi - Creates a Voronoi diagram from an input vector layer containing points.

v.voronoi (grass7:v.voronoi)

v.voronoi - Creates a Voronoi diagram from an input vector layer containing points.


----------------
Input parameters
----------------

input: Input points layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

-l: Output tessellation as a graph (lines), not areas

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Do not create attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Voronoi

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Voronoi"""
    return processing.run("grass7:v.voronoi", params)

@mcp_server.tool()
def grass7_v_voronoi_skeleton(params: dict) -> dict:
    """v.voronoi.skeleton - v.voronoi.skeleton - Creates a Voronoi diagram for polygons or compute the center line/skeleton of polygons.

v.voronoi.skeleton (grass7:v.voronoi.skeleton)

v.voronoi.skeleton - Creates a Voronoi diagram for polygons or compute the center line/skeleton of polygons.


----------------
Input parameters
----------------

input: Input polygons layer

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

smoothness: Factor for output smoothness

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

thin: Maximum dangle length of skeletons (-1 will extract the center line)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

-a: Create Voronoi diagram for input areas

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-s: Extract skeletons for input areas

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-l: Output tessellation as a graph (lines), not areas

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

-t: Do not create attribute table

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Voronoi

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Voronoi"""
    return processing.run("grass7:v.voronoi.skeleton", params)

@mcp_server.tool()
def grass7_v_what_rast(params: dict) -> dict:
    """v.what.rast - Uploads raster values at positions of vector centroids to the table.

v.what.rast (grass7:v.what.rast)

Uploads raster values at positions of vector centroids to the table.


----------------
Input parameters
----------------

map: Name of vector points map for which to edit attributes

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

raster: Raster map to be sampled

	Parameter type:	QgsProcessingParameterRasterLayer

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProperty
		- QgsRasterLayer

type: Input feature type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: point
		- 1: centroid

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

column: Name of attribute column to be updated with the query result

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

where: WHERE conditions of SQL statement without 'where' keyword

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

-i: Interpolate values from the nearest four cells

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

output: Sampled

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_REGION_CELLSIZE_PARAMETER: GRASS GIS 7 region cellsize (leave 0 for default)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Sampled"""
    return processing.run("grass7:v.what.rast", params)

@mcp_server.tool()
def grass7_v_what_vect(params: dict) -> dict:
    """v.what.vect - Uploads vector values at positions of vector points to the table.

v.what.vect (grass7:v.what.vect)

Uploads vector values at positions of vector points to the table.


----------------
Input parameters
----------------

map: Name of vector points map for which to edit attributes

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

column: Column to be updated with the query result

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

query_map: Vector map to be queried

	Parameter type:	QgsProcessingParameterFeatureSource

	Accepted data types:
		- str: layer ID
		- str: layer name
		- str: layer source
		- QgsProcessingFeatureSourceDefinition
		- QgsProperty
		- QgsVectorLayer

query_column: Column to be queried

	Parameter type:	QgsProcessingParameterField

	Accepted data types:
		- str
		- QgsProperty

dmax: Maximum query distance in map units

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

output: Updated

	Parameter type:	QgsProcessingParameterVectorDestination

	Accepted data types:
		- str
		- QgsProperty
		- QgsProcessingOutputLayerDefinition

GRASS_REGION_PARAMETER: GRASS GIS 7 region extent

	Parameter type:	QgsProcessingParameterExtent

	Accepted data types:
		- str: as comma delimited list of x min, x max, y min, y max. E.g. '4,10,101,105'
		- str: layer ID. Extent of layer is used.
		- str: layer name. Extent of layer is used.
		- str: layer source. Extent of layer is used.
		- QgsMapLayer: Extent of layer is used
		- QgsProcessingFeatureSourceDefinition: Extent of source is used
		- QgsProperty
		- QgsRectangle
		- QgsReferencedRectangle
		- QgsGeometry: bounding box of geometry is used

GRASS_SNAP_TOLERANCE_PARAMETER: v.in.ogr snap tolerance (-1 = no snap)

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_MIN_AREA_PARAMETER: v.in.ogr min area

	Parameter type:	QgsProcessingParameterNumber

	Accepted data types:
		- int
		- float
		- QgsProperty

GRASS_OUTPUT_TYPE_PARAMETER: v.out.ogr output type

	Parameter type:	QgsProcessingParameterEnum

	Available values:
		- 0: auto
		- 1: point
		- 2: line
		- 3: area

	Accepted data types:
		- int
		- str: as string representation of int, e.g. '1'
		- QgsProperty

GRASS_VECTOR_DSCO: v.out.ogr output data source options (dsco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_LCO: v.out.ogr output layer options (lco)

	Parameter type:	QgsProcessingParameterString

	Accepted data types:
		- str
		- QgsProperty

GRASS_VECTOR_EXPORT_NOCAT: Also export features without category (not labeled). Otherwise only features with category are exported

	Parameter type:	QgsProcessingParameterBoolean

	Accepted data types:
		- bool
		- int
		- str
		- QgsProperty

----------------
Outputs
----------------

output:  <QgsProcessingOutputVectorLayer>
	Updated"""
    return processing.run("grass7:v.what.vect", params)










import asyncio
if __name__ == "__main__":
    asyncio.run(mcp_server.run(transport='sse'))