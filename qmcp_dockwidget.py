# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QMCPDockWidget
                                 A QGIS plugin
 MCP Support for QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-08-23
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Mohammed Nasser
        email                : nasser.mohammed.m.a@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt import QtCore
from qgis.PyQt.QtCore import QThread
from .generated_mcp_single_dict_with_help import mcp_server 

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qmcp_dockwidget_base.ui'))

import threading

class MCPDaemon(QtCore.QThread):
    """MCP server class
    """

    def __init__(self, parent):
        super(QThread, self).__init__()
        self.server = mcp_server
    def start(self):
        self.thread = threading.Thread(target=self.server.run, kwargs={"transport": "sse"})
        self.thread.start()

    def stop(self):
        self.thread.join()  # wait for the thread to finish




class QMCPDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(QMCPDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.daemon = MCPDaemon(self)
        self.startPushButton.clicked.connect(self.startDaemon)
        self.stopPushButton.clicked.connect(self.stopDaemon)

    def startDaemon(self):
        self.daemon.start()
        self.statusLabel.setText("MCP Server is Running")

    def stopDaemon(self):
        self.daemon.stop()
        self.statusLabel.setText("MCP Server is Stopped")

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
